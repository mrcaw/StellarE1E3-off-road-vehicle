/*********************************************************************************************************************
* Stellar-SR5E1E3 Opensource Library 即（Stellar-SR5E1E3 开源库）是一个基于官方 SDK 接口的第三方开源库
* Copyright (c) 2022 SEEKFREE 逐飞科技
*
* 本文件是 Stellar-SR5E1E3 开源库的一部分
*
* Stellar-SR5E1E3 开源库 是免费软件
* 您可以根据自由软件基金会发布的 GPL（GNU General Public License，即 GNU通用公共许可证）的条款
* 即 GPL 的第3版（即 GPL3.0）或（您选择的）任何后来的版本，重新发布和/或修改它
*
* 本开源库的发布是希望它能发挥作用，但并未对其作任何的保证
* 甚至没有隐含的适销性或适合特定用途的保证
* 更多细节请参见 GPL
*
* 您应该在收到本开源库的同时收到一份 GPL 的副本
* 如果没有，请参阅<https://www.gnu.org/licenses/>
*
* 额外注明：
* 本开源库使用 GPL3.0 开源许可证协议 以上许可申明为译文版本
* 许可申明英文版在 libraries/doc 文件夹下的 GPL3_permission_statement.txt 文件中
* 许可证副本在 libraries 文件夹下 即该文件夹下的 LICENSE 文件
* 欢迎各位使用并传播本程序 但修改内容时必须保留逐飞科技的版权声明（即本声明）
*
* 文件名称          zf_common_debug
* 公司名称          成都逐飞科技有限公司
* 版本信息          查看 libraries/doc 文件夹内 version 文件 版本说明
* 开发环境          StellarStudio 7.0.0
* 适用平台          Stellar-SR5E1E3
* 店铺链接          https://www.seekfree.cn/
********************************************************************************************************************/

#ifndef _zf_common_debug_h_
#define _zf_common_debug_h_

// zf_common 层引用
#include "zf_common_typedef.h"

// 此处列举 当前支持的函数列表
// 具体声明在本函数中查看对应注释 具体定义跳转到对应函数定义查看
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Part Start >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// zf_assert                                                                    // 断言函数
// zf_log                                                                       // Log 输出函数

// debug_read_ring_buffer                                                       // 读取 debug 环形缓冲区数据

// debug_message_handler                                                        // debug 调试信息处理函数
// debug_output_struct_init                                                     // debug 输出绑定信息初始化 这个函数一般不由用户调用
// debug_output_init                                                            // debug 输出绑定初始化     这个函数一般不由用户调用
// debug_init                                                                   // debug 串口初始化
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Part   End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// 此处定义 默认使用的调试输出串口资源 用户可以根据自己的需要进行修改
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Part Start >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define DEBUG_UART_INDEX                ( UART_3 )                              // 指定 debug uart
#define DEBUG_UART_BAUDRATE             ( 115200 )                              // 指定 debug uart 所使用的的串口波特率
#define DEBUG_UART_TX_PIN               ( UART3_TX_G15 )                        // 指定 debug uart 所使用的的串口引脚
#define DEBUG_UART_RX_PIN               ( UART3_RX_G14  )                        // 指定 debug uart 所使用的的串口引脚
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Part   End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// 此处定义 调试输出串口的模式 用户可以根据自己的需要进行修改
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Part Start >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define DEBUG_UART_USE_INTERRUPT        ( 1 )                                   // 是否启用 debug uart 接收中断
#if DEBUG_UART_USE_INTERRUPT                                                    // 如果启用 debug uart 接收中断
#define DEBUG_RING_BUFFER_LEN           ( 64 )                                  // 定义环形缓冲区大小 默认 64byte
#endif  
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Part   End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// 此处定义 调试输出等级 这里不允许用户修改
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Part Start >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define DEBUG_OUTPUT_LEVEL_DISABLE      ( 0 )                                   // 禁用调试输出 使用此定义时会跳过调试检查语句
#define DEBUG_OUTPUT_LEVEL_LOG          ( 1 )                                   // Log 调试输出等级 此定义仅仅输出检查报错 不会直接中断程序
#define DEBUG_OUTPUT_LEVEL_ASSERT       ( 2 )                                   // 断言调试输出等级 此定义在检查报错后会输出 Log 并直接中断程序
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Part   End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// 此处定义 本文件需要的枚举与对象结构等 这里不允许用户修改
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Part Start >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
typedef enum                                                                    // 枚举 调试输出类型 此定义不允许用户修改
{
    DEBUG_OBJ_TYPE_NULL             = 0 ,                                       // 未初始化时的默认状态

    DEBUG_OBJ_TYPE_UART             = 1 ,                                       // 使用串口
    DEBUG_OBJ_TYPE_UART_INTERRUPT   = 2 ,                                       // 使用串口并且开启接收中断
    DEBUG_OBJ_TYPE_SCREEN           = 3 ,                                       // 使用屏幕
}debug_obj_type_enum;

typedef void   (*debug_output_uart          )   (const char *str);
typedef void   (*debug_output_screen        )   (void *screen_obj, uint16 x, uint16 y, const char *str);
typedef void   (*debug_output_screen_clear  )   (void *screen_obj);

typedef struct                                                                  // 结构体 调试输出管理对象 此定义不允许用户修改
{
    debug_obj_type_enum         type_index          ;                           // 显示类型

    uint16                      display_x_max       ;                           // 屏幕显示范围
    uint16                      display_y_max       ;                           // 屏幕显示范围

    uint8                       font_x_size         ;                           // 屏幕显示字体大小
    uint8                       font_y_size         ;                           // 屏幕显示字体大小

    union
    {
        uint32                  device_index        ;
        void                    *device_obj         ;
    };
    union                                                                       // 串口显示函数指针 和 屏幕字符串显示函数指针 共用一个变量地址
    {
        debug_output_uart       output_uart         ;
        debug_output_screen     output_screen       ;
    };
    debug_output_screen_clear   output_screen_clear ;                           // 屏幕清屏函数指针
}debug_obj_struct;
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Part   End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// 此处定义 本文件的外部重载函数 这里不允许用户修改
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Part Start >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//-------------------------------------------------------------------------------------------------------------------
// 函数简介     debug 保护处理 主要是防止断言后出现信号维持而导致硬件失控
// 参数说明     void
// 返回参数     void
// 使用示例     debug_pwm_protective_handler();
// 备注信息     本函数在文件内部调用 用户不用关注
//              本函数由底层在 zf_driver_pwm 中进行重载
//-------------------------------------------------------------------------------------------------------------------
void debug_pwm_protective_handler (void);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     debug 保护处理 主要是防止断言后出现依旧进行操作的现象
// 参数说明     void
// 返回参数     void
// 使用示例     debug_interrupt_protective_handler();
// 备注信息     本函数在文件内部调用 用户不用关注
//              本函数由底层在 zf_driver_interrupt 中进行重载
//-------------------------------------------------------------------------------------------------------------------
void debug_interrupt_protective_handler (void);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     debug 串口中断处理函数 isr.c 中对应串口中断服务函数调用
// 参数说明     event               中断事件
// 参数说明     *ptr                默认传入是一个 fifo 对象
// 返回参数     void
// 使用示例     debug_uart_interrupr_handler();
// 备注信息     本函数需要开启 DEBUG_UART_USE_INTERRUPT 宏定义才可使用
//-------------------------------------------------------------------------------------------------------------------
void debug_uart_interrupr_handler (uint32 event, void *ptr);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     debug 串口字符输出接口
// 参数说明     *str                需要输出的字符串
// 返回参数     void
// 使用示例     debug_uart_str_output_handler("Log message");
// 备注信息     本函数在文件内部调用 用户不用关注 也不可修改
//-------------------------------------------------------------------------------------------------------------------
void debug_uart_str_output_handler (const char *str);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     debug 串口输出接口
// 参数说明     *buff           数据地址
// 参数说明     *length         长度
// 返回参数     uint32          剩余未发送数据长度
// 备注信息     本函数在文件内部调用 用户不用关注 也不可修改
//-------------------------------------------------------------------------------------------------------------------
uint8 debug_uart_write_buffer (const uint8 *buff, uint32 *length);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     debug 串口读取接口
// 参数说明     *buff           数据地址
// 参数说明     *length         长度
// 返回参数     void
// 使用示例     debug_uart_str_output_handler("Log message");
// 备注信息     本函数在文件内部调用 用户不用关注 也不可修改
//-------------------------------------------------------------------------------------------------------------------
uint8 debug_uart_read_buffer (uint8 *buff, uint32 *length);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     debug 串口传输接口
// 参数说明     *out                输出数据缓冲区
// 参数说明     out_len             输出长度
// 参数说明     *in                 接收数据缓冲区
// 参数说明     in_len              接收长度
// 返回参数     void
// 使用示例     debug_uart_transfer_handler(out, out_len, in, in_len);
// 备注信息     本函数在文件内部调用 用户不用关注 也不可修改
//-------------------------------------------------------------------------------------------------------------------
void debug_uart_transfer_handler (const uint8 *out, uint32 out_len, uint8 *in, uint32 in_len);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     debug 串口初始化操作
// 参数说明     *obj                Debug 对象指针
// 参数说明     callback            回调函数 为无返回值 uint32 加 void * 参数的函数
// 参数说明     *ptr                回调参数 用户自拟定的参数指针 不需要的话就传入 NULL
// 返回参数     void
// 使用示例     debug_uart_init_handler(obj, callback, ptr);
// 备注信息     本函数在文件内部调用 用户不用关注 也不可修改
//-------------------------------------------------------------------------------------------------------------------
void debug_uart_init_handler (debug_obj_struct *obj, void_callback_uint32_ptr callback, void *ptr);
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Part   End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// 此处列举 本文件的所有函数声明 [ 其中包括宏定义函数 ] 这里不允许用户修改
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Part Start >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//-------------------------------------------------------------------------------------------------------------------
// 函数简介     调试断言
// 参数说明     pass                判断条件 如果条件为真则返回无错误 如果条件为假就触发断言机制
// 返回参数     uint8               ZF_NO_ERROR - 0 - 正常 /  !ZF_NO_ERROR - !0 - 异常
// 使用示例     zf_assert(pass_flag);
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
#define zf_assert(pass)     ((pass) ? ZF_NO_ERROR : debug_message_handler(DEBUG_OUTPUT_LEVEL_ASSERT, (pass), (NULL), ZF_FILE_MESSAGE, ZF_LINE_MESSAGE))

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     调试断言
// 参数说明     pass                判断条件 如果条件为真则返回无错误 如果条件为假就触发调试输出
// 参数说明     str                 触发输出时需要输出的信息
// 返回参数     uint8               ZF_NO_ERROR - 0 - 正常 /  !ZF_NO_ERROR - !0 - 异常
// 使用示例     zf_log(pass_flag, "Pass flag set.");
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
#define zf_log(pass, str)   ((pass) ? ZF_NO_ERROR : debug_message_handler(DEBUG_OUTPUT_LEVEL_LOG, (pass), (str), ZF_FILE_MESSAGE, ZF_LINE_MESSAGE))

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     debug 调试信息处理函数
// 参数说明     output_level        输出等级
// 参数说明     pass                条件判断
// 参数说明     *str                输出的信息
// 参数说明     *file               文件名
// 参数说明     line                目标行数
// 返回参数     uint8               返回 pass 判断值
// 使用示例     debug_message_handler(ZF_DEBUG_FILE, 0, "Error", ZF_DEBUG_FILE, ZF_DEBUG_LINE);
// 备注信息     此部分不允许用户更改
//              推荐使用 zf_commmon_debug.h 中的 zf_log(x, str) 接口
//-------------------------------------------------------------------------------------------------------------------
uint8 debug_message_handler (uint8 output_level, uint8 pass, char *str, char *file, int line);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     读取 debug 环形缓冲区数据
// 参数说明     *data               读出数据存放的数组指针
// 参数说明     data_len            目标读出数据长度
// 返回参数     uint32              实际读出长度
// 使用示例     debug_read_ring_buffer(data, data_len);
// 备注信息     本函数需要开启 DEBUG_UART_USE_INTERRUPT 宏定义 否则直接返回
//-------------------------------------------------------------------------------------------------------------------
uint32 debug_read_ring_buffer (uint8 *data, uint32 data_len);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     debug 输出绑定初始化
// 参数说明     *obj                屏幕对象
// 参数说明     dispaly_x           屏幕横轴长
// 参数说明     dispaly_y           屏幕纵轴长
// 参数说明     font_x              字体宽度
// 参数说明     font_y              字体高度
// 参数说明     output_screen       屏幕字符串输出接口
// 参数说明     output_screen_clear 屏幕清空接口
// 返回参数     void
// 使用示例     debug_output_init(info);
// 备注信息     这个函数一般不由用户调用
//-------------------------------------------------------------------------------------------------------------------
void debug_screen_init (void *obj, uint16 dispaly_x, uint16 dispaly_y, uint8 font_x, uint8 font_y, debug_output_screen output_screen, debug_output_screen_clear output_screen_clear);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     debug 串口初始化
// 参数说明     void
// 返回参数     void
// 使用示例     debug_init();
// 备注信息     开源库示例默认调用 但默认禁用中断接收
//-------------------------------------------------------------------------------------------------------------------
void debug_init (void);
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Part   End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#endif
