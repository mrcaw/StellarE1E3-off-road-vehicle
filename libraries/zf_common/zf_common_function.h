/*********************************************************************************************************************
* Stellar-SR5E1E3 Opensource Library 即（Stellar-SR5E1E3 开源库）是一个基于官方 SDK 接口的第三方开源库
* Copyright (c) 2022 SEEKFREE 逐飞科技
*
* 本文件是 Stellar-SR5E1E3 开源库的一部分
*
* Stellar-SR5E1E3 开源库 是免费软件
* 您可以根据自由软件基金会发布的 GPL（GNU General Public License，即 GNU通用公共许可证）的条款
* 即 GPL 的第3版（即 GPL3.0）或（您选择的）任何后来的版本，重新发布和/或修改它
*
* 本开源库的发布是希望它能发挥作用，但并未对其作任何的保证
* 甚至没有隐含的适销性或适合特定用途的保证
* 更多细节请参见 GPL
*
* 您应该在收到本开源库的同时收到一份 GPL 的副本
* 如果没有，请参阅<https://www.gnu.org/licenses/>
*
* 额外注明：
* 本开源库使用 GPL3.0 开源许可证协议 以上许可申明为译文版本
* 许可申明英文版在 libraries/doc 文件夹下的 GPL3_permission_statement.txt 文件中
* 许可证副本在 libraries 文件夹下 即该文件夹下的 LICENSE 文件
* 欢迎各位使用并传播本程序 但修改内容时必须保留逐飞科技的版权声明（即本声明）
*
* 文件名称          zf_common_function
* 公司名称          成都逐飞科技有限公司
* 版本信息          查看 libraries/doc 文件夹内 version 文件 版本说明
* 开发环境          StellarStudio 7.0.0
* 适用平台          Stellar-SR5E1E3
* 店铺链接          https://www.seekfree.cn/
********************************************************************************************************************/

#ifndef _zf_common_function_h_
#define _zf_common_function_h_

// zf_common 层引用
#include "zf_common_typedef.h"

// 此处列举 当前支持的函数列表
// 具体声明在本函数中查看对应注释 具体定义跳转到对应函数定义查看
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Part Start >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// zf_function_abs                                                                     // 绝对值函数
// zf_function_limit                                                                   // 限幅函数
// zf_function_limit_ab                                                                // 双边限幅函数

// zf_function_sin                                                                     // 使用泰勒级数计算 sin
// zf_function_sin                                                                     // 计算 cos
// zf_function_get_sin_amplitude_table                                                 // 正弦波转换函数 获取指定采样点
// zf_function_get_greatest_common_divisor                                             // 获取整型数的最大公约数 九章算术之更相减损术

// zf_function_soft_delay                                                              // 软件延时
// zf_function_get_data_index                                                          // 数据元素定位
// zf_function_str_to_int                                                              // 字符串转整形数字
// zf_function_int_to_str                                                              // 整形数字转字符串
// zf_function_str_to_uint                                                             // 字符串转无符号整形数字
// zf_function_uint_to_str                                                             // 无符号整形数字转字符串
// zf_function_str_to_float                                                            // 字符串转浮点数
// zf_function_float_to_str                                                            // 浮点数字转字符串
// zf_function_str_to_double                                                           // 字符串转双精度浮点数
// zf_function_double_to_str                                                           // 双精度浮点数字转字符串
// zf_function_str_to_hex                                                              // 字符串转 Hex
// zf_function_hex_to_str                                                              // Hex 转字符串
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Part   End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// 此处定义 本文件需要的枚举与对象结构等 这里不允许用户修改
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Part Start >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define ZF_PI_DEFAULT       ( 3.14159265358979323846 )
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Part   End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// 此处列举 本文件的所有函数声明 [ 其中包括宏定义函数 ] 这里不允许用户修改
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Part Start >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//-------------------------------------------------------------------------------------------------------------------
// 函数简介     绝对值函数 数据范围是 [-32767,32767]
// 参数说明     dat                 需要求绝对值的数
// 返回参数     int                 返回绝对值
// 使用示例     dat = zf_function_abs(dat);
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
#define zf_function_abs(x)             ((x) >= 0 ? (x): -(x))

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     限幅 数据范围是 [-32768,32767]
// 参数说明     x                   被限幅的数据
// 参数说明     y                   限幅范围(数据会被限制在-y至+y之间)
// 返回参数     int                 限幅之后的数据
// 使用示例     int dat = zf_function_limit(500, 300);
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
#define zf_function_limit(x, y)        ((x) >= (y) ? (y) : ((x) <= -(y) ? -(y) : (x)))

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     双边限幅 数据范围是 [-32768,32767]
// 参数说明     x                   被限幅的数据
// 参数说明     a                   限幅范围左边界
// 参数说明     b                   限幅范围右边界
// 返回参数     int                 限幅之后的数据
// 使用示例     int dat = zf_function_limit_ab(500, -300, 400);
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
#define zf_function_limit_ab(x, a, b)  ((x) <= (a) ? (a) : ((x) >= (b) ? (b) : (x)))

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     使用泰勒级数计算 sin
// 参数说明     x                   弧度
// 返回参数     double              计算结果
// 使用示例     printf("sin is : %f.\r\n", zf_function_sin(ZF_PI_DEFAULT / 6));
// 备注信息
//-------------------------------------------------------------------------------------------------------------------
double zf_function_sin (double x);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     计算 cos
// 参数说明     x                   弧度
// 返回参数     double              计算结果
// 使用示例     printf("cos is : %f.\r\n", zf_function_cos(ZF_PI_DEFAULT / 6));
// 备注信息
//-------------------------------------------------------------------------------------------------------------------
double zf_function_cos (double x);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     Fucntion 断言处理
// 参数说明     *file               文件路径
// 参数说明     line                报错行
// 参数说明     *tips               输出信息
// 返回参数     uint8               操作状态 ZF_NO_ERROR / GPIO_OPERATION_DONE - 完成 其余值为异常
// 使用示例     zf_function_assert_handler(file, line, tips);
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
uint8 zf_function_assert_handler (char *file, int line, char *tips);
#define zf_function_assert(status)      ((status) ? (0) : zf_function_assert_handler(__FILE__, __LINE__, NULL))
#define zf_function_log(status, tips)   ((status) ? (0) : zf_function_assert_handler(__FILE__, __LINE__, (tips)))

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     正弦波转换函数 获取指定采样点
// 参数说明     *data_buffer        数据缓冲区
// 参数说明     sample_max          采样点数
// 参数说明     amplitude_max       最大幅值
// 参数说明     offset_degree       偏移相位角
// 返回参数     void
// 使用示例     zf_function_get_sin_amplitude_table(sound_amplitude, 1024, 512, 270);
// 备注信息
//-------------------------------------------------------------------------------------------------------------------
void zf_function_get_sin_amplitude_table (uint32 *data_buffer, uint32 sample_max, uint32 amplitude_max, uint32 offset_degree);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     获取整型数的最大公约数 九章算术之更相减损术
// 参数说明     num1                数字1
// 参数说明     num2                数字2
// 返回参数     uint32              最大公约数
// 使用示例     return zf_function_get_greatest_common_divisor(144, 36);
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
uint32 zf_function_get_greatest_common_divisor (uint32 num1, uint32 num2);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     软件延时
// 参数说明     tick                延时时间
// 返回参数     void
// 使用示例     zf_function_soft_delay(100);
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
void zf_function_soft_delay (volatile long tick);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     数据元素定位
// 参数说明     data_size           数据元素类型 (详见 zf_common_typedef.h 的 common_data_size_enum 定义)
// 返回参数     *buffer             数据缓冲区
// 返回参数     buffer_length       数据缓冲区长度
// 返回参数     data                查询的数据值
// 返回参数     id                  查询的数据 ID 比如查询数组中的第一个 data 数据就填 1 此数据范围为 [1 - n]
// 使用示例     uint32 index = zf_function_get_data_index(COMMON_DATA_SIZE_8BIT, (void *)"-100", 4, '-', 1);
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
uint32 zf_function_get_data_index (common_data_size_enum data_size, void *buffer, uint32 buffer_length, uint32 data, uint32 offset);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     字符串转整形数字 数据范围是 [-32768,32767]
// 参数说明     *str                传入字符串 可带符号
// 返回参数     int32               转换后的数据
// 使用示例     int32 dat = zf_function_str_to_int("-100");
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
int32 zf_function_str_to_int (char *str);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     整形数字转字符串 数据范围是 [-32768,32767]
// 参数说明     *str                字符串指针
// 参数说明     number              传入的数据
// 返回参数     void
// 使用示例     zf_function_int_to_str(data_buffer, -300);
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
void zf_function_int_to_str (char *str, int32 number);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     字符串转无符号整形数字 数据范围是 [0,65535]
// 参数说明     *str                传入字符串 无符号
// 返回参数     uint32              转换后的数据
// 使用示例     uint32 dat = zf_function_str_to_uint("100");
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
uint32 zf_function_str_to_uint (char *str);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     无符号整形数字转字符串 数据范围是 [0,65535]
// 参数说明     *str                字符串指针
// 参数说明     number              传入的数据
// 返回参数     void
// 使用示例     zf_function_uint_to_str(data_buffer, 300);
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
void zf_function_uint_to_str (char *str, uint32 number);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     字符串转浮点数 有效累计精度为小数点后六位
// 参数说明     *str                传入字符串 可带符号
// 返回参数     float               转换后的数据
// 使用示例     float dat = zf_function_str_to_float("-100.2");
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
float zf_function_str_to_float (char *str);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     浮点数字转字符串
// 参数说明     *str                字符串指针
// 参数说明     number              传入的数据
// 参数说明     point_bit           小数点精度
// 返回参数     void
// 使用示例     zf_function_float_to_str(data_buffer, 3.1415, 2);
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
void zf_function_float_to_str (char *str, float number, uint8 point_bit);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     字符串转双精度浮点数 有效累计精度为小数点后九位
// 参数说明     str                 传入字符串 可带符号
// 返回参数     double              转换后的数据
// 使用示例     double dat = zf_function_str_to_double("-100.2");
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
double zf_function_str_to_double (char *str);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     双精度浮点数字转字符串
// 参数说明     *str                字符串指针
// 参数说明     number              传入的数据
// 参数说明     point_bit           小数点精度
// 返回参数     void
// 使用示例     zf_function_double_to_str(data_buffer, 3.1415, 2);
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
void zf_function_double_to_str (char *str, double number, uint8 point_bit);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     字符串转 Hex
// 参数说明     str                 传入字符串 无符号
// 返回参数     uint32              转换后的数据
// 使用示例     uint32 dat = zf_function_str_to_hex("0x11");
// 备注信息     必须要 0x 开头才行
//-------------------------------------------------------------------------------------------------------------------
uint32 zf_function_str_to_hex (char *str);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     Hex 转字符串
// 参数说明     *str                字符串指针
// 参数说明     number              传入的数据
// 返回参数     void
// 使用示例     zf_function_hex_to_str(data_buffer, 0x11);
// 备注信息     
//-------------------------------------------------------------------------------------------------------------------
void zf_function_hex_to_str (char *str, uint32 number);

//-------------------------------------------------------------------------------------------------------------------
// 函数简介     zf_sprintf 函数实现
// 参数说明     *buff               缓冲区
// 参数说明     *format             源字符串
// 参数说明     ...                 可变参数列表
// 返回参数     uint32              处理后数据长
// 使用示例     zf_sprintf(buff, "Data : %d", 100);
// 备注信息     本函数在文件内部调用 用户不用关注 也不可修改
//-------------------------------------------------------------------------------------------------------------------
uint32 zf_sprintf (int8 *buff, const int8 *format, ...);
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Part   End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#endif
