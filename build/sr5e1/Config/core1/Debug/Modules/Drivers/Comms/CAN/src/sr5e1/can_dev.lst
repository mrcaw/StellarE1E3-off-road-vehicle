   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"can_dev.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.bss.can_enabled,"aw",%nobits
  21              	can_enabled:
  22 0000 00       		.space	1
  23              		.section	.text.can_dev_get_reg_ptr,"ax",%progbits
  24              		.align	1
  25              		.p2align 4,,15
  26              		.global	can_dev_get_reg_ptr
  27              		.syntax unified
  28              		.thumb
  29              		.thumb_func
  31              	can_dev_get_reg_ptr:
  32              	.LFB456:
  33              		.file 1 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1/can_dev.c
   1:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /****************************************************************************
   2:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
   3:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * Copyright (c) 2022 STMicroelectronics - All Rights Reserved
   4:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
   5:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * License terms: STMicroelectronics Proprietary in accordance with licensing
   6:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * terms SLA0098 at www.st.com.
   7:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
   8:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * THIS SOFTWARE IS DISTRIBUTED "AS IS," AND ALL WARRANTIES ARE DISCLAIMED,
   9:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * INCLUDING MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  10:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
  11:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *****************************************************************************/
  12:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
  13:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @file    can_dev.c
  14:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   CAN specific device source file.
  15:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
  16:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @addtogroup DRIVERS
  17:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @addtogroup COMMS
  18:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @ingroup DRIVERS
  19:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @addtogroup CAN
  20:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @ingroup COMMS
  21:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @{
  22:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
  23:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  24:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** #include <can.h>
  25:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** #include <can_private.h>
  26:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** #include <clock.h>
  27:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** #include <irq.h>
  28:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** #include <platform.h>
  29:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  30:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  31:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /* Module local definitions.                                                 */
  32:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  33:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  34:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  35:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /* Module exported variables.                                                */
  36:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  37:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  38:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  39:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /* Module local types.                                                       */
  40:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  41:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  42:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  43:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /* Module local variables.                                                   */
  44:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  45:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  46:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** static uint8_t can_enabled = 0U;
  47:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  48:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  49:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /* Local function prototypes                                                 */
  50:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  51:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  52:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  53:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /* Module local functions.                                                   */
  54:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  55:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  56:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  57:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /* Module exported functions.                                                */
  58:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /*===========================================================================*/
  59:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  60:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
  61:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Returns pointer to the CAN register block.
  62:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
  63:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
  64:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @return              pointer to the CAN register block.
  65:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
  66:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
  67:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
  68:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** FDCAN_TypeDef *can_dev_get_reg_ptr(can_driver_t *cdp) {
  34              		.loc 1 68 55
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 16
  37              		@ frame_needed = 0, uses_anonymous_args = 0
  38              		@ link register save eliminated.
  39 0000 84B0     		sub	sp, sp, #16
  40              		.cfi_def_cfa_offset 16
  41 0002 0190     		str	r0, [sp, #4]
  69:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  70:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     FDCAN_TypeDef *can;
  71:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  72:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     if (cdp == &DRV_CAN1) {
  42              		.loc 1 72 8
  43 0004 019B     		ldr	r3, [sp, #4]
  44 0006 0D4A     		ldr	r2, .L7
  45 0008 9342     		cmp	r3, r2
  46 000a 02D1     		bne	.L2
  73:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         can = FDCAN1;
  47              		.loc 1 73 13
  48 000c 0C4B     		ldr	r3, .L7+4
  49 000e 0393     		str	r3, [sp, #12]
  50 0010 0FE0     		b	.L3
  51              	.L2:
  74:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN2) {
  52              		.loc 1 74 15
  53 0012 019B     		ldr	r3, [sp, #4]
  54 0014 0B4A     		ldr	r2, .L7+8
  55 0016 9342     		cmp	r3, r2
  56 0018 02D1     		bne	.L4
  75:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         can = FDCAN2;
  57              		.loc 1 75 13
  58 001a 0B4B     		ldr	r3, .L7+12
  59 001c 0393     		str	r3, [sp, #12]
  60 001e 08E0     		b	.L3
  61              	.L4:
  76:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN3) {
  62              		.loc 1 76 15
  63 0020 019B     		ldr	r3, [sp, #4]
  64 0022 0A4A     		ldr	r2, .L7+16
  65 0024 9342     		cmp	r3, r2
  66 0026 02D1     		bne	.L5
  77:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         can = FDCAN3;
  67              		.loc 1 77 13
  68 0028 094B     		ldr	r3, .L7+20
  69 002a 0393     		str	r3, [sp, #12]
  70 002c 01E0     		b	.L3
  71              	.L5:
  78:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else {
  79:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         can = FDCAN4;
  72              		.loc 1 79 13
  73 002e 094B     		ldr	r3, .L7+24
  74 0030 0393     		str	r3, [sp, #12]
  75              	.L3:
  80:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     }
  81:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  82:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     return can;
  76              		.loc 1 82 12
  77 0032 039B     		ldr	r3, [sp, #12]
  83:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
  78              		.loc 1 83 1
  79 0034 1846     		mov	r0, r3
  80 0036 04B0     		add	sp, sp, #16
  81              		.cfi_def_cfa_offset 0
  82              		@ sp needed
  83 0038 7047     		bx	lr
  84              	.L8:
  85 003a 00BF     		.align	2
  86              	.L7:
  87 003c 00000000 		.word	DRV_CAN1
  88 0040 00A00042 		.word	1107337216
  89 0044 00000000 		.word	DRV_CAN2
  90 0048 00A80042 		.word	1107339264
  91 004c 00000000 		.word	DRV_CAN3
  92 0050 00B00042 		.word	1107341312
  93 0054 00B80042 		.word	1107343360
  94              		.cfi_endproc
  95              	.LFE456:
  97              		.section	.text.can_dev_get_clock,"ax",%progbits
  98              		.align	1
  99              		.p2align 4,,15
 100              		.global	can_dev_get_clock
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 105              	can_dev_get_clock:
 106              	.LFB457:
  84:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  85:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
  86:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Returns value of CAN clock.
  87:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
  88:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
  89:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @return              CAN clock.
  90:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
  91:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
  92:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
  93:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** uint32_t can_dev_get_clock(can_driver_t *cdp) {
 107              		.loc 1 93 47
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 8
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		@ link register save eliminated.
 112 0000 82B0     		sub	sp, sp, #8
 113              		.cfi_def_cfa_offset 8
 114 0002 0190     		str	r0, [sp, #4]
  94:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  95:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     (void)cdp;
  96:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
  97:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     return CLOCK_FDCANCLK;
 115              		.loc 1 97 12
 116 0004 014B     		ldr	r3, .L11
  98:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 117              		.loc 1 98 1
 118 0006 1846     		mov	r0, r3
 119 0008 02B0     		add	sp, sp, #8
 120              		.cfi_def_cfa_offset 0
 121              		@ sp needed
 122 000a 7047     		bx	lr
 123              	.L12:
 124              		.align	2
 125              	.L11:
 126 000c 005A6202 		.word	40000000
 127              		.cfi_endproc
 128              	.LFE457:
 130              		.section	.text.can_dev_clock_enable,"ax",%progbits
 131              		.align	1
 132              		.p2align 4,,15
 133              		.global	can_dev_clock_enable
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 138              	can_dev_clock_enable:
 139              	.LFB458:
  99:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 100:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 101:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Enables CAN clock.
 102:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 103:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
 104:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 105:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
 106:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 107:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** void can_dev_clock_enable(can_driver_t *cdp) {
 140              		.loc 1 107 46
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 216
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145 0000 B6B0     		sub	sp, sp, #216
 146              		.cfi_def_cfa_offset 216
 147 0002 0190     		str	r0, [sp, #4]
 108:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 109:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     /* In order to enable the clock of the FDCANs Message RAM, all FDCAN
 110:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****        instances must be enabled.*/
 111:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     /* Update the mask of enabled CAN instances and enable the clock of the
 112:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****        selected FDCAN instance.*/
 113:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     if (cdp == &DRV_CAN1) {
 148              		.loc 1 113 8
 149 0004 019B     		ldr	r3, [sp, #4]
 150 0006 AB4A     		ldr	r2, .L95
 151 0008 9342     		cmp	r3, r2
 152 000a 40F0F681 		bne	.L14
 153 000e 0123     		movs	r3, #1
 154 0010 8DF8D730 		strb	r3, [sp, #215]
 155 0014 9DF8D730 		ldrb	r3, [sp, #215]
 156 0018 8DF8D630 		strb	r3, [sp, #214]
 157 001c 4FF48073 		mov	r3, #256
 158 0020 3493     		str	r3, [sp, #208]
 159              	.LBB170:
 160              	.LBB171:
 161              	.LBB172:
 162              	.LBB173:
 163              		.file 2 "src-gen/sr5e1/clock.h"
   1:src-gen/sr5e1/clock.h **** /****************************************************************************
   2:src-gen/sr5e1/clock.h ****  *
   3:src-gen/sr5e1/clock.h ****  * Copyright (c) 2022 STMicroelectronics - All Rights Reserved
   4:src-gen/sr5e1/clock.h ****  *
   5:src-gen/sr5e1/clock.h ****  * License terms: STMicroelectronics Proprietary in accordance with licensing
   6:src-gen/sr5e1/clock.h ****  * terms SLA0098 at www.st.com.
   7:src-gen/sr5e1/clock.h ****  *
   8:src-gen/sr5e1/clock.h ****  * THIS SOFTWARE IS DISTRIBUTED "AS IS," AND ALL WARRANTIES ARE DISCLAIMED,
   9:src-gen/sr5e1/clock.h ****  * INCLUDING MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  10:src-gen/sr5e1/clock.h ****  *
  11:src-gen/sr5e1/clock.h ****  *****************************************************************************/
  12:src-gen/sr5e1/clock.h **** /**
  13:src-gen/sr5e1/clock.h ****  * @file    clock.h
  14:src-gen/sr5e1/clock.h ****  * @brief   SR5E1 clock subsystem header file.
  15:src-gen/sr5e1/clock.h ****  *
  16:src-gen/sr5e1/clock.h ****  * @addtogroup PLATFORM
  17:src-gen/sr5e1/clock.h ****  * @addtogroup CLOCK
  18:src-gen/sr5e1/clock.h ****  * @ingroup PLATFORM
  19:src-gen/sr5e1/clock.h ****  * @{
  20:src-gen/sr5e1/clock.h ****  */
  21:src-gen/sr5e1/clock.h **** 
  22:src-gen/sr5e1/clock.h **** #ifndef _CLOCK_H_
  23:src-gen/sr5e1/clock.h **** #define _CLOCK_H_
  24:src-gen/sr5e1/clock.h **** 
  25:src-gen/sr5e1/clock.h **** #include <clock_cfg.h>
  26:src-gen/sr5e1/clock.h **** #include <platform.h>
  27:src-gen/sr5e1/clock.h **** #include <typedefs.h>
  28:src-gen/sr5e1/clock.h **** 
  29:src-gen/sr5e1/clock.h **** /*===========================================================================*/
  30:src-gen/sr5e1/clock.h **** /* Module constants.                                                         */
  31:src-gen/sr5e1/clock.h **** /*===========================================================================*/
  32:src-gen/sr5e1/clock.h **** 
  33:src-gen/sr5e1/clock.h **** /**
  34:src-gen/sr5e1/clock.h ****  * @name    RCC CFGR register
  35:src-gen/sr5e1/clock.h ****  * @{
  36:src-gen/sr5e1/clock.h ****  */
  37:src-gen/sr5e1/clock.h **** #define CLOCK_SW_MASK               (3UL << 0U)
  38:src-gen/sr5e1/clock.h **** #define CLOCK_SW_IRCOSC             (4UL << 0U) /* Internal 16 MHz   */
  39:src-gen/sr5e1/clock.h **** #define CLOCK_SW_XOSC               (5UL << 0U) /* External 4-40 MHz */
  40:src-gen/sr5e1/clock.h **** #define CLOCK_SW_PLL0PHI            (6UL << 0U)
  41:src-gen/sr5e1/clock.h **** #define CLOCK_SW_PLL1PHI            (7UL << 0U)
  42:src-gen/sr5e1/clock.h **** 
  43:src-gen/sr5e1/clock.h **** #define CLOCK_SYSPRE_MASK           (511UL << 8U)
  44:src-gen/sr5e1/clock.h **** #define CLOCK_SYSPRE_FIELD(n)       (((uint32_t)(n)) << 8U)
  45:src-gen/sr5e1/clock.h **** 
  46:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_MASK           (15UL << 20U)
  47:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_NOCLOCK        (0UL << 20U)
  48:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_LSI            (8UL << 20U)
  49:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_IRCOSC         (9UL << 20U)
  50:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_XOSC           (10UL << 20U)
  51:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_PLL0PHI        (11UL << 20U)
  52:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_PLL1PHI        (12UL << 20U)
  53:src-gen/sr5e1/clock.h **** 
  54:src-gen/sr5e1/clock.h **** #define CLOCK_MCOPRE_MASK           (63UL << 24U)
  55:src-gen/sr5e1/clock.h **** #define CLOCK_MCOPRE_FIELD(n)       (((uint32_t)(n)) << 24U)
  56:src-gen/sr5e1/clock.h **** /** @} */
  57:src-gen/sr5e1/clock.h **** 
  58:src-gen/sr5e1/clock.h **** /**
  59:src-gen/sr5e1/clock.h ****  * @name    RCC PLLCFGR register
  60:src-gen/sr5e1/clock.h ****  * @{
  61:src-gen/sr5e1/clock.h ****  */
  62:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_MASK          (3UL << 0U)
  63:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_NOCLOCK       (0UL << 0U)
  64:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_IRCOSC        (2UL << 0U)
  65:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_XOSC          (3UL << 0U)
  66:src-gen/sr5e1/clock.h **** 
  67:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_MASK          (3UL << 8U)
  68:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_NOCLOCK       (0UL << 8U)
  69:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_PLL0PHI1      (2UL << 8U)
  70:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_XOSC          (3UL << 8U)
  71:src-gen/sr5e1/clock.h **** /** @} */
  72:src-gen/sr5e1/clock.h **** 
  73:src-gen/sr5e1/clock.h **** /**
  74:src-gen/sr5e1/clock.h ****  * @name    RCC CCIPR1 register
  75:src-gen/sr5e1/clock.h ****  * @{
  76:src-gen/sr5e1/clock.h ****  */
  77:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_MASK          (7UL << 0U)
  78:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_NOCLOCK       (0UL << 0U)
  79:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_IRCOSC        (4UL << 0U)
  80:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_XOSC          (5UL << 0U)
  81:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_PLL0PHI       (6UL << 0U)
  82:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_LSI           (7UL << 0U)
  83:src-gen/sr5e1/clock.h **** 
  84:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_MASK           (7UL << 4U)
  85:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_NOCLOCK        (0UL << 4U)
  86:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_IRCOSC         (4UL << 4U)
  87:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_XOSC           (5UL << 4U)
  88:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_PLL0PHI        (6UL << 4U)
  89:src-gen/sr5e1/clock.h **** 
  90:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_MASK           (7UL << 8U)
  91:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_NOCLOCK        (0UL << 8U)
  92:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_IRCOSC         (4UL << 8U)
  93:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_XOSC           (5UL << 8U)
  94:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_PLL0PHI        (6UL << 8U)
  95:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_I2S_CKIN       (7UL << 8U)
  96:src-gen/sr5e1/clock.h **** 
  97:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_MASK         (7UL << 12U)
  98:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_NOCLOCK      (0UL << 12U)
  99:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_XOSC         (4UL << 12U)
 100:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_PLL0PHI      (5UL << 12U)
 101:src-gen/sr5e1/clock.h **** 
 102:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_MASK           (7UL << 16U)
 103:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_NOCLOCK        (0UL << 16U)
 104:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_XOSC           (4UL << 16U)
 105:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_PLL0PHI        (5UL << 16U)
 106:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_PLL1PHI        (6UL << 16U)
 107:src-gen/sr5e1/clock.h **** 
 108:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_MASK         (7UL << 20U)
 109:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_NOCLOCK      (0UL << 20U)
 110:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_XOSC         (4UL << 20U)
 111:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_PLL0PHI      (5UL << 20U)
 112:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_PLL1PHI      (6UL << 20U)
 113:src-gen/sr5e1/clock.h **** /** @} */
 114:src-gen/sr5e1/clock.h **** 
 115:src-gen/sr5e1/clock.h **** /**
 116:src-gen/sr5e1/clock.h ****  * @name    RCC CCIPR2 register
 117:src-gen/sr5e1/clock.h ****  * @{
 118:src-gen/sr5e1/clock.h ****  */
 119:src-gen/sr5e1/clock.h **** #define CLOCK_UARTPRE_MASK          (31U << 0U)
 120:src-gen/sr5e1/clock.h **** #define CLOCK_UARTPRE_FIELD(n)      (((uint32_t)(n)) << 0U)
 121:src-gen/sr5e1/clock.h **** 
 122:src-gen/sr5e1/clock.h **** #define CLOCK_I2CPRE_MASK           (31U << 5U)
 123:src-gen/sr5e1/clock.h **** #define CLOCK_I2CPRE_FIELD(n)       (((uint32_t)(n)) << 5U)
 124:src-gen/sr5e1/clock.h **** 
 125:src-gen/sr5e1/clock.h **** #define CLOCK_SPIPRE_MASK           (31U << 10U)
 126:src-gen/sr5e1/clock.h **** #define CLOCK_SPIPRE_FIELD(n)       (((uint32_t)(n)) << 10U)
 127:src-gen/sr5e1/clock.h **** 
 128:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANPRE_MASK         (31U << 15U)
 129:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANPRE_FIELD(n)     (((uint32_t)(n)) << 15U)
 130:src-gen/sr5e1/clock.h **** 
 131:src-gen/sr5e1/clock.h **** #define CLOCK_ADCPRE_MASK           (63U << 20U)
 132:src-gen/sr5e1/clock.h **** #define CLOCK_ADCPRE_FIELD(n)       (((uint32_t)(n)) << 20U)
 133:src-gen/sr5e1/clock.h **** 
 134:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCPRE_MASK         (63U << 26U)
 135:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCPRE_FIELD(n)     (((uint32_t)(n)) << 26U)
 136:src-gen/sr5e1/clock.h **** /** @} */
 137:src-gen/sr5e1/clock.h **** 
 138:src-gen/sr5e1/clock.h **** /**
 139:src-gen/sr5e1/clock.h ****  * @name    RCC LSCFGR register
 140:src-gen/sr5e1/clock.h ****  * @{
 141:src-gen/sr5e1/clock.h ****  */
 142:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_MASK           (3UL << 9U)
 143:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_NOCLOCK        (0UL << 9U)
 144:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_LSI            (2UL << 9U)  /* LSI after LSIPRE prescaler division */
 145:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_XOSC           (3UL << 9U)  /* XOSC divided by 32 */
 146:src-gen/sr5e1/clock.h **** 
 147:src-gen/sr5e1/clock.h **** #define CLOCK_LSIPRE_MASK           (31UL << 0U)
 148:src-gen/sr5e1/clock.h **** #define CLOCK_LSIPRE_FIELD(n)       (((uint32_t)(n)) << 0U)
 149:src-gen/sr5e1/clock.h **** /** @} */
 150:src-gen/sr5e1/clock.h **** 
 151:src-gen/sr5e1/clock.h **** /**
 152:src-gen/sr5e1/clock.h ****  * @name    PLLDIG PLL0DV register
 153:src-gen/sr5e1/clock.h ****  * @{
 154:src-gen/sr5e1/clock.h ****  */
 155:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0MFD_MASK          (127UL << 0U)
 156:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0MFD_FIELD(n)      (((uint32_t)(n)) << 0U)
 157:src-gen/sr5e1/clock.h **** 
 158:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PREDIV_MASK       (7UL << 12U)
 159:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PREDIV_FIELD(n)   (((uint32_t)(n)) << 12U)
 160:src-gen/sr5e1/clock.h **** 
 161:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI_MASK       (63UL << 16U)
 162:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI_FIELD(n)   (((uint32_t)(n)) << 16U)
 163:src-gen/sr5e1/clock.h **** 
 164:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI1_MASK      (15UL << 27U)
 165:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI1_FIELD(n)  (((uint32_t)(n)) << 27U)
 166:src-gen/sr5e1/clock.h **** /** @} */
 167:src-gen/sr5e1/clock.h **** 
 168:src-gen/sr5e1/clock.h **** /**
 169:src-gen/sr5e1/clock.h ****  * @name    PLLDIG PLL1DV register
 170:src-gen/sr5e1/clock.h ****  * @{
 171:src-gen/sr5e1/clock.h ****  */
 172:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1MFD_MASK          (127UL << 0U)
 173:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1MFD_FIELD(n)      (((uint32_t)(n)) << 0U)
 174:src-gen/sr5e1/clock.h **** 
 175:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1RFDPHI_MASK       (63U << 16U)
 176:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1RFDPHI_FIELD(n)   (((uint32_t)(n)) << 16U)
 177:src-gen/sr5e1/clock.h **** /** @} */
 178:src-gen/sr5e1/clock.h **** 
 179:src-gen/sr5e1/clock.h **** /**
 180:src-gen/sr5e1/clock.h ****  * @name    NVMPC PFCR1 register
 181:src-gen/sr5e1/clock.h ****  * @{
 182:src-gen/sr5e1/clock.h ****  */
 183:src-gen/sr5e1/clock.h **** 
 184:src-gen/sr5e1/clock.h **** #define CLOCK_NVMCCBFEN_MASK        (1UL << 0U)
 185:src-gen/sr5e1/clock.h **** #define CLOCK_NVMCCBFEN_FIELD(n)    (((uint32_t)(n)) << 0U)
 186:src-gen/sr5e1/clock.h **** 
 187:src-gen/sr5e1/clock.h **** #define CLOCK_NVMDCBFEN_MASK        (1UL << 1U)
 188:src-gen/sr5e1/clock.h **** #define CLOCK_NVMDCBFEN_FIELD(n)    ((n) << 1U)
 189:src-gen/sr5e1/clock.h **** 
 190:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_MASK          (1FUL << 8U)
 191:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_FIELD(n)      (((uint32_t)(n)) << 8U)
 192:src-gen/sr5e1/clock.h **** 
 193:src-gen/sr5e1/clock.h **** #define CLOCK_NVMAPC_MASK           (7UL << 13U)
 194:src-gen/sr5e1/clock.h **** #define CLOCK_NVMAPC_FIELD(n)       (((uint32_t)(n)) << 13U)
 195:src-gen/sr5e1/clock.h **** /** @} */
 196:src-gen/sr5e1/clock.h **** 
 197:src-gen/sr5e1/clock.h **** /**
 198:src-gen/sr5e1/clock.h ****  * @name    Internal oscillators
 199:src-gen/sr5e1/clock.h ****  * @{
 200:src-gen/sr5e1/clock.h ****  */
 201:src-gen/sr5e1/clock.h **** #define CLOCK_IRCOSCCLK             16000000UL
 202:src-gen/sr5e1/clock.h **** #define CLOCK_LSICLK                1000000UL
 203:src-gen/sr5e1/clock.h **** /** @} */
 204:src-gen/sr5e1/clock.h **** 
 205:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 206:src-gen/sr5e1/clock.h **** /* Module pre-compile time settings.                                         */
 207:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 208:src-gen/sr5e1/clock.h **** 
 209:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 210:src-gen/sr5e1/clock.h **** /* Derived constants and error checks.                                       */
 211:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 212:src-gen/sr5e1/clock.h **** 
 213:src-gen/sr5e1/clock.h **** /* Configuration file checks.*/
 214:src-gen/sr5e1/clock.h **** #if !defined(SR5E1xxx_CLOCKCONF)
 215:src-gen/sr5e1/clock.h **** #error "SR5E1xxx_CLOCKCONF not defined in clock_cfg.h"
 216:src-gen/sr5e1/clock.h **** #endif
 217:src-gen/sr5e1/clock.h **** 
 218:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SMP_MODE) || defined(__DOXYGEN__)
 219:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SMP_MODE not defined in clock_cfg.h"
 220:src-gen/sr5e1/clock.h **** #endif
 221:src-gen/sr5e1/clock.h **** 
 222:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_XOSC_ENABLED) || defined(__DOXYGEN__)
 223:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSC_ENABLED not defined in clock_cfg.h"
 224:src-gen/sr5e1/clock.h **** #endif
 225:src-gen/sr5e1/clock.h **** 
 226:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_LSI_ENABLED) || defined(__DOXYGEN__)
 227:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_LSI_ENABLED not defined in clock_cfg.h"
 228:src-gen/sr5e1/clock.h **** #endif
 229:src-gen/sr5e1/clock.h **** 
 230:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_XOSCCLK)
 231:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSCCLK not defined in clock_cfg.h"
 232:src-gen/sr5e1/clock.h **** #endif
 233:src-gen/sr5e1/clock.h **** 
 234:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_XOSC_BYPASS)
 235:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSC_BYPASS not defined in clock_cfg.h"
 236:src-gen/sr5e1/clock.h **** #endif
 237:src-gen/sr5e1/clock.h **** 
 238:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0SRC) || defined(__DOXYGEN__)
 239:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0SRC not defined in clock_cfg.h"
 240:src-gen/sr5e1/clock.h **** #endif
 241:src-gen/sr5e1/clock.h **** 
 242:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0MFD_VALUE) || defined(__DOXYGEN__)
 243:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0MFD_VALUE not defined in clock_cfg.h"
 244:src-gen/sr5e1/clock.h **** #endif
 245:src-gen/sr5e1/clock.h **** 
 246:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0PREDIV_VALUE) || defined(__DOXYGEN__)
 247:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0PREDIV_VALUE not defined in clock_cfg.h"
 248:src-gen/sr5e1/clock.h **** #endif
 249:src-gen/sr5e1/clock.h **** 
 250:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0RFDPHI_VALUE) || defined(__DOXYGEN__)
 251:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0RFDPHI_VALUE not defined in clock_cfg.h"
 252:src-gen/sr5e1/clock.h **** #endif
 253:src-gen/sr5e1/clock.h **** 
 254:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0RFDPHI1_VALUE) || defined(__DOXYGEN__)
 255:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0RFDPHI1_VALUE not defined in clock_cfg.h"
 256:src-gen/sr5e1/clock.h **** #endif
 257:src-gen/sr5e1/clock.h **** 
 258:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL1SRC) || defined(__DOXYGEN__)
 259:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL1SRC not defined in clock_cfg.h"
 260:src-gen/sr5e1/clock.h **** #endif
 261:src-gen/sr5e1/clock.h **** 
 262:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL1MFD_VALUE) || defined(__DOXYGEN__)
 263:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL1MFD_VALUE not defined in clock_cfg.h"
 264:src-gen/sr5e1/clock.h **** #endif
 265:src-gen/sr5e1/clock.h **** 
 266:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL1RFDPHI_VALUE) || defined(__DOXYGEN__)
 267:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL1RFDPHI_VALUE not defined in clock_cfg.h"
 268:src-gen/sr5e1/clock.h **** #endif
 269:src-gen/sr5e1/clock.h **** 
 270:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SW) || defined(__DOXYGEN__)
 271:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW not defined in clock_cfg.h"
 272:src-gen/sr5e1/clock.h **** #endif
 273:src-gen/sr5e1/clock.h **** 
 274:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SYSPRE_VALUE) || defined(__DOXYGEN__)
 275:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SYSPRE_VALUE not defined in clock_cfg.h"
 276:src-gen/sr5e1/clock.h **** #endif
 277:src-gen/sr5e1/clock.h **** 
 278:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_UARTSEL) || defined(__DOXYGEN__)
 279:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTSEL not defined in clock_cfg.h"
 280:src-gen/sr5e1/clock.h **** #endif
 281:src-gen/sr5e1/clock.h **** 
 282:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_I2CSEL) || defined(__DOXYGEN__)
 283:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2CSEL not defined in clock_cfg.h"
 284:src-gen/sr5e1/clock.h **** #endif
 285:src-gen/sr5e1/clock.h **** 
 286:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SPISEL) || defined(__DOXYGEN__)
 287:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SPISEL not defined in clock_cfg.h"
 288:src-gen/sr5e1/clock.h **** #endif
 289:src-gen/sr5e1/clock.h **** 
 290:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_FDCANSEL) || defined(__DOXYGEN__)
 291:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_FDCANSEL not defined in clock_cfg.h"
 292:src-gen/sr5e1/clock.h **** #endif
 293:src-gen/sr5e1/clock.h **** 
 294:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_ADCSEL) || defined(__DOXYGEN__)
 295:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_ADCSEL not defined in clock_cfg.h"
 296:src-gen/sr5e1/clock.h **** #endif
 297:src-gen/sr5e1/clock.h **** 
 298:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SDADCSEL) || defined(__DOXYGEN__)
 299:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SDADCSEL not defined in clock_cfg.h"
 300:src-gen/sr5e1/clock.h **** #endif
 301:src-gen/sr5e1/clock.h **** 
 302:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_MCOSEL) || defined(__DOXYGEN__)
 303:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOSEL not defined in clock_cfg.h"
 304:src-gen/sr5e1/clock.h **** #endif
 305:src-gen/sr5e1/clock.h **** 
 306:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_RTCSEL) || defined(__DOXYGEN__)
 307:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_RTCSEL not defined in clock_cfg.h"
 308:src-gen/sr5e1/clock.h **** #endif
 309:src-gen/sr5e1/clock.h **** 
 310:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_UARTPRE_VALUE) || defined(__DOXYGEN__)
 311:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTPRE_VALUE not defined in clock_cfg.h"
 312:src-gen/sr5e1/clock.h **** #endif
 313:src-gen/sr5e1/clock.h **** 
 314:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_I2CPRE_VALUE) || defined(__DOXYGEN__)
 315:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2CPRE_VALUE not defined in clock_cfg.h"
 316:src-gen/sr5e1/clock.h **** #endif
 317:src-gen/sr5e1/clock.h **** 
 318:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SPIPRE_VALUE) || defined(__DOXYGEN__)
 319:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SPIPRE_VALUE not defined in clock_cfg.h"
 320:src-gen/sr5e1/clock.h **** #endif
 321:src-gen/sr5e1/clock.h **** 
 322:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_FDCANPRE_VALUE) || defined(__DOXYGEN__)
 323:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_FDCANPRE_VALUE not defined in clock_cfg.h"
 324:src-gen/sr5e1/clock.h **** #endif
 325:src-gen/sr5e1/clock.h **** 
 326:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_ADCPRE_VALUE) || defined(__DOXYGEN__)
 327:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_ADCPRE_VALUE not defined in clock_cfg.h"
 328:src-gen/sr5e1/clock.h **** #endif
 329:src-gen/sr5e1/clock.h **** 
 330:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SDADCPRE_VALUE) || defined(__DOXYGEN__)
 331:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SDADCPRE_VALUE not defined in clock_cfg.h"
 332:src-gen/sr5e1/clock.h **** #endif
 333:src-gen/sr5e1/clock.h **** 
 334:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_MCOPRE_VALUE) || defined(__DOXYGEN__)
 335:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOPRE_VALUE not defined in clock_cfg.h"
 336:src-gen/sr5e1/clock.h **** #endif
 337:src-gen/sr5e1/clock.h **** 
 338:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_LSIPRE_VALUE) || defined(__DOXYGEN__)
 339:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_LSIPRE_VALUE not defined in clock_cfg.h"
 340:src-gen/sr5e1/clock.h **** #endif
 341:src-gen/sr5e1/clock.h **** 
 342:src-gen/sr5e1/clock.h **** /* If SPISEL = I2S_CKIN, the value of I2S clock on the CKIN pin must be
 343:src-gen/sr5e1/clock.h ****    specified in the clock configuration file.*/
 344:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SPISEL == CLOCK_SPISEL_I2S_CKIN)
 345:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_I2S_CKIN) || defined(__DOXYGEN__)
 346:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2S_CKIN not defined in clock_cfg.h"
 347:src-gen/sr5e1/clock.h **** #endif
 348:src-gen/sr5e1/clock.h **** #endif
 349:src-gen/sr5e1/clock.h **** 
 350:src-gen/sr5e1/clock.h **** /* Clock Limits */
 351:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK_MAX            300000000UL
 352:src-gen/sr5e1/clock.h **** 
 353:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_MAX           40000000UL
 354:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_BYP_MAX       100000000UL
 355:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_MIN           4000000UL
 356:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_BYP_MIN       4000000UL
 357:src-gen/sr5e1/clock.h **** 
 358:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN_MAX            56000000UL
 359:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN_MIN            8000000UL
 360:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD_MAX           20000000UL
 361:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD_MIN           8000000UL
 362:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0VCO_MAX           1400000000UL
 363:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0VCO_MIN           600000000UL
 364:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI_MAX           700000000UL
 365:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI_MIN           4762000UL
 366:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI1_MAX          175000000UL
 367:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI1_MIN          20000000UL
 368:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN_MAX            87500000UL
 369:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN_MIN            37500000UL
 370:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1VCO_MAX           1400000000UL
 371:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1VCO_MIN           600000000UL
 372:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1PHI_MAX           700000000UL
 373:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1PHI_MIN           4762000UL
 374:src-gen/sr5e1/clock.h **** 
 375:src-gen/sr5e1/clock.h **** #define CLOCK_UARTCLK_MAX           100000000UL
 376:src-gen/sr5e1/clock.h **** #define CLOCK_I2CCLK_MAX            100000000UL
 377:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK_MS_SPI1_4_MAX  50000000UL
 378:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK_MS_SPI2_3_MAX  37500000UL
 379:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK_SL_MAX         50000000UL
 380:src-gen/sr5e1/clock.h **** #define CLOCK_I2SCLK_MAX            100000000UL
 381:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANCLK_MAX          80000000UL
 382:src-gen/sr5e1/clock.h **** #define CLOCK_ADCCLK_MAX            40000000UL
 383:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCCLK_MAX          16000000UL
 384:src-gen/sr5e1/clock.h **** 
 385:src-gen/sr5e1/clock.h **** /*Checks on XOSC.*/
 386:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_XOSC_ENABLED
 387:src-gen/sr5e1/clock.h **** 
 388:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_XOSCCLK == 0U
 389:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSCCLK is zero in clock_cfg.h"
 390:src-gen/sr5e1/clock.h **** #else /* CLOCK_CFG_XOSCCLK != 0 */
 391:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_XOSC_BYPASS
 392:src-gen/sr5e1/clock.h **** 
 393:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_XOSCCLK < CLOCK_XOSCCLK_BYP_MIN) ||                          \
 394:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_XOSCCLK > CLOCK_XOSCCLK_BYP_MAX)
 395:src-gen/sr5e1/clock.h **** #error "out of limits  CLOCK_XOSCCLK value"
 396:src-gen/sr5e1/clock.h **** #endif
 397:src-gen/sr5e1/clock.h **** 
 398:src-gen/sr5e1/clock.h **** #else /* !CLOCK_CFG_XOSC_BYPASS */
 399:src-gen/sr5e1/clock.h **** 
 400:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_XOSCCLK < CLOCK_XOSCCLK_MIN) ||                              \
 401:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_XOSCCLK > CLOCK_XOSCCLK_MAX)
 402:src-gen/sr5e1/clock.h **** #error "out of limits  CLOCK_XOSCCLK value"
 403:src-gen/sr5e1/clock.h **** #endif
 404:src-gen/sr5e1/clock.h **** 
 405:src-gen/sr5e1/clock.h **** #endif /* !CLOCK_CFG_XOSC_BYPASS */
 406:src-gen/sr5e1/clock.h **** #endif /* CLOCK_CFG_XOSCCLK != 0 */
 407:src-gen/sr5e1/clock.h **** 
 408:src-gen/sr5e1/clock.h **** #else /* !CLOCK_CFG_XOSC_ENABLED */
 409:src-gen/sr5e1/clock.h **** 
 410:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SW == CLOCK_SW_XOSC
 411:src-gen/sr5e1/clock.h **** #error "CLOCK_SW requires XOSC"
 412:src-gen/sr5e1/clock.h **** #endif
 413:src-gen/sr5e1/clock.h **** 
 414:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL0PHI) &&                                   \
 415:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)
 416:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW or CLOCK_CFG_PLL0SRC require XOSC"
 417:src-gen/sr5e1/clock.h **** #endif
 418:src-gen/sr5e1/clock.h **** 
 419:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI) &&                                   \
 420:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)
 421:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW or CLOCK_CFG_PLL1SRC require XOSC"
 422:src-gen/sr5e1/clock.h **** #endif
 423:src-gen/sr5e1/clock.h **** 
 424:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI) &&                                   \
 425:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_PLL0PHI1) &&                        \
 426:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)
 427:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW or CLOCK_CFG_PLL1SRC require XOSC"
 428:src-gen/sr5e1/clock.h **** #endif
 429:src-gen/sr5e1/clock.h **** 
 430:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_XOSC) ||                              \
 431:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL0PHI) &&                          \
 432:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)) ||                          \
 433:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL1PHI) &&                          \
 434:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)) 
 435:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOSEL requires XOSC"
 436:src-gen/sr5e1/clock.h **** #endif
 437:src-gen/sr5e1/clock.h **** 
 438:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_XOSC) ||                            \
 439:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_PLL0PHI) &&                        \
 440:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 441:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTSEL requires XOSC"
 442:src-gen/sr5e1/clock.h **** #endif
 443:src-gen/sr5e1/clock.h **** 
 444:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_XOSC) ||                              \
 445:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_PLL0PHI) &&                          \
 446:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 447:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2CSEL requires XOSC"
 448:src-gen/sr5e1/clock.h **** #endif
 449:src-gen/sr5e1/clock.h **** 
 450:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SPISEL == CLOCK_SPISEL_XOSC) ||                              \
 451:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_SPISEL == CLOCK_SPISEL_PLL0PHI) &&                          \
 452:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 453:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SPISEL requires XOSC"
 454:src-gen/sr5e1/clock.h **** #endif
 455:src-gen/sr5e1/clock.h **** 
 456:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_XOSC) ||                          \
 457:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_PLL0PHI) &&                      \
 458:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 459:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_FDCANSEL requires XOSC"
 460:src-gen/sr5e1/clock.h **** #endif
 461:src-gen/sr5e1/clock.h **** 
 462:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_XOSC) ||                              \
 463:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL0PHI) &&                          \
 464:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)) ||                          \
 465:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL1PHI) &&                          \
 466:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)) 
 467:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_ADCSEL requires XOSC"
 468:src-gen/sr5e1/clock.h **** #endif
 469:src-gen/sr5e1/clock.h **** 
 470:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_XOSC) ||                          \
 471:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL0PHI) &&                      \
 472:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)) ||                          \
 473:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL1PHI) &&                      \
 474:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)) 
 475:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SDADCSEL requires XOSC"
 476:src-gen/sr5e1/clock.h **** #endif
 477:src-gen/sr5e1/clock.h **** 
 478:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_XOSC
 479:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_RTCSEL requires XOSC"
 480:src-gen/sr5e1/clock.h **** #endif
 481:src-gen/sr5e1/clock.h **** 
 482:src-gen/sr5e1/clock.h **** #endif /* CLOCK_CFG_XOSC_ENABLED */
 483:src-gen/sr5e1/clock.h **** 
 484:src-gen/sr5e1/clock.h **** /*
 485:src-gen/sr5e1/clock.h ****  * LSI related checks.
 486:src-gen/sr5e1/clock.h ****  */
 487:src-gen/sr5e1/clock.h **** #if !CLOCK_CFG_LSI_ENABLED
 488:src-gen/sr5e1/clock.h **** 
 489:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_LSI
 490:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTSEL requires LSI"
 491:src-gen/sr5e1/clock.h **** #endif
 492:src-gen/sr5e1/clock.h **** 
 493:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_LSI
 494:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOSEL requires LSI"
 495:src-gen/sr5e1/clock.h **** #endif
 496:src-gen/sr5e1/clock.h **** 
 497:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_LSI
 498:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_RTCSEL requires LSI"
 499:src-gen/sr5e1/clock.h **** #endif
 500:src-gen/sr5e1/clock.h **** 
 501:src-gen/sr5e1/clock.h **** #endif /* !CLOCK_CFG_LSI_ENABLED */
 502:src-gen/sr5e1/clock.h **** 
 503:src-gen/sr5e1/clock.h **** /* PLL0 enable check.*/
 504:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL0PHI) ||                                   \
 505:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_PLL0PHI1) ||                        \
 506:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL0PHI) ||                           \
 507:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_PLL0PHI) ||                         \
 508:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_PLL0PHI) ||                           \
 509:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_SPISEL == CLOCK_SPISEL_PLL0PHI) ||                           \
 510:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_PLL0PHI) ||                       \
 511:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL0PHI) ||                           \
 512:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL0PHI)
 513:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL0         TRUE
 514:src-gen/sr5e1/clock.h **** #else
 515:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL0         FALSE
 516:src-gen/sr5e1/clock.h **** #endif
 517:src-gen/sr5e1/clock.h **** 
 518:src-gen/sr5e1/clock.h **** /* PLL0 fields.*/
 519:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0MFD_VALUE >= 8U) && (CLOCK_CFG_PLL0MFD_VALUE <= 127U))
 520:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0MFD_VALUE value in clock_cfg.h"
 521:src-gen/sr5e1/clock.h **** #endif
 522:src-gen/sr5e1/clock.h **** 
 523:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0PREDIV_VALUE >= 0U) && (CLOCK_CFG_PLL0PREDIV_VALUE <= 7U))
 524:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0PREDIV_VALUE value in clock_cfg.h"
 525:src-gen/sr5e1/clock.h **** #endif
 526:src-gen/sr5e1/clock.h **** 
 527:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0RFDPHI_VALUE >= 1U) && (CLOCK_CFG_PLL0RFDPHI_VALUE <= 63U))
 528:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0RFDPHI_VALUE value in clock_cfg.h"
 529:src-gen/sr5e1/clock.h **** #endif
 530:src-gen/sr5e1/clock.h **** 
 531:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0RFDPHI1_VALUE >= 4U) && (CLOCK_CFG_PLL0RFDPHI1_VALUE <= 15U))
 532:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0RFDPHI1_VALUE value in clock_cfg.h"
 533:src-gen/sr5e1/clock.h **** #endif
 534:src-gen/sr5e1/clock.h **** 
 535:src-gen/sr5e1/clock.h **** /* PLL0 input clock.*/
 536:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC) || defined(__DOXYGEN__)
 537:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN                CLOCK_CFG_XOSCCLK
 538:src-gen/sr5e1/clock.h **** 
 539:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_IRCOSC
 540:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN                CLOCK_IRCOSCCLK
 541:src-gen/sr5e1/clock.h **** 
 542:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_NOCLOCK
 543:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN                0U
 544:src-gen/sr5e1/clock.h **** 
 545:src-gen/sr5e1/clock.h **** #else
 546:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0SRC value in clock_cfg.h"
 547:src-gen/sr5e1/clock.h **** #endif
 548:src-gen/sr5e1/clock.h **** 
 549:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL0IN == 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE)
 550:src-gen/sr5e1/clock.h **** #error "no PLL input clock"
 551:src-gen/sr5e1/clock.h **** #endif
 552:src-gen/sr5e1/clock.h **** 
 553:src-gen/sr5e1/clock.h **** #if ((CLOCK_PLL0IN != 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE)) &&              \
 554:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0IN < CLOCK_PLL0IN_MIN) || (CLOCK_PLL0IN > CLOCK_PLL0IN_MAX))
 555:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0IN value"
 556:src-gen/sr5e1/clock.h **** #endif
 557:src-gen/sr5e1/clock.h **** 
 558:src-gen/sr5e1/clock.h **** /* PLL0 PFD clock.*/
 559:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_PLL0PREDIV_VALUE == 0U)
 560:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD               0U
 561:src-gen/sr5e1/clock.h **** #else
 562:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD                                                       \
 563:src-gen/sr5e1/clock.h ****   (CLOCK_PLL0IN / CLOCK_CFG_PLL0PREDIV_VALUE)
 564:src-gen/sr5e1/clock.h **** #endif
 565:src-gen/sr5e1/clock.h **** 
 566:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL0PFD != 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE) &&               \
 567:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0PFD < CLOCK_PLL0PFD_MIN) || (CLOCK_PLL0PFD > CLOCK_PLL0PFD_MAX))
 568:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0PFD value"
 569:src-gen/sr5e1/clock.h **** #endif
 570:src-gen/sr5e1/clock.h **** 
 571:src-gen/sr5e1/clock.h **** /* PLL0 VCO clock.*/
 572:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0VCO                                                       \
 573:src-gen/sr5e1/clock.h ****   (2U * CLOCK_CFG_PLL0MFD_VALUE * CLOCK_PLL0PFD)
 574:src-gen/sr5e1/clock.h **** 
 575:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL0VCO != 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE) &&               \
 576:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0VCO < CLOCK_PLL0VCO_MIN) || (CLOCK_PLL0VCO > CLOCK_PLL0VCO_MAX))
 577:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0VCO value"
 578:src-gen/sr5e1/clock.h **** #endif
 579:src-gen/sr5e1/clock.h **** 
 580:src-gen/sr5e1/clock.h **** /* PLL0 output clocks.*/
 581:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI                                                       \
 582:src-gen/sr5e1/clock.h ****   ((CLOCK_PLL0VCO / CLOCK_CFG_PLL0RFDPHI_VALUE) / 2U)
 583:src-gen/sr5e1/clock.h **** 
 584:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL0 == TRUE) &&                                        \
 585:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0PHI < CLOCK_PLL0PHI_MIN) || (CLOCK_PLL0PHI > CLOCK_PLL0PHI_MAX))
 586:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0PHI value"
 587:src-gen/sr5e1/clock.h **** #endif
 588:src-gen/sr5e1/clock.h **** 
 589:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI1                                                      \
 590:src-gen/sr5e1/clock.h ****   ((CLOCK_PLL0VCO / CLOCK_CFG_PLL0RFDPHI1_VALUE) / 2U)
 591:src-gen/sr5e1/clock.h **** 
 592:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL0 == TRUE) &&                                        \
 593:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0PHI1 < CLOCK_PLL0PHI1_MIN) || (CLOCK_PLL0PHI1 > CLOCK_PLL0PHI1_MAX))
 594:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0PHI1 value"
 595:src-gen/sr5e1/clock.h **** #endif
 596:src-gen/sr5e1/clock.h **** 
 597:src-gen/sr5e1/clock.h **** /* PLL1 enable check.*/
 598:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI) ||                                   \
 599:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL1PHI) ||                           \
 600:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL1PHI) ||                           \
 601:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL1PHI)
 602:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL1         TRUE
 603:src-gen/sr5e1/clock.h **** #else
 604:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL1         FALSE
 605:src-gen/sr5e1/clock.h **** #endif
 606:src-gen/sr5e1/clock.h **** 
 607:src-gen/sr5e1/clock.h **** /* PLL1 fields.*/
 608:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL1MFD_VALUE >= 16U) && (CLOCK_CFG_PLL1MFD_VALUE <= 34U))
 609:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL1MFD_VALUE value in clock_cfg.h"
 610:src-gen/sr5e1/clock.h **** #endif
 611:src-gen/sr5e1/clock.h **** 
 612:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL1RFDPHI_VALUE >= 1U) && (CLOCK_CFG_PLL1RFDPHI_VALUE <= 63U))
 613:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL1RFDPHI_VALUE value in clock_cfg.h"
 614:src-gen/sr5e1/clock.h **** #endif
 615:src-gen/sr5e1/clock.h **** 
 616:src-gen/sr5e1/clock.h **** /* PLL1 input clock.*/
 617:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_PLL0PHI1) || defined(__DOXYGEN__)
 618:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN                CLOCK_PLL0PHI1
 619:src-gen/sr5e1/clock.h **** 
 620:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC
 621:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN                CLOCK_CFG_XOSCCLK
 622:src-gen/sr5e1/clock.h **** 
 623:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_NOCLOCK
 624:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN                0U
 625:src-gen/sr5e1/clock.h **** 
 626:src-gen/sr5e1/clock.h **** #else
 627:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL1SRC value in clock_cfg.h"
 628:src-gen/sr5e1/clock.h **** #endif
 629:src-gen/sr5e1/clock.h **** 
 630:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL1IN == 0U && CLOCK_ACTIVATE_PLL1 == TRUE)
 631:src-gen/sr5e1/clock.h **** #error "no PLL input clock"
 632:src-gen/sr5e1/clock.h **** #endif
 633:src-gen/sr5e1/clock.h **** 
 634:src-gen/sr5e1/clock.h **** #if ((CLOCK_PLL1IN != 0U) && (CLOCK_ACTIVATE_PLL1 == TRUE)) &&              \
 635:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL1IN < CLOCK_PLL1IN_MIN) || (CLOCK_PLL1IN > CLOCK_PLL1IN_MAX))
 636:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL1IN value"
 637:src-gen/sr5e1/clock.h **** #endif
 638:src-gen/sr5e1/clock.h **** 
 639:src-gen/sr5e1/clock.h **** /* PLL1 VCO clock.*/
 640:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1VCO                                                       \
 641:src-gen/sr5e1/clock.h ****   (CLOCK_PLL1IN * CLOCK_CFG_PLL1MFD_VALUE)
 642:src-gen/sr5e1/clock.h **** 
 643:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL1 == TRUE) &&                                        \
 644:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL1VCO < CLOCK_PLL1VCO_MIN) || (CLOCK_PLL1VCO > CLOCK_PLL1VCO_MAX))
 645:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL1VCO value"
 646:src-gen/sr5e1/clock.h **** #endif
 647:src-gen/sr5e1/clock.h **** 
 648:src-gen/sr5e1/clock.h **** /* PLL1 output clock.*/
 649:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1PHI                                                       \
 650:src-gen/sr5e1/clock.h ****   ((CLOCK_PLL1VCO / CLOCK_CFG_PLL1RFDPHI_VALUE) / 2U)
 651:src-gen/sr5e1/clock.h **** 
 652:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL1 == TRUE) &&                                        \
 653:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL1PHI < CLOCK_PLL1PHI_MIN) || (CLOCK_PLL1PHI > CLOCK_PLL1PHI_MAX))
 654:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL1PHI value"
 655:src-gen/sr5e1/clock.h **** #endif
 656:src-gen/sr5e1/clock.h **** 
 657:src-gen/sr5e1/clock.h **** /* SYSCLK source.*/
 658:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_IRCOSC) || defined(__DOXYGEN__)
 659:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_IRCOSCCLK
 660:src-gen/sr5e1/clock.h **** 
 661:src-gen/sr5e1/clock.h **** #elif (CLOCK_CFG_SW == CLOCK_SW_XOSC)
 662:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_CFG_XOSCCLK
 663:src-gen/sr5e1/clock.h **** 
 664:src-gen/sr5e1/clock.h **** #elif (CLOCK_CFG_SW == CLOCK_SW_PLL0PHI)
 665:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_PLL0PHI
 666:src-gen/sr5e1/clock.h **** 
 667:src-gen/sr5e1/clock.h **** #elif (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI)
 668:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_PLL1PHI
 669:src-gen/sr5e1/clock.h **** 
 670:src-gen/sr5e1/clock.h **** #else
 671:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SW value in clock_cfg.h"
 672:src-gen/sr5e1/clock.h **** #endif
 673:src-gen/sr5e1/clock.h **** 
 674:src-gen/sr5e1/clock.h **** /* SYSCLK check.*/
 675:src-gen/sr5e1/clock.h **** #if CLOCK_SYSCLK > CLOCK_SYSCLK_MAX
 676:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_SYSCLK value"
 677:src-gen/sr5e1/clock.h **** #endif
 678:src-gen/sr5e1/clock.h **** 
 679:src-gen/sr5e1/clock.h **** /* SYSCLKDIV source.*/
 680:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_SYSPRE_VALUE >= 0U) && (CLOCK_CFG_SYSPRE_VALUE <= 511U))
 681:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLKDIV             (CLOCK_SYSCLK / (CLOCK_CFG_SYSPRE_VALUE + 1U))
 682:src-gen/sr5e1/clock.h **** #else
 683:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SYSPRE_VALUE value in clock_cfg.h"
 684:src-gen/sr5e1/clock.h **** #endif
 685:src-gen/sr5e1/clock.h **** 
 686:src-gen/sr5e1/clock.h **** /* APB1 frequency.*/
 687:src-gen/sr5e1/clock.h **** #define CLOCK_PCLK1                 (CLOCK_SYSCLKDIV / 4U)
 688:src-gen/sr5e1/clock.h **** 
 689:src-gen/sr5e1/clock.h **** /* APB2 frequency.*/
 690:src-gen/sr5e1/clock.h **** #define CLOCK_PCLK2                 (CLOCK_SYSCLKDIV / 2U)
 691:src-gen/sr5e1/clock.h **** 
 692:src-gen/sr5e1/clock.h **** /**
 693:src-gen/sr5e1/clock.h ****  * @brief   TIM clock.
 694:src-gen/sr5e1/clock.h ****  */
 695:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK1               (CLOCK_PCLK2 * 2U)
 696:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK2               (CLOCK_PCLK1 * 2U)
 697:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK3               (CLOCK_PCLK1 * 2U)
 698:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK4               (CLOCK_PCLK2 * 2U)
 699:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK5               (CLOCK_PCLK2 * 2U)
 700:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK6               (CLOCK_PCLK1 * 2U)
 701:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK7               (CLOCK_PCLK1 * 2U)
 702:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK8               (CLOCK_PCLK2 * 2U)
 703:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK15              (CLOCK_PCLK2 * 2U)
 704:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK16              (CLOCK_PCLK2 * 2U)
 705:src-gen/sr5e1/clock.h **** #define CLOCK_TIMTSCLK              (CLOCK_PCLK1 * 2U)
 706:src-gen/sr5e1/clock.h **** 
 707:src-gen/sr5e1/clock.h **** /**
 708:src-gen/sr5e1/clock.h ****  * @brief   MCO divider clock frequency.
 709:src-gen/sr5e1/clock.h ****  */
 710:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_NOCLOCK) || defined(__DOXYGEN__)
 711:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             0U
 712:src-gen/sr5e1/clock.h **** 
 713:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_LSI
 714:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_LSICLK
 715:src-gen/sr5e1/clock.h **** 
 716:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_IRCOSC
 717:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_IRCOSCCLK
 718:src-gen/sr5e1/clock.h **** 
 719:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_XOSC
 720:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_CFG_XOSCCLK
 721:src-gen/sr5e1/clock.h **** 
 722:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL0PHI
 723:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_PLL0PHI
 724:src-gen/sr5e1/clock.h **** 
 725:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL1PHI
 726:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_PLL1PHI
 727:src-gen/sr5e1/clock.h **** 
 728:src-gen/sr5e1/clock.h **** #else
 729:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_MCOSEL value in clock_cfg.h"
 730:src-gen/sr5e1/clock.h **** #endif
 731:src-gen/sr5e1/clock.h **** 
 732:src-gen/sr5e1/clock.h **** /**
 733:src-gen/sr5e1/clock.h ****  * @brief   MCO output pin clock frequency.
 734:src-gen/sr5e1/clock.h ****  */
 735:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_MCOPRE_VALUE == 0U)
 736:src-gen/sr5e1/clock.h **** #define CLOCK_MCOCLK                CLOCK_MCODIVCLK
 737:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_MCOPRE_VALUE > 0U) && (CLOCK_CFG_MCOPRE_VALUE <= 63U))
 738:src-gen/sr5e1/clock.h **** #define CLOCK_MCOCLK                (CLOCK_MCODIVCLK / (2U * CLOCK_CFG_MCOPRE_VALUE))
 739:src-gen/sr5e1/clock.h **** #else
 740:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_MCOPRE_VALUE value in clock_cfg.h"
 741:src-gen/sr5e1/clock.h **** #endif
 742:src-gen/sr5e1/clock.h **** 
 743:src-gen/sr5e1/clock.h **** /**
 744:src-gen/sr5e1/clock.h ****  * @brief   RTC clock.
 745:src-gen/sr5e1/clock.h ****  */
 746:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_LSIPRE_VALUE == 0U)
 747:src-gen/sr5e1/clock.h **** #define CLOCK_LSIDIVCLK             CLOCK_LSICLK
 748:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_LSIPRE_VALUE > 0U) && (CLOCK_CFG_LSIPRE_VALUE <= 31U))
 749:src-gen/sr5e1/clock.h **** #define CLOCK_LSIDIVCLK             (CLOCK_LSICLK / (2U * CLOCK_CFG_LSIPRE_VALUE))
 750:src-gen/sr5e1/clock.h **** #else
 751:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_LSIPRE_VALUE value in clock_cfg.h"
 752:src-gen/sr5e1/clock.h **** #endif
 753:src-gen/sr5e1/clock.h **** 
 754:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_NOCLOCK) || defined(__DOXYGEN__)
 755:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSELCLK             0U
 756:src-gen/sr5e1/clock.h **** 
 757:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_LSI
 758:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSELCLK             CLOCK_LSIDIVCLK
 759:src-gen/sr5e1/clock.h **** 
 760:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_XOSC
 761:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSELCLK             CLOCK_CFG_XOSCCLK
 762:src-gen/sr5e1/clock.h **** 
 763:src-gen/sr5e1/clock.h **** #else
 764:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_RTCSEL value in clock_cfg.h"
 765:src-gen/sr5e1/clock.h **** #endif
 766:src-gen/sr5e1/clock.h **** 
 767:src-gen/sr5e1/clock.h **** /**
 768:src-gen/sr5e1/clock.h ****  * @brief   UART clock.
 769:src-gen/sr5e1/clock.h ****  */
 770:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_NOCLOCK) || defined(__DOXYGEN__)
 771:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            0U
 772:src-gen/sr5e1/clock.h **** 
 773:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_IRCOSC
 774:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_IRCOSCCLK
 775:src-gen/sr5e1/clock.h **** 
 776:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_XOSC
 777:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_CFG_XOSCCLK
 778:src-gen/sr5e1/clock.h **** 
 779:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_PLL0PHI
 780:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_PLL0PHI
 781:src-gen/sr5e1/clock.h **** 
 782:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_LSI
 783:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_LSICLK
 784:src-gen/sr5e1/clock.h **** 
 785:src-gen/sr5e1/clock.h **** #else
 786:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_UARTSEL value in clock_cfg.h"
 787:src-gen/sr5e1/clock.h **** #endif
 788:src-gen/sr5e1/clock.h **** 
 789:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_UARTPRE_VALUE >= 0U) && (CLOCK_CFG_UARTPRE_VALUE <= 31U))
 790:src-gen/sr5e1/clock.h **** #define CLOCK_UARTCLK               (CLOCK_UARTSELCLK / (CLOCK_CFG_UARTPRE_VALUE + 1U))
 791:src-gen/sr5e1/clock.h **** #else
 792:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_UARTPRE_VALUE value in clock_cfg.h"
 793:src-gen/sr5e1/clock.h **** #endif
 794:src-gen/sr5e1/clock.h **** 
 795:src-gen/sr5e1/clock.h **** #if CLOCK_UARTCLK > CLOCK_UARTCLK_MAX
 796:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_UARTCLK value"
 797:src-gen/sr5e1/clock.h **** #endif
 798:src-gen/sr5e1/clock.h **** 
 799:src-gen/sr5e1/clock.h **** #define CLOCK_UART1CLK              CLOCK_UARTCLK
 800:src-gen/sr5e1/clock.h **** #define CLOCK_UART2CLK              CLOCK_UARTCLK
 801:src-gen/sr5e1/clock.h **** #define CLOCK_UART3CLK              CLOCK_UARTCLK
 802:src-gen/sr5e1/clock.h **** 
 803:src-gen/sr5e1/clock.h **** /**
 804:src-gen/sr5e1/clock.h ****  * @brief   I2C clock.
 805:src-gen/sr5e1/clock.h ****  */
 806:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_NOCLOCK) || defined(__DOXYGEN__)
 807:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             0U
 808:src-gen/sr5e1/clock.h **** 
 809:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_IRCOSC
 810:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             CLOCK_IRCOSCCLK
 811:src-gen/sr5e1/clock.h **** 
 812:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_XOSC
 813:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             CLOCK_CFG_XOSCCLK
 814:src-gen/sr5e1/clock.h **** 
 815:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_PLL0PHI
 816:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             CLOCK_PLL0PHI
 817:src-gen/sr5e1/clock.h **** 
 818:src-gen/sr5e1/clock.h **** #else
 819:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_I2CSEL value in clock_cfg.h"
 820:src-gen/sr5e1/clock.h **** #endif
 821:src-gen/sr5e1/clock.h **** 
 822:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_I2CPRE_VALUE >= 0U) && (CLOCK_CFG_I2CPRE_VALUE <= 31U))
 823:src-gen/sr5e1/clock.h **** #define CLOCK_I2CCLK                (CLOCK_I2CSELCLK / (CLOCK_CFG_I2CPRE_VALUE + 1U))
 824:src-gen/sr5e1/clock.h **** #else
 825:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_I2CPRE_VALUE value in clock_cfg.h"
 826:src-gen/sr5e1/clock.h **** #endif
 827:src-gen/sr5e1/clock.h **** 
 828:src-gen/sr5e1/clock.h **** #if CLOCK_I2CCLK > CLOCK_I2CCLK_MAX
 829:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_I2CCLK value"
 830:src-gen/sr5e1/clock.h **** #endif
 831:src-gen/sr5e1/clock.h **** 
 832:src-gen/sr5e1/clock.h **** /**
 833:src-gen/sr5e1/clock.h ****  * @brief   SPI/I2S clock.
 834:src-gen/sr5e1/clock.h ****  */
 835:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SPISEL == CLOCK_SPISEL_NOCLOCK) || defined(__DOXYGEN__)
 836:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             0U
 837:src-gen/sr5e1/clock.h **** 
 838:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_IRCOSC
 839:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_IRCOSCCLK
 840:src-gen/sr5e1/clock.h **** 
 841:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_XOSC
 842:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_CFG_XOSCCLK
 843:src-gen/sr5e1/clock.h **** 
 844:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_PLL0PHI
 845:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_PLL0PHI
 846:src-gen/sr5e1/clock.h **** 
 847:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_I2S_CKIN
 848:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_CFG_I2S_CKIN
 849:src-gen/sr5e1/clock.h **** 
 850:src-gen/sr5e1/clock.h **** #else
 851:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SPISEL value in clock_cfg.h"
 852:src-gen/sr5e1/clock.h **** #endif
 853:src-gen/sr5e1/clock.h **** 
 854:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_SPIPRE_VALUE >= 0U) && (CLOCK_CFG_SPIPRE_VALUE <= 31U))
 855:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK                (CLOCK_SPISELCLK / (CLOCK_CFG_SPIPRE_VALUE + 1U))
 856:src-gen/sr5e1/clock.h **** #else
 857:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SPIPRE_VALUE value in clock_cfg.h"
 858:src-gen/sr5e1/clock.h **** #endif
 859:src-gen/sr5e1/clock.h **** 
 860:src-gen/sr5e1/clock.h **** #define CLOCK_SPI1CLK               CLOCK_PCLK2
 861:src-gen/sr5e1/clock.h **** #define CLOCK_SPI2CLK               CLOCK_PCLK1
 862:src-gen/sr5e1/clock.h **** #define CLOCK_SPI3CLK               CLOCK_PCLK1
 863:src-gen/sr5e1/clock.h **** #define CLOCK_SPI4CLK               CLOCK_PCLK2
 864:src-gen/sr5e1/clock.h **** #define CLOCK_I2S2CLK               CLOCK_SPICLK
 865:src-gen/sr5e1/clock.h **** #define CLOCK_I2S3CLK               CLOCK_SPICLK
 866:src-gen/sr5e1/clock.h **** 
 867:src-gen/sr5e1/clock.h **** /**
 868:src-gen/sr5e1/clock.h ****  * @brief   FDCAN clock.
 869:src-gen/sr5e1/clock.h ****  */
 870:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_NOCLOCK) || defined(__DOXYGEN__)
 871:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSELCLK           0U
 872:src-gen/sr5e1/clock.h **** 
 873:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_XOSC
 874:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSELCLK           CLOCK_CFG_XOSCCLK
 875:src-gen/sr5e1/clock.h **** 
 876:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_PLL0PHI
 877:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSELCLK           CLOCK_PLL0PHI
 878:src-gen/sr5e1/clock.h **** 
 879:src-gen/sr5e1/clock.h **** #else
 880:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_FDCANSEL value in clock_cfg.h"
 881:src-gen/sr5e1/clock.h **** #endif
 882:src-gen/sr5e1/clock.h **** 
 883:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_FDCANPRE_VALUE >= 0U) && (CLOCK_CFG_FDCANPRE_VALUE <= 31U))
 884:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANCLK              (CLOCK_FDCANSELCLK / (CLOCK_CFG_FDCANPRE_VALUE + 1U))
 885:src-gen/sr5e1/clock.h **** #else
 886:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_FDCANPRE_VALUE value in clock_cfg.h"
 887:src-gen/sr5e1/clock.h **** #endif
 888:src-gen/sr5e1/clock.h **** 
 889:src-gen/sr5e1/clock.h **** #if CLOCK_FDCANCLK > CLOCK_FDCANCLK_MAX
 890:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_FDCANCLK value"
 891:src-gen/sr5e1/clock.h **** #endif
 892:src-gen/sr5e1/clock.h **** 
 893:src-gen/sr5e1/clock.h **** /**
 894:src-gen/sr5e1/clock.h ****  * @brief   ADC clock.
 895:src-gen/sr5e1/clock.h ****  */
 896:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_NOCLOCK) || defined(__DOXYGEN__)
 897:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             0U
 898:src-gen/sr5e1/clock.h **** 
 899:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_XOSC
 900:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             CLOCK_CFG_XOSCCLK
 901:src-gen/sr5e1/clock.h **** 
 902:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL0PHI
 903:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             CLOCK_PLL0PHI
 904:src-gen/sr5e1/clock.h **** 
 905:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL1PHI
 906:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             CLOCK_PLL1PHI
 907:src-gen/sr5e1/clock.h **** 
 908:src-gen/sr5e1/clock.h **** #else
 909:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_ADCSEL value in clock_cfg.h"
 910:src-gen/sr5e1/clock.h **** #endif
 911:src-gen/sr5e1/clock.h **** /* The range of values of ADCPRE must be verified */
 912:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_ADCPRE_VALUE == 0U)
 913:src-gen/sr5e1/clock.h **** #define CLOCK_ADCCLK                CLOCK_ADCSELCLK
 914:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_ADCPRE_VALUE > 0U) && (CLOCK_CFG_ADCPRE_VALUE <= 63U))
 915:src-gen/sr5e1/clock.h **** #define CLOCK_ADCCLK                (CLOCK_ADCSELCLK / (2U * CLOCK_CFG_ADCPRE_VALUE))
 916:src-gen/sr5e1/clock.h **** #else
 917:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_ADCPRE_VALUE value in clock_cfg.h"
 918:src-gen/sr5e1/clock.h **** #endif
 919:src-gen/sr5e1/clock.h **** 
 920:src-gen/sr5e1/clock.h **** #if CLOCK_ADCCLK > CLOCK_ADCCLK_MAX
 921:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_ADCCLK value"
 922:src-gen/sr5e1/clock.h **** #endif
 923:src-gen/sr5e1/clock.h **** 
 924:src-gen/sr5e1/clock.h **** #define CLOCK_ADC12CLK              CLOCK_ADCCLK
 925:src-gen/sr5e1/clock.h **** #define CLOCK_ADC345CLK             CLOCK_ADCCLK
 926:src-gen/sr5e1/clock.h **** 
 927:src-gen/sr5e1/clock.h **** /**
 928:src-gen/sr5e1/clock.h ****  * @brief   SDADC clock.
 929:src-gen/sr5e1/clock.h ****  */
 930:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_NOCLOCK) || defined(__DOXYGEN__)
 931:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           0U
 932:src-gen/sr5e1/clock.h **** 
 933:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_XOSC
 934:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           CLOCK_CFG_XOSCCLK
 935:src-gen/sr5e1/clock.h **** 
 936:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL0PHI
 937:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           CLOCK_PLL0PHI
 938:src-gen/sr5e1/clock.h **** 
 939:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL1PHI
 940:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           CLOCK_PLL1PHI
 941:src-gen/sr5e1/clock.h **** 
 942:src-gen/sr5e1/clock.h **** #else
 943:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SDADCSEL value in clock_cfg.h"
 944:src-gen/sr5e1/clock.h **** #endif
 945:src-gen/sr5e1/clock.h **** /* The range of values of SDADCPRE must be verified */
 946:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SDADCPRE_VALUE == 0U)
 947:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCCLK              CLOCK_SDADCSELCLK
 948:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_SDADCPRE_VALUE > 0U) && (CLOCK_CFG_SDADCPRE_VALUE <= 63U))
 949:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCCLK              (CLOCK_SDADCSELCLK / (2U * CLOCK_CFG_SDADCPRE_VALUE))
 950:src-gen/sr5e1/clock.h **** #else
 951:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SDADCPRE_VALUE value in clock_cfg.h"
 952:src-gen/sr5e1/clock.h **** #endif
 953:src-gen/sr5e1/clock.h **** 
 954:src-gen/sr5e1/clock.h **** #if CLOCK_SDADCCLK > CLOCK_SDADCCLK_MAX
 955:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_SDADCCLK value"
 956:src-gen/sr5e1/clock.h **** #endif
 957:src-gen/sr5e1/clock.h **** 
 958:src-gen/sr5e1/clock.h **** /* Flash wait state (APC = 0) settings.*/
 959:src-gen/sr5e1/clock.h **** #if (CLOCK_SYSCLKDIV <= 136000000UL) || defined(__DOXYGEN__)
 960:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         3U /* 0 < core frequency < 136MHz  */
 961:src-gen/sr5e1/clock.h **** 
 962:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 170000000UL)
 963:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         4U /* 136MHz < core_freq <= 170MHz */
 964:src-gen/sr5e1/clock.h **** 
 965:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 204000000UL)
 966:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         5U /* 170MHz < core_freq <= 204MHz */
 967:src-gen/sr5e1/clock.h **** 
 968:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 238000000UL)
 969:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         6U /* 204MHz < core_freq <= 238MHz */
 970:src-gen/sr5e1/clock.h **** 
 971:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 273000000UL)
 972:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         7U /* 238MHz < core_freq <= 273MHz */
 973:src-gen/sr5e1/clock.h **** 
 974:src-gen/sr5e1/clock.h **** #else
 975:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         8U /* 273MHz < core_freq <= 307MHz */
 976:src-gen/sr5e1/clock.h **** 
 977:src-gen/sr5e1/clock.h **** #endif
 978:src-gen/sr5e1/clock.h **** 
 979:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 980:src-gen/sr5e1/clock.h **** /* Module data structures and types.                                         */
 981:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 982:src-gen/sr5e1/clock.h **** 
 983:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 984:src-gen/sr5e1/clock.h **** /* Module macros.                                                            */
 985:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 986:src-gen/sr5e1/clock.h **** 
 987:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 988:src-gen/sr5e1/clock.h **** /* External declarations.                                                    */
 989:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 990:src-gen/sr5e1/clock.h **** 
 991:src-gen/sr5e1/clock.h **** /**
 992:src-gen/sr5e1/clock.h ****  * @brief   CMSIS system core clock variable.
 993:src-gen/sr5e1/clock.h ****  */
 994:src-gen/sr5e1/clock.h **** extern uint32_t SystemCoreClock;
 995:src-gen/sr5e1/clock.h **** 
 996:src-gen/sr5e1/clock.h **** #ifdef __cplusplus
 997:src-gen/sr5e1/clock.h **** extern "C" {
 998:src-gen/sr5e1/clock.h **** #endif
 999:src-gen/sr5e1/clock.h **** 
1000:src-gen/sr5e1/clock.h **** /**
1001:src-gen/sr5e1/clock.h ****  * @brief   Initializes clock
1002:src-gen/sr5e1/clock.h ****  *
1003:src-gen/sr5e1/clock.h ****  * @api
1004:src-gen/sr5e1/clock.h ****  */
1005:src-gen/sr5e1/clock.h **** void clock_init(void);
1006:src-gen/sr5e1/clock.h **** 
1007:src-gen/sr5e1/clock.h **** #ifdef __cplusplus
1008:src-gen/sr5e1/clock.h **** }
1009:src-gen/sr5e1/clock.h **** #endif
1010:src-gen/sr5e1/clock.h **** 
1011:src-gen/sr5e1/clock.h **** /*===========================================================================*/
1012:src-gen/sr5e1/clock.h **** /* Module inline functions.                                                  */
1013:src-gen/sr5e1/clock.h **** /*===========================================================================*/
1014:src-gen/sr5e1/clock.h **** 
1015:src-gen/sr5e1/clock.h **** /**
1016:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB1 peripherals clock [Low Word]
1017:src-gen/sr5e1/clock.h ****  *
1018:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1019:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1020:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1021:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1LENR after the update
1022:src-gen/sr5e1/clock.h ****  *
1023:src-gen/sr5e1/clock.h ****  * @api
1024:src-gen/sr5e1/clock.h ****  */
1025:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB1L(bool smode, uint32_t m) {
1026:src-gen/sr5e1/clock.h **** 
1027:src-gen/sr5e1/clock.h ****     RCC->AHB1LENR |= m;
1028:src-gen/sr5e1/clock.h ****     if (smode) {
1029:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1LSMENR |= m;
1030:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1031:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1LSMENR |= m;
1032:src-gen/sr5e1/clock.h **** #endif
1033:src-gen/sr5e1/clock.h ****     }
1034:src-gen/sr5e1/clock.h ****     else {
1035:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1LSMENR &= ~m;
1036:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1037:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1LSMENR &= ~m;
1038:src-gen/sr5e1/clock.h **** #endif
1039:src-gen/sr5e1/clock.h ****     }
1040:src-gen/sr5e1/clock.h **** 
1041:src-gen/sr5e1/clock.h ****     return RCC->AHB1LENR;
1042:src-gen/sr5e1/clock.h **** }
1043:src-gen/sr5e1/clock.h **** 
1044:src-gen/sr5e1/clock.h **** /**
1045:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB1 peripherals clock [Low Word]
1046:src-gen/sr5e1/clock.h ****  *
1047:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1048:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1LENR after the update
1049:src-gen/sr5e1/clock.h ****  *
1050:src-gen/sr5e1/clock.h ****  * @api
1051:src-gen/sr5e1/clock.h ****  */
1052:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB1L(uint32_t m) {
1053:src-gen/sr5e1/clock.h **** 
1054:src-gen/sr5e1/clock.h ****     RCC->AHB1LENR &= ~m;
1055:src-gen/sr5e1/clock.h ****     RCC->C1_AHB1LSMENR &= ~m;
1056:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1057:src-gen/sr5e1/clock.h ****     RCC->C2_AHB1LSMENR &= ~m;
1058:src-gen/sr5e1/clock.h **** #endif
1059:src-gen/sr5e1/clock.h **** 
1060:src-gen/sr5e1/clock.h ****     return RCC->AHB1LENR;
1061:src-gen/sr5e1/clock.h **** }
1062:src-gen/sr5e1/clock.h **** 
1063:src-gen/sr5e1/clock.h **** /**
1064:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB1 peripheral clock [Low Word] is enabled
1065:src-gen/sr5e1/clock.h ****  *
1066:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1067:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1068:src-gen/sr5e1/clock.h ****  *
1069:src-gen/sr5e1/clock.h ****  * @api
1070:src-gen/sr5e1/clock.h ****  */
1071:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB1L(uint32_t m) {
1072:src-gen/sr5e1/clock.h **** 
1073:src-gen/sr5e1/clock.h ****     return (((RCC->AHB1LENR & m) == m) ? true : false);
1074:src-gen/sr5e1/clock.h **** }
1075:src-gen/sr5e1/clock.h **** 
1076:src-gen/sr5e1/clock.h **** /**
1077:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB1 peripherals [Low Word]
1078:src-gen/sr5e1/clock.h ****  *
1079:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1080:src-gen/sr5e1/clock.h ****  *
1081:src-gen/sr5e1/clock.h ****  * @api
1082:src-gen/sr5e1/clock.h ****  */
1083:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB1L(uint32_t m) {
1084:src-gen/sr5e1/clock.h **** 
1085:src-gen/sr5e1/clock.h ****     RCC->AHB1LRSTR |= m;
1086:src-gen/sr5e1/clock.h ****     RCC->AHB1LRSTR &= ~m;
1087:src-gen/sr5e1/clock.h ****     (void)RCC->AHB1LRSTR;
1088:src-gen/sr5e1/clock.h **** }
1089:src-gen/sr5e1/clock.h **** 
1090:src-gen/sr5e1/clock.h **** /**
1091:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB1 peripherals clock [High Word]
1092:src-gen/sr5e1/clock.h ****  *
1093:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1094:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1095:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1096:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1HENR after the update
1097:src-gen/sr5e1/clock.h ****  *
1098:src-gen/sr5e1/clock.h ****  * @api
1099:src-gen/sr5e1/clock.h ****  */
1100:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB1H(bool smode, uint32_t m) {
1101:src-gen/sr5e1/clock.h **** 
1102:src-gen/sr5e1/clock.h ****     RCC->AHB1HENR |= m;
1103:src-gen/sr5e1/clock.h ****     if (smode) {
1104:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1HSMENR |= m;
1105:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1106:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1HSMENR |= m;
1107:src-gen/sr5e1/clock.h **** #endif
1108:src-gen/sr5e1/clock.h ****     }
1109:src-gen/sr5e1/clock.h ****     else {
1110:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1HSMENR &= ~m;
1111:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1112:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1HSMENR &= ~m;
1113:src-gen/sr5e1/clock.h **** #endif
1114:src-gen/sr5e1/clock.h ****     }
1115:src-gen/sr5e1/clock.h **** 
1116:src-gen/sr5e1/clock.h ****     return RCC->AHB1HENR;
1117:src-gen/sr5e1/clock.h **** }
1118:src-gen/sr5e1/clock.h **** 
1119:src-gen/sr5e1/clock.h **** /**
1120:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB1 peripherals clock [High Word]
1121:src-gen/sr5e1/clock.h ****  *
1122:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1123:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1HENR after the update
1124:src-gen/sr5e1/clock.h ****  *
1125:src-gen/sr5e1/clock.h ****  * @api
1126:src-gen/sr5e1/clock.h ****  */
1127:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB1H(uint32_t m) {
1128:src-gen/sr5e1/clock.h **** 
1129:src-gen/sr5e1/clock.h ****     RCC->AHB1HENR &= ~m;
1130:src-gen/sr5e1/clock.h ****     RCC->C1_AHB1HSMENR &= ~m;
1131:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1132:src-gen/sr5e1/clock.h ****     RCC->C2_AHB1HSMENR &= ~m;
1133:src-gen/sr5e1/clock.h **** #endif
1134:src-gen/sr5e1/clock.h **** 
1135:src-gen/sr5e1/clock.h ****     return RCC->AHB1HENR;
1136:src-gen/sr5e1/clock.h **** }
1137:src-gen/sr5e1/clock.h **** 
1138:src-gen/sr5e1/clock.h **** /**
1139:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB1 peripheral clock [High Word] is enabled
1140:src-gen/sr5e1/clock.h ****  *
1141:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1142:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1143:src-gen/sr5e1/clock.h ****  *
1144:src-gen/sr5e1/clock.h ****  * @api
1145:src-gen/sr5e1/clock.h ****  */
1146:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB1H(uint32_t m) {
1147:src-gen/sr5e1/clock.h **** 
1148:src-gen/sr5e1/clock.h ****     return (((RCC->AHB1HENR & m) == m) ? true : false);
1149:src-gen/sr5e1/clock.h **** }
1150:src-gen/sr5e1/clock.h **** 
1151:src-gen/sr5e1/clock.h **** /**
1152:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB1 peripherals [High Word]
1153:src-gen/sr5e1/clock.h ****  *
1154:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1155:src-gen/sr5e1/clock.h ****  *
1156:src-gen/sr5e1/clock.h ****  * @api
1157:src-gen/sr5e1/clock.h ****  */
1158:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB1H(uint32_t m) {
1159:src-gen/sr5e1/clock.h **** 
1160:src-gen/sr5e1/clock.h ****     RCC->AHB1HRSTR |= m;
1161:src-gen/sr5e1/clock.h ****     RCC->AHB1HRSTR &= ~m;
1162:src-gen/sr5e1/clock.h ****     (void)RCC->AHB1HRSTR;
1163:src-gen/sr5e1/clock.h **** }
1164:src-gen/sr5e1/clock.h **** 
1165:src-gen/sr5e1/clock.h **** /**
1166:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB2 peripherals clock [Low Word]
1167:src-gen/sr5e1/clock.h ****  *
1168:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1169:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1170:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1171:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2LENR after the update
1172:src-gen/sr5e1/clock.h ****  *
1173:src-gen/sr5e1/clock.h ****  * @api
1174:src-gen/sr5e1/clock.h ****  */
1175:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB2L(bool smode, uint32_t m) {
1176:src-gen/sr5e1/clock.h **** 
1177:src-gen/sr5e1/clock.h ****     RCC->AHB2LENR |= m;
1178:src-gen/sr5e1/clock.h ****     if (smode) {
1179:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2LSMENR |= m;
1180:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1181:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2LSMENR |= m;
1182:src-gen/sr5e1/clock.h **** #endif
1183:src-gen/sr5e1/clock.h ****     }
1184:src-gen/sr5e1/clock.h ****     else {
1185:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2LSMENR &= ~m;
1186:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1187:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2LSMENR &= ~m;
1188:src-gen/sr5e1/clock.h **** #endif
1189:src-gen/sr5e1/clock.h ****     }
1190:src-gen/sr5e1/clock.h **** 
1191:src-gen/sr5e1/clock.h ****     return RCC->AHB2LENR;
1192:src-gen/sr5e1/clock.h **** }
1193:src-gen/sr5e1/clock.h **** 
1194:src-gen/sr5e1/clock.h **** /**
1195:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB2 peripherals clock [Low Word]
1196:src-gen/sr5e1/clock.h ****  *
1197:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1198:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2LENR after the update
1199:src-gen/sr5e1/clock.h ****  *
1200:src-gen/sr5e1/clock.h ****  * @api
1201:src-gen/sr5e1/clock.h ****  */
1202:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB2L(uint32_t m) {
1203:src-gen/sr5e1/clock.h **** 
1204:src-gen/sr5e1/clock.h ****     RCC->AHB2LENR &= ~m;
1205:src-gen/sr5e1/clock.h ****     RCC->C1_AHB2LSMENR &= ~m;
1206:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1207:src-gen/sr5e1/clock.h ****     RCC->C2_AHB2LSMENR &= ~m;
1208:src-gen/sr5e1/clock.h **** #endif
1209:src-gen/sr5e1/clock.h **** 
1210:src-gen/sr5e1/clock.h ****     return RCC->AHB2LENR;
1211:src-gen/sr5e1/clock.h **** }
1212:src-gen/sr5e1/clock.h **** 
1213:src-gen/sr5e1/clock.h **** /**
1214:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB2 peripheral clock [Low Word] is enabled
1215:src-gen/sr5e1/clock.h ****  *
1216:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1217:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1218:src-gen/sr5e1/clock.h ****  *
1219:src-gen/sr5e1/clock.h ****  * @api
1220:src-gen/sr5e1/clock.h ****  */
1221:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB2L(uint32_t m) {
1222:src-gen/sr5e1/clock.h **** 
1223:src-gen/sr5e1/clock.h ****     return (((RCC->AHB2LENR & m) == m) ? true : false);
1224:src-gen/sr5e1/clock.h **** }
1225:src-gen/sr5e1/clock.h **** 
1226:src-gen/sr5e1/clock.h **** /**
1227:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB2 peripherals [Low Word]
1228:src-gen/sr5e1/clock.h ****  *
1229:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1230:src-gen/sr5e1/clock.h ****  *
1231:src-gen/sr5e1/clock.h ****  * @api
1232:src-gen/sr5e1/clock.h ****  */
1233:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB2L(uint32_t m) {
1234:src-gen/sr5e1/clock.h **** 
1235:src-gen/sr5e1/clock.h ****     RCC->AHB2LRSTR |= m;
1236:src-gen/sr5e1/clock.h ****     RCC->AHB2LRSTR &= ~m;
1237:src-gen/sr5e1/clock.h ****     (void)RCC->AHB2LRSTR;
1238:src-gen/sr5e1/clock.h **** }
1239:src-gen/sr5e1/clock.h **** 
1240:src-gen/sr5e1/clock.h **** /**
1241:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB2 peripherals clock [High Word]
1242:src-gen/sr5e1/clock.h ****  *
1243:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1244:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1245:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1246:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2HENR after the update
1247:src-gen/sr5e1/clock.h ****  *
1248:src-gen/sr5e1/clock.h ****  * @api
1249:src-gen/sr5e1/clock.h ****  */
1250:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB2H(bool smode, uint32_t m) {
1251:src-gen/sr5e1/clock.h **** 
1252:src-gen/sr5e1/clock.h ****     RCC->AHB2HENR |= m;
1253:src-gen/sr5e1/clock.h ****     if (smode) {
1254:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2HSMENR |= m;
1255:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1256:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2HSMENR |= m;
1257:src-gen/sr5e1/clock.h **** #endif
1258:src-gen/sr5e1/clock.h ****     }
1259:src-gen/sr5e1/clock.h ****     else {
1260:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2HSMENR &= ~m;
1261:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1262:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2HSMENR &= ~m;
1263:src-gen/sr5e1/clock.h **** #endif
1264:src-gen/sr5e1/clock.h ****     }
1265:src-gen/sr5e1/clock.h **** 
1266:src-gen/sr5e1/clock.h ****     return RCC->AHB2HENR;
1267:src-gen/sr5e1/clock.h **** }
1268:src-gen/sr5e1/clock.h **** 
1269:src-gen/sr5e1/clock.h **** /**
1270:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB2 peripherals clock [High Word]
1271:src-gen/sr5e1/clock.h ****  *
1272:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1273:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2HENR after the update
1274:src-gen/sr5e1/clock.h ****  *
1275:src-gen/sr5e1/clock.h ****  * @api
1276:src-gen/sr5e1/clock.h ****  */
1277:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB2H(uint32_t m) {
1278:src-gen/sr5e1/clock.h **** 
1279:src-gen/sr5e1/clock.h ****     RCC->AHB2HENR &= ~m;
1280:src-gen/sr5e1/clock.h ****     RCC->C1_AHB2HSMENR &= ~m;
1281:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1282:src-gen/sr5e1/clock.h ****     RCC->C2_AHB2HSMENR &= ~m;
1283:src-gen/sr5e1/clock.h **** #endif
1284:src-gen/sr5e1/clock.h **** 
1285:src-gen/sr5e1/clock.h ****     return RCC->AHB2HENR;
1286:src-gen/sr5e1/clock.h **** }
1287:src-gen/sr5e1/clock.h **** 
1288:src-gen/sr5e1/clock.h **** /**
1289:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB2 peripheral clock [High Word] is enabled
1290:src-gen/sr5e1/clock.h ****  *
1291:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1292:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1293:src-gen/sr5e1/clock.h ****  *
1294:src-gen/sr5e1/clock.h ****  * @api
1295:src-gen/sr5e1/clock.h ****  */
1296:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB2H(uint32_t m) {
1297:src-gen/sr5e1/clock.h **** 
1298:src-gen/sr5e1/clock.h ****     return (((RCC->AHB2HENR & m) == m) ? true : false);
1299:src-gen/sr5e1/clock.h **** }
1300:src-gen/sr5e1/clock.h **** 
1301:src-gen/sr5e1/clock.h **** /**
1302:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB2 peripherals [High Word]
1303:src-gen/sr5e1/clock.h ****  *
1304:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1305:src-gen/sr5e1/clock.h ****  *
1306:src-gen/sr5e1/clock.h ****  * @api
1307:src-gen/sr5e1/clock.h ****  */
1308:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB2H(uint32_t m) {
1309:src-gen/sr5e1/clock.h **** 
1310:src-gen/sr5e1/clock.h ****     RCC->AHB2HRSTR |= m;
1311:src-gen/sr5e1/clock.h ****     RCC->AHB2HRSTR &= ~m;
1312:src-gen/sr5e1/clock.h ****     (void)RCC->AHB2HRSTR;
1313:src-gen/sr5e1/clock.h **** }
1314:src-gen/sr5e1/clock.h **** 
1315:src-gen/sr5e1/clock.h **** /**
1316:src-gen/sr5e1/clock.h ****  * @brief   Enables APB1 peripherals clock [Low Word]
1317:src-gen/sr5e1/clock.h ****  *
1318:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1319:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1320:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1321:src-gen/sr5e1/clock.h ****  * @return              value of register APB1LENR after the update
1322:src-gen/sr5e1/clock.h ****  *
1323:src-gen/sr5e1/clock.h ****  * @api
1324:src-gen/sr5e1/clock.h ****  */
1325:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_APB1L(bool smode, uint32_t m) {
1326:src-gen/sr5e1/clock.h **** 
1327:src-gen/sr5e1/clock.h ****     RCC->APB1LENR |= m;
1328:src-gen/sr5e1/clock.h ****     if (smode) {
1329:src-gen/sr5e1/clock.h ****         RCC->C1_APB1LSMENR |= m;
1330:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1331:src-gen/sr5e1/clock.h ****         RCC->C2_APB1LSMENR |= m;
1332:src-gen/sr5e1/clock.h **** #endif
1333:src-gen/sr5e1/clock.h ****     }
1334:src-gen/sr5e1/clock.h ****     else {
1335:src-gen/sr5e1/clock.h ****         RCC->C1_APB1LSMENR &= ~m;
1336:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1337:src-gen/sr5e1/clock.h ****         RCC->C2_APB1LSMENR &= ~m;
1338:src-gen/sr5e1/clock.h **** #endif
1339:src-gen/sr5e1/clock.h ****     }
1340:src-gen/sr5e1/clock.h **** 
1341:src-gen/sr5e1/clock.h ****     return RCC->APB1LENR;
1342:src-gen/sr5e1/clock.h **** }
1343:src-gen/sr5e1/clock.h **** 
1344:src-gen/sr5e1/clock.h **** /**
1345:src-gen/sr5e1/clock.h ****  * @brief   Disables APB1 peripherals clock [Low Word]
1346:src-gen/sr5e1/clock.h ****  *
1347:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1348:src-gen/sr5e1/clock.h ****  * @return              value of register APB1LENR after the update
1349:src-gen/sr5e1/clock.h ****  *
1350:src-gen/sr5e1/clock.h ****  * @api
1351:src-gen/sr5e1/clock.h ****  */
1352:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_APB1L(uint32_t m) {
1353:src-gen/sr5e1/clock.h **** 
1354:src-gen/sr5e1/clock.h ****     RCC->APB1LENR &= ~m;
1355:src-gen/sr5e1/clock.h ****     RCC->C1_APB1LSMENR &= ~m;
1356:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1357:src-gen/sr5e1/clock.h ****     RCC->C2_APB1LSMENR &= ~m;
1358:src-gen/sr5e1/clock.h **** #endif
1359:src-gen/sr5e1/clock.h **** 
1360:src-gen/sr5e1/clock.h ****     return RCC->APB1LENR;
1361:src-gen/sr5e1/clock.h **** }
1362:src-gen/sr5e1/clock.h **** 
1363:src-gen/sr5e1/clock.h **** /**
1364:src-gen/sr5e1/clock.h ****  * @brief   Checks if APB1 peripheral clock [Low Word] is enabled
1365:src-gen/sr5e1/clock.h ****  *
1366:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1367:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1368:src-gen/sr5e1/clock.h ****  *
1369:src-gen/sr5e1/clock.h ****  * @api
1370:src-gen/sr5e1/clock.h ****  */
1371:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_APB1L(uint32_t m) {
1372:src-gen/sr5e1/clock.h **** 
1373:src-gen/sr5e1/clock.h ****     return (((RCC->APB1LENR & m) == m) ? true : false);
1374:src-gen/sr5e1/clock.h **** }
1375:src-gen/sr5e1/clock.h **** 
1376:src-gen/sr5e1/clock.h **** /**
1377:src-gen/sr5e1/clock.h ****  * @brief   Resets APB1 peripherals [Low Word]
1378:src-gen/sr5e1/clock.h ****  *
1379:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1380:src-gen/sr5e1/clock.h ****  *
1381:src-gen/sr5e1/clock.h ****  * @api
1382:src-gen/sr5e1/clock.h ****  */
1383:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_APB1L(uint32_t m) {
1384:src-gen/sr5e1/clock.h **** 
1385:src-gen/sr5e1/clock.h ****     RCC->APB1LRSTR |= m;
1386:src-gen/sr5e1/clock.h ****     RCC->APB1LRSTR &= ~m;
1387:src-gen/sr5e1/clock.h ****     (void)RCC->APB1LRSTR;
1388:src-gen/sr5e1/clock.h **** }
1389:src-gen/sr5e1/clock.h **** 
1390:src-gen/sr5e1/clock.h **** /**
1391:src-gen/sr5e1/clock.h ****  * @brief   Enables APB2 peripherals clock [Low Word]
1392:src-gen/sr5e1/clock.h ****  *
1393:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1394:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1395:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1396:src-gen/sr5e1/clock.h ****  * @return              value of register APB2LENR after the update
1397:src-gen/sr5e1/clock.h ****  *
1398:src-gen/sr5e1/clock.h ****  * @api
1399:src-gen/sr5e1/clock.h ****  */
1400:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_APB2L(bool smode, uint32_t m) {
1401:src-gen/sr5e1/clock.h **** 
1402:src-gen/sr5e1/clock.h ****     RCC->APB2LENR |= m;
1403:src-gen/sr5e1/clock.h ****     if (smode) {
1404:src-gen/sr5e1/clock.h ****         RCC->C1_APB2LSMENR |= m;
1405:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1406:src-gen/sr5e1/clock.h ****         RCC->C2_APB2LSMENR |= m;
1407:src-gen/sr5e1/clock.h **** #endif
1408:src-gen/sr5e1/clock.h ****     }
1409:src-gen/sr5e1/clock.h ****     else {
1410:src-gen/sr5e1/clock.h ****         RCC->C1_APB2LSMENR &= ~m;
1411:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1412:src-gen/sr5e1/clock.h ****         RCC->C2_APB2LSMENR &= ~m;
1413:src-gen/sr5e1/clock.h **** #endif
1414:src-gen/sr5e1/clock.h ****     }
1415:src-gen/sr5e1/clock.h **** 
1416:src-gen/sr5e1/clock.h ****     return RCC->APB2LENR;
1417:src-gen/sr5e1/clock.h **** }
1418:src-gen/sr5e1/clock.h **** 
1419:src-gen/sr5e1/clock.h **** /**
1420:src-gen/sr5e1/clock.h ****  * @brief   Disables APB2 peripherals clock [Low Word]
1421:src-gen/sr5e1/clock.h ****  *
1422:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1423:src-gen/sr5e1/clock.h ****  * @return              value of register APB2LENR after the update
1424:src-gen/sr5e1/clock.h ****  *
1425:src-gen/sr5e1/clock.h ****  * @api
1426:src-gen/sr5e1/clock.h ****  */
1427:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_APB2L(uint32_t m) {
1428:src-gen/sr5e1/clock.h **** 
1429:src-gen/sr5e1/clock.h ****     RCC->APB2LENR &= ~m;
1430:src-gen/sr5e1/clock.h ****     RCC->C1_APB2LSMENR &= ~m;
1431:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1432:src-gen/sr5e1/clock.h ****     RCC->C2_APB2LSMENR &= ~m;
1433:src-gen/sr5e1/clock.h **** #endif
1434:src-gen/sr5e1/clock.h **** 
1435:src-gen/sr5e1/clock.h ****     return RCC->APB2LENR;
1436:src-gen/sr5e1/clock.h **** }
1437:src-gen/sr5e1/clock.h **** 
1438:src-gen/sr5e1/clock.h **** /**
1439:src-gen/sr5e1/clock.h ****  * @brief   Checks if APB2 peripheral clock [Low Word] is enabled
1440:src-gen/sr5e1/clock.h ****  *
1441:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1442:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1443:src-gen/sr5e1/clock.h ****  *
1444:src-gen/sr5e1/clock.h ****  * @api
1445:src-gen/sr5e1/clock.h ****  */
1446:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_APB2L(uint32_t m) {
1447:src-gen/sr5e1/clock.h **** 
1448:src-gen/sr5e1/clock.h ****     return (((RCC->APB2LENR & m) == m) ? true : false);
1449:src-gen/sr5e1/clock.h **** }
1450:src-gen/sr5e1/clock.h **** 
1451:src-gen/sr5e1/clock.h **** /**
1452:src-gen/sr5e1/clock.h ****  * @brief   Resets APB2 peripherals [Low Word]
1453:src-gen/sr5e1/clock.h ****  *
1454:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1455:src-gen/sr5e1/clock.h ****  *
1456:src-gen/sr5e1/clock.h ****  * @api
1457:src-gen/sr5e1/clock.h ****  */
1458:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_APB2L(uint32_t m) {
1459:src-gen/sr5e1/clock.h **** 
1460:src-gen/sr5e1/clock.h ****     RCC->APB2LRSTR |= m;
1461:src-gen/sr5e1/clock.h ****     RCC->APB2LRSTR &= ~m;
1462:src-gen/sr5e1/clock.h ****     (void)RCC->APB2LRSTR;
1463:src-gen/sr5e1/clock.h **** }
1464:src-gen/sr5e1/clock.h **** 
1465:src-gen/sr5e1/clock.h **** /**
1466:src-gen/sr5e1/clock.h ****  * @brief   Enables APB2 peripherals clock [High Word]
1467:src-gen/sr5e1/clock.h ****  *
1468:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1469:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1470:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1471:src-gen/sr5e1/clock.h ****  * @return              value of register APB2HENR after the update
1472:src-gen/sr5e1/clock.h ****  *
1473:src-gen/sr5e1/clock.h ****  * @api
1474:src-gen/sr5e1/clock.h ****  */
1475:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_APB2H(bool smode, uint32_t m) {
1476:src-gen/sr5e1/clock.h **** 
1477:src-gen/sr5e1/clock.h ****     RCC->APB2HENR |= m;
 164              		.loc 2 1477 19
 165 0022 4FF08843 		mov	r3, #1140850688
 166 0026 D3F88C20 		ldr	r2, [r3, #140]
 167 002a 4FF08841 		mov	r1, #1140850688
 168 002e 349B     		ldr	r3, [sp, #208]
 169 0030 1343     		orrs	r3, r3, r2
 170 0032 C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****     if (smode) {
 171              		.loc 2 1478 8
 172 0036 9DF8D630 		ldrb	r3, [sp, #214]	@ zero_extendqisi2
 173 003a 002B     		cmp	r3, #0
 174 003c 14D0     		beq	.L15
1479:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 175              		.loc 2 1479 28
 176 003e 4FF08843 		mov	r3, #1140850688
 177 0042 D3F8AC20 		ldr	r2, [r3, #172]
 178 0046 4FF08841 		mov	r1, #1140850688
 179 004a 349B     		ldr	r3, [sp, #208]
 180 004c 1343     		orrs	r3, r3, r2
 181 004e C1F8AC30 		str	r3, [r1, #172]
1480:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1481:src-gen/sr5e1/clock.h ****         RCC->C2_APB2HSMENR |= m;
 182              		.loc 2 1481 28
 183 0052 4FF08843 		mov	r3, #1140850688
 184 0056 D3F8CC20 		ldr	r2, [r3, #204]
 185 005a 4FF08841 		mov	r1, #1140850688
 186 005e 349B     		ldr	r3, [sp, #208]
 187 0060 1343     		orrs	r3, r3, r2
 188 0062 C1F8CC30 		str	r3, [r1, #204]
 189 0066 15E0     		b	.L16
 190              	.L15:
1482:src-gen/sr5e1/clock.h **** #endif
1483:src-gen/sr5e1/clock.h ****     }
1484:src-gen/sr5e1/clock.h ****     else {
1485:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR &= ~m;
 191              		.loc 2 1485 28
 192 0068 4FF08843 		mov	r3, #1140850688
 193 006c D3F8AC20 		ldr	r2, [r3, #172]
 194              		.loc 2 1485 31
 195 0070 349B     		ldr	r3, [sp, #208]
 196 0072 DB43     		mvns	r3, r3
 197              		.loc 2 1485 28
 198 0074 4FF08841 		mov	r1, #1140850688
 199 0078 1340     		ands	r3, r3, r2
 200 007a C1F8AC30 		str	r3, [r1, #172]
1486:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1487:src-gen/sr5e1/clock.h ****         RCC->C2_APB2HSMENR &= ~m;
 201              		.loc 2 1487 28
 202 007e 4FF08843 		mov	r3, #1140850688
 203 0082 D3F8CC20 		ldr	r2, [r3, #204]
 204              		.loc 2 1487 31
 205 0086 349B     		ldr	r3, [sp, #208]
 206 0088 DB43     		mvns	r3, r3
 207              		.loc 2 1487 28
 208 008a 4FF08841 		mov	r1, #1140850688
 209 008e 1340     		ands	r3, r3, r2
 210 0090 C1F8CC30 		str	r3, [r1, #204]
 211              	.L16:
1488:src-gen/sr5e1/clock.h **** #endif
1489:src-gen/sr5e1/clock.h ****     }
1490:src-gen/sr5e1/clock.h **** 
1491:src-gen/sr5e1/clock.h ****     return RCC->APB2HENR;
 212              		.loc 2 1491 15
 213 0094 4FF08843 		mov	r3, #1140850688
 214 0098 D3F88C30 		ldr	r3, [r3, #140]
 215              	.LBE173:
 216              	.LBE172:
1492:src-gen/sr5e1/clock.h **** }
1493:src-gen/sr5e1/clock.h **** 
1494:src-gen/sr5e1/clock.h **** /**
1495:src-gen/sr5e1/clock.h ****  * @brief   Disables APB2 peripherals clock [High Word]
1496:src-gen/sr5e1/clock.h ****  *
1497:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1498:src-gen/sr5e1/clock.h ****  * @return              value of register APB2HENR after the update
1499:src-gen/sr5e1/clock.h ****  *
1500:src-gen/sr5e1/clock.h ****  * @api
1501:src-gen/sr5e1/clock.h ****  */
1502:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_APB2H(uint32_t m) {
1503:src-gen/sr5e1/clock.h **** 
1504:src-gen/sr5e1/clock.h ****     RCC->APB2HENR &= ~m;
1505:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
1506:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1507:src-gen/sr5e1/clock.h ****     RCC->C2_APB2HSMENR &= ~m;
1508:src-gen/sr5e1/clock.h **** #endif
1509:src-gen/sr5e1/clock.h **** 
1510:src-gen/sr5e1/clock.h ****     return RCC->APB2HENR;
1511:src-gen/sr5e1/clock.h **** }
1512:src-gen/sr5e1/clock.h **** 
1513:src-gen/sr5e1/clock.h **** /**
1514:src-gen/sr5e1/clock.h ****  * @brief   Checks if APB2 peripheral clock [High Word] is enabled
1515:src-gen/sr5e1/clock.h ****  *
1516:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1517:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1518:src-gen/sr5e1/clock.h ****  *
1519:src-gen/sr5e1/clock.h ****  * @api
1520:src-gen/sr5e1/clock.h ****  */
1521:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_APB2H(uint32_t m) {
1522:src-gen/sr5e1/clock.h **** 
1523:src-gen/sr5e1/clock.h ****     return (((RCC->APB2HENR & m) == m) ? true : false);
1524:src-gen/sr5e1/clock.h **** }
1525:src-gen/sr5e1/clock.h **** 
1526:src-gen/sr5e1/clock.h **** /**
1527:src-gen/sr5e1/clock.h ****  * @brief   Resets APB2 peripherals [High Word]
1528:src-gen/sr5e1/clock.h ****  *
1529:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1530:src-gen/sr5e1/clock.h ****  *
1531:src-gen/sr5e1/clock.h ****  * @api
1532:src-gen/sr5e1/clock.h ****  */
1533:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_APB2H(uint32_t m) {
1534:src-gen/sr5e1/clock.h **** 
1535:src-gen/sr5e1/clock.h ****     RCC->APB2HRSTR |= m;
1536:src-gen/sr5e1/clock.h ****     RCC->APB2HRSTR &= ~m;
1537:src-gen/sr5e1/clock.h ****     (void)RCC->APB2HRSTR;
1538:src-gen/sr5e1/clock.h **** }
1539:src-gen/sr5e1/clock.h **** 
1540:src-gen/sr5e1/clock.h **** /**
1541:src-gen/sr5e1/clock.h ****  * @brief   Enables CMU clock
1542:src-gen/sr5e1/clock.h ****  *
1543:src-gen/sr5e1/clock.h ****  * @param[in] m         CMU clock to be enabled
1544:src-gen/sr5e1/clock.h ****  * @return              value of register CMUR after the update
1545:src-gen/sr5e1/clock.h ****  *
1546:src-gen/sr5e1/clock.h ****  * @api
1547:src-gen/sr5e1/clock.h ****  */
1548:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_CMU(uint32_t m) {
1549:src-gen/sr5e1/clock.h **** 
1550:src-gen/sr5e1/clock.h ****     RCC->CMUR |= m;
1551:src-gen/sr5e1/clock.h **** 
1552:src-gen/sr5e1/clock.h ****     return RCC->CMUR;
1553:src-gen/sr5e1/clock.h **** }
1554:src-gen/sr5e1/clock.h **** 
1555:src-gen/sr5e1/clock.h **** /**
1556:src-gen/sr5e1/clock.h ****  * @brief   Disables CMU clock
1557:src-gen/sr5e1/clock.h ****  *
1558:src-gen/sr5e1/clock.h ****  * @param[in] m         CMU clock to be disabled
1559:src-gen/sr5e1/clock.h ****  * @return              value of register CMUR after the update
1560:src-gen/sr5e1/clock.h ****  *
1561:src-gen/sr5e1/clock.h ****  * @api
1562:src-gen/sr5e1/clock.h ****  */
1563:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_CMU(uint32_t m) {
1564:src-gen/sr5e1/clock.h **** 
1565:src-gen/sr5e1/clock.h ****     RCC->CMUR &= ~m;
1566:src-gen/sr5e1/clock.h **** 
1567:src-gen/sr5e1/clock.h ****     return RCC->CMUR;
1568:src-gen/sr5e1/clock.h **** }
1569:src-gen/sr5e1/clock.h **** 
1570:src-gen/sr5e1/clock.h **** /**
1571:src-gen/sr5e1/clock.h ****  * @brief   Checks if CMU clock is enabled
1572:src-gen/sr5e1/clock.h ****  *
1573:src-gen/sr5e1/clock.h ****  * @param[in] m         CMU clock to be checked
1574:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1575:src-gen/sr5e1/clock.h ****  *
1576:src-gen/sr5e1/clock.h ****  * @api
1577:src-gen/sr5e1/clock.h ****  */
1578:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_CMU(uint32_t m) {
1579:src-gen/sr5e1/clock.h **** 
1580:src-gen/sr5e1/clock.h ****     return (((RCC->CMUR & m) == m) ? true : false);
1581:src-gen/sr5e1/clock.h **** }
1582:src-gen/sr5e1/clock.h **** 
1583:src-gen/sr5e1/clock.h **** /**
1584:src-gen/sr5e1/clock.h ****  * @brief   Resets CMU
1585:src-gen/sr5e1/clock.h ****  *
1586:src-gen/sr5e1/clock.h ****  * @param[in] m         CMU to reset
1587:src-gen/sr5e1/clock.h ****  *
1588:src-gen/sr5e1/clock.h ****  * @api
1589:src-gen/sr5e1/clock.h ****  */
1590:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_CMU(uint32_t m) {
1591:src-gen/sr5e1/clock.h **** 
1592:src-gen/sr5e1/clock.h ****     RCC->CMUR |= m;
1593:src-gen/sr5e1/clock.h ****     (void)RCC->CMUR;
1594:src-gen/sr5e1/clock.h **** }
1595:src-gen/sr5e1/clock.h **** 
1596:src-gen/sr5e1/clock.h **** /**
1597:src-gen/sr5e1/clock.h ****  * @brief   Enables DMA1 clock
1598:src-gen/sr5e1/clock.h ****  *
1599:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1600:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1601:src-gen/sr5e1/clock.h ****  *
1602:src-gen/sr5e1/clock.h ****  * @api
1603:src-gen/sr5e1/clock.h ****  */
1604:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DMA1(bool smode) {
1605:src-gen/sr5e1/clock.h **** 
1606:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_DMA1);
1607:src-gen/sr5e1/clock.h **** }
1608:src-gen/sr5e1/clock.h **** 
1609:src-gen/sr5e1/clock.h **** /**
1610:src-gen/sr5e1/clock.h ****  * @brief   Disables DMA1 clock
1611:src-gen/sr5e1/clock.h ****  *
1612:src-gen/sr5e1/clock.h ****  * @api
1613:src-gen/sr5e1/clock.h ****  */
1614:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DMA1(void) {
1615:src-gen/sr5e1/clock.h **** 
1616:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_DMA1);
1617:src-gen/sr5e1/clock.h **** }
1618:src-gen/sr5e1/clock.h **** 
1619:src-gen/sr5e1/clock.h **** /**
1620:src-gen/sr5e1/clock.h ****  * @brief   Checks if DMA1 clock is enabled
1621:src-gen/sr5e1/clock.h ****  *
1622:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1623:src-gen/sr5e1/clock.h ****  *
1624:src-gen/sr5e1/clock.h ****  * @api
1625:src-gen/sr5e1/clock.h ****  */
1626:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DMA1(void) {
1627:src-gen/sr5e1/clock.h **** 
1628:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_DMA1);
1629:src-gen/sr5e1/clock.h **** }
1630:src-gen/sr5e1/clock.h **** 
1631:src-gen/sr5e1/clock.h **** /**
1632:src-gen/sr5e1/clock.h ****  * @brief   Resets DMA1
1633:src-gen/sr5e1/clock.h ****  *
1634:src-gen/sr5e1/clock.h ****  * @api
1635:src-gen/sr5e1/clock.h ****  */
1636:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DMA1(void) {
1637:src-gen/sr5e1/clock.h **** 
1638:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_DMA1);
1639:src-gen/sr5e1/clock.h **** }
1640:src-gen/sr5e1/clock.h **** 
1641:src-gen/sr5e1/clock.h **** /**
1642:src-gen/sr5e1/clock.h ****  * @brief   Enables DMA2 clock
1643:src-gen/sr5e1/clock.h ****  *
1644:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1645:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1646:src-gen/sr5e1/clock.h ****  *
1647:src-gen/sr5e1/clock.h ****  * @api
1648:src-gen/sr5e1/clock.h ****  */
1649:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DMA2(bool smode) {
1650:src-gen/sr5e1/clock.h **** 
1651:src-gen/sr5e1/clock.h ****     clock_enable_AHB1L(smode, RCC_AHB1LENR_DMA2);
1652:src-gen/sr5e1/clock.h **** }
1653:src-gen/sr5e1/clock.h **** 
1654:src-gen/sr5e1/clock.h **** /**
1655:src-gen/sr5e1/clock.h ****  * @brief   Disables DMA2 clock
1656:src-gen/sr5e1/clock.h ****  *
1657:src-gen/sr5e1/clock.h ****  * @api
1658:src-gen/sr5e1/clock.h ****  */
1659:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DMA2(void) {
1660:src-gen/sr5e1/clock.h **** 
1661:src-gen/sr5e1/clock.h ****     clock_disable_AHB1L(RCC_AHB1LENR_DMA2);
1662:src-gen/sr5e1/clock.h **** }
1663:src-gen/sr5e1/clock.h **** 
1664:src-gen/sr5e1/clock.h **** /**
1665:src-gen/sr5e1/clock.h ****  * @brief   Checks if DMA2 clock is enabled
1666:src-gen/sr5e1/clock.h ****  *
1667:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1668:src-gen/sr5e1/clock.h ****  *
1669:src-gen/sr5e1/clock.h ****  * @api
1670:src-gen/sr5e1/clock.h ****  */
1671:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DMA2(void) {
1672:src-gen/sr5e1/clock.h **** 
1673:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1L(RCC_AHB1LENR_DMA2);
1674:src-gen/sr5e1/clock.h **** }
1675:src-gen/sr5e1/clock.h **** 
1676:src-gen/sr5e1/clock.h **** /**
1677:src-gen/sr5e1/clock.h ****  * @brief   Resets DMA2
1678:src-gen/sr5e1/clock.h ****  *
1679:src-gen/sr5e1/clock.h ****  * @api
1680:src-gen/sr5e1/clock.h ****  */
1681:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DMA2(void) {
1682:src-gen/sr5e1/clock.h **** 
1683:src-gen/sr5e1/clock.h ****     clock_reset_AHB1L(RCC_AHB1LRSTR_DMA2);
1684:src-gen/sr5e1/clock.h **** }
1685:src-gen/sr5e1/clock.h **** 
1686:src-gen/sr5e1/clock.h **** /**
1687:src-gen/sr5e1/clock.h ****  * @brief   Enables DMAMUX1 clock
1688:src-gen/sr5e1/clock.h ****  *
1689:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1690:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1691:src-gen/sr5e1/clock.h ****  *
1692:src-gen/sr5e1/clock.h ****  * @api
1693:src-gen/sr5e1/clock.h ****  */
1694:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DMAMUX1(bool smode) {
1695:src-gen/sr5e1/clock.h **** 
1696:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_DMAMUX1);
1697:src-gen/sr5e1/clock.h **** }
1698:src-gen/sr5e1/clock.h **** 
1699:src-gen/sr5e1/clock.h **** /**
1700:src-gen/sr5e1/clock.h ****  * @brief   Disables DMAMUX1 clock
1701:src-gen/sr5e1/clock.h ****  *
1702:src-gen/sr5e1/clock.h ****  * @api
1703:src-gen/sr5e1/clock.h ****  */
1704:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DMAMUX1(void) {
1705:src-gen/sr5e1/clock.h **** 
1706:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_DMAMUX1);
1707:src-gen/sr5e1/clock.h **** }
1708:src-gen/sr5e1/clock.h **** 
1709:src-gen/sr5e1/clock.h **** /**
1710:src-gen/sr5e1/clock.h ****  * @brief   Checks if DMAMUX1 clock is enabled
1711:src-gen/sr5e1/clock.h ****  *
1712:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1713:src-gen/sr5e1/clock.h ****  *
1714:src-gen/sr5e1/clock.h ****  * @api
1715:src-gen/sr5e1/clock.h ****  */
1716:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DMAMUX1(void) {
1717:src-gen/sr5e1/clock.h **** 
1718:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_DMAMUX1);
1719:src-gen/sr5e1/clock.h **** }
1720:src-gen/sr5e1/clock.h **** 
1721:src-gen/sr5e1/clock.h **** /**
1722:src-gen/sr5e1/clock.h ****  * @brief   Resets DMAMUX1
1723:src-gen/sr5e1/clock.h ****  *
1724:src-gen/sr5e1/clock.h ****  * @api
1725:src-gen/sr5e1/clock.h ****  */
1726:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DMAMUX1(void) {
1727:src-gen/sr5e1/clock.h **** 
1728:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_DMAMUX1);
1729:src-gen/sr5e1/clock.h **** }
1730:src-gen/sr5e1/clock.h **** 
1731:src-gen/sr5e1/clock.h **** /**
1732:src-gen/sr5e1/clock.h ****  * @brief   Enables CORDIC clock
1733:src-gen/sr5e1/clock.h ****  *
1734:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1735:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1736:src-gen/sr5e1/clock.h ****  *
1737:src-gen/sr5e1/clock.h ****  * @api
1738:src-gen/sr5e1/clock.h ****  */
1739:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_CORDIC(bool smode) {
1740:src-gen/sr5e1/clock.h **** 
1741:src-gen/sr5e1/clock.h ****     clock_enable_AHB1L(smode, RCC_AHB1LENR_CORDIC);
1742:src-gen/sr5e1/clock.h **** }
1743:src-gen/sr5e1/clock.h **** 
1744:src-gen/sr5e1/clock.h **** /**
1745:src-gen/sr5e1/clock.h ****  * @brief   Disables CORDIC clock
1746:src-gen/sr5e1/clock.h ****  *
1747:src-gen/sr5e1/clock.h ****  * @api
1748:src-gen/sr5e1/clock.h ****  */
1749:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_CORDIC(void) {
1750:src-gen/sr5e1/clock.h **** 
1751:src-gen/sr5e1/clock.h ****     clock_disable_AHB1L(RCC_AHB1LENR_CORDIC);
1752:src-gen/sr5e1/clock.h **** }
1753:src-gen/sr5e1/clock.h **** 
1754:src-gen/sr5e1/clock.h **** /**
1755:src-gen/sr5e1/clock.h ****  * @brief   Checks if CORDIC clock is enabled
1756:src-gen/sr5e1/clock.h ****  *
1757:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1758:src-gen/sr5e1/clock.h ****  *
1759:src-gen/sr5e1/clock.h ****  * @api
1760:src-gen/sr5e1/clock.h ****  */
1761:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_CORDIC(void) {
1762:src-gen/sr5e1/clock.h **** 
1763:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1L(RCC_AHB1LENR_CORDIC);
1764:src-gen/sr5e1/clock.h **** }
1765:src-gen/sr5e1/clock.h **** 
1766:src-gen/sr5e1/clock.h **** /**
1767:src-gen/sr5e1/clock.h ****  * @brief   Resets CORDIC
1768:src-gen/sr5e1/clock.h ****  *
1769:src-gen/sr5e1/clock.h ****  * @api
1770:src-gen/sr5e1/clock.h ****  */
1771:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_CORDIC(void) {
1772:src-gen/sr5e1/clock.h **** 
1773:src-gen/sr5e1/clock.h ****     clock_reset_AHB1L(RCC_AHB1LRSTR_CORDIC);
1774:src-gen/sr5e1/clock.h **** }
1775:src-gen/sr5e1/clock.h **** 
1776:src-gen/sr5e1/clock.h **** /**
1777:src-gen/sr5e1/clock.h ****  * @brief   Enables CRC clock
1778:src-gen/sr5e1/clock.h ****  *
1779:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1780:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1781:src-gen/sr5e1/clock.h ****  *
1782:src-gen/sr5e1/clock.h ****  * @api
1783:src-gen/sr5e1/clock.h ****  */
1784:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_CRC(bool smode) {
1785:src-gen/sr5e1/clock.h **** 
1786:src-gen/sr5e1/clock.h ****     clock_enable_AHB1L(smode, RCC_AHB1LENR_CRC);
1787:src-gen/sr5e1/clock.h **** }
1788:src-gen/sr5e1/clock.h **** 
1789:src-gen/sr5e1/clock.h **** /**
1790:src-gen/sr5e1/clock.h ****  * @brief   Disables CRC clock
1791:src-gen/sr5e1/clock.h ****  *
1792:src-gen/sr5e1/clock.h ****  * @api
1793:src-gen/sr5e1/clock.h ****  */
1794:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_CRC(void) {
1795:src-gen/sr5e1/clock.h **** 
1796:src-gen/sr5e1/clock.h ****     clock_disable_AHB1L(RCC_AHB1LENR_CRC);
1797:src-gen/sr5e1/clock.h **** }
1798:src-gen/sr5e1/clock.h **** 
1799:src-gen/sr5e1/clock.h **** /**
1800:src-gen/sr5e1/clock.h ****  * @brief   Checks if CRC clock is enabled
1801:src-gen/sr5e1/clock.h ****  *
1802:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1803:src-gen/sr5e1/clock.h ****  *
1804:src-gen/sr5e1/clock.h ****  * @api
1805:src-gen/sr5e1/clock.h ****  */
1806:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_CRC(void) {
1807:src-gen/sr5e1/clock.h **** 
1808:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1L(RCC_AHB1LENR_CRC);
1809:src-gen/sr5e1/clock.h **** }
1810:src-gen/sr5e1/clock.h **** 
1811:src-gen/sr5e1/clock.h **** /**
1812:src-gen/sr5e1/clock.h ****  * @brief   Resets CRC
1813:src-gen/sr5e1/clock.h ****  *
1814:src-gen/sr5e1/clock.h ****  * @api
1815:src-gen/sr5e1/clock.h ****  */
1816:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_CRC(void) {
1817:src-gen/sr5e1/clock.h **** 
1818:src-gen/sr5e1/clock.h ****     clock_reset_AHB1L(RCC_AHB1LRSTR_CRC);
1819:src-gen/sr5e1/clock.h **** }
1820:src-gen/sr5e1/clock.h **** 
1821:src-gen/sr5e1/clock.h **** /**
1822:src-gen/sr5e1/clock.h ****  * @brief   Enables HSEM clock
1823:src-gen/sr5e1/clock.h ****  *
1824:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1825:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1826:src-gen/sr5e1/clock.h ****  *
1827:src-gen/sr5e1/clock.h ****  * @api
1828:src-gen/sr5e1/clock.h ****  */
1829:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_HSEM(bool smode) {
1830:src-gen/sr5e1/clock.h **** 
1831:src-gen/sr5e1/clock.h ****     clock_enable_AHB1L(smode, RCC_AHB1LENR_HSEM);
1832:src-gen/sr5e1/clock.h **** }
1833:src-gen/sr5e1/clock.h **** 
1834:src-gen/sr5e1/clock.h **** /**
1835:src-gen/sr5e1/clock.h ****  * @brief   Disables HSEM clock
1836:src-gen/sr5e1/clock.h ****  *
1837:src-gen/sr5e1/clock.h ****  * @api
1838:src-gen/sr5e1/clock.h ****  */
1839:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_HSEM(void) {
1840:src-gen/sr5e1/clock.h **** 
1841:src-gen/sr5e1/clock.h ****     clock_disable_AHB1L(RCC_AHB1LENR_HSEM);
1842:src-gen/sr5e1/clock.h **** }
1843:src-gen/sr5e1/clock.h **** 
1844:src-gen/sr5e1/clock.h **** /**
1845:src-gen/sr5e1/clock.h ****  * @brief   Checks if HSEM clock is enabled
1846:src-gen/sr5e1/clock.h ****  *
1847:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1848:src-gen/sr5e1/clock.h ****  *
1849:src-gen/sr5e1/clock.h ****  * @api
1850:src-gen/sr5e1/clock.h ****  */
1851:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_HSEM(void) {
1852:src-gen/sr5e1/clock.h **** 
1853:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1L(RCC_AHB1LENR_HSEM);
1854:src-gen/sr5e1/clock.h **** }
1855:src-gen/sr5e1/clock.h **** 
1856:src-gen/sr5e1/clock.h **** /**
1857:src-gen/sr5e1/clock.h ****  * @brief   Resets HSEM
1858:src-gen/sr5e1/clock.h ****  *
1859:src-gen/sr5e1/clock.h ****  * @api
1860:src-gen/sr5e1/clock.h ****  */
1861:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_HSEM(void) {
1862:src-gen/sr5e1/clock.h **** 
1863:src-gen/sr5e1/clock.h ****     clock_reset_AHB1L(RCC_AHB1LRSTR_HSEM);
1864:src-gen/sr5e1/clock.h **** }
1865:src-gen/sr5e1/clock.h **** 
1866:src-gen/sr5e1/clock.h **** /**
1867:src-gen/sr5e1/clock.h ****  * @brief   Enables ADC12 clock
1868:src-gen/sr5e1/clock.h ****  *
1869:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1870:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1871:src-gen/sr5e1/clock.h ****  *
1872:src-gen/sr5e1/clock.h ****  * @api
1873:src-gen/sr5e1/clock.h ****  */
1874:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_ADC12(bool smode) {
1875:src-gen/sr5e1/clock.h **** 
1876:src-gen/sr5e1/clock.h ****     clock_enable_AHB2H(smode, RCC_AHB2HENR_ADC1_ADC2);
1877:src-gen/sr5e1/clock.h **** }
1878:src-gen/sr5e1/clock.h **** 
1879:src-gen/sr5e1/clock.h **** /**
1880:src-gen/sr5e1/clock.h ****  * @brief   Disables ADC12 clock
1881:src-gen/sr5e1/clock.h ****  *
1882:src-gen/sr5e1/clock.h ****  * @api
1883:src-gen/sr5e1/clock.h ****  */
1884:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_ADC12(void) {
1885:src-gen/sr5e1/clock.h **** 
1886:src-gen/sr5e1/clock.h ****     clock_disable_AHB2H(RCC_AHB2HENR_ADC1_ADC2);
1887:src-gen/sr5e1/clock.h **** }
1888:src-gen/sr5e1/clock.h **** 
1889:src-gen/sr5e1/clock.h **** /**
1890:src-gen/sr5e1/clock.h ****  * @brief   Checks if ADC12 clock is enabled
1891:src-gen/sr5e1/clock.h ****  *
1892:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1893:src-gen/sr5e1/clock.h ****  *
1894:src-gen/sr5e1/clock.h ****  * @api
1895:src-gen/sr5e1/clock.h ****  */
1896:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_ADC12(void) {
1897:src-gen/sr5e1/clock.h **** 
1898:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2H(RCC_AHB2HENR_ADC1_ADC2);
1899:src-gen/sr5e1/clock.h **** }
1900:src-gen/sr5e1/clock.h **** 
1901:src-gen/sr5e1/clock.h **** /**
1902:src-gen/sr5e1/clock.h ****  * @brief   Resets ADC12
1903:src-gen/sr5e1/clock.h ****  *
1904:src-gen/sr5e1/clock.h ****  * @api
1905:src-gen/sr5e1/clock.h ****  */
1906:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_ADC12(void) {
1907:src-gen/sr5e1/clock.h **** 
1908:src-gen/sr5e1/clock.h ****     clock_reset_AHB2H(RCC_AHB2HRSTR_ADC1_ADC2);
1909:src-gen/sr5e1/clock.h **** }
1910:src-gen/sr5e1/clock.h **** 
1911:src-gen/sr5e1/clock.h **** /**
1912:src-gen/sr5e1/clock.h ****  * @brief   Enables ADC345 clock
1913:src-gen/sr5e1/clock.h ****  *
1914:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1915:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1916:src-gen/sr5e1/clock.h ****  *
1917:src-gen/sr5e1/clock.h ****  * @api
1918:src-gen/sr5e1/clock.h ****  */
1919:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_ADC345(bool smode) {
1920:src-gen/sr5e1/clock.h **** 
1921:src-gen/sr5e1/clock.h ****     clock_enable_AHB1H(smode, RCC_AHB1HENR_ADC3_ADC4_ADC5);
1922:src-gen/sr5e1/clock.h **** }
1923:src-gen/sr5e1/clock.h **** 
1924:src-gen/sr5e1/clock.h **** /**
1925:src-gen/sr5e1/clock.h ****  * @brief   Disables ADC345 clock
1926:src-gen/sr5e1/clock.h ****  *
1927:src-gen/sr5e1/clock.h ****  * @api
1928:src-gen/sr5e1/clock.h ****  */
1929:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_ADC345(void) {
1930:src-gen/sr5e1/clock.h **** 
1931:src-gen/sr5e1/clock.h ****     clock_disable_AHB1H(RCC_AHB1HENR_ADC3_ADC4_ADC5);
1932:src-gen/sr5e1/clock.h **** }
1933:src-gen/sr5e1/clock.h **** 
1934:src-gen/sr5e1/clock.h **** /**
1935:src-gen/sr5e1/clock.h ****  * @brief   Checks if ADC345 clock is enabled
1936:src-gen/sr5e1/clock.h ****  *
1937:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1938:src-gen/sr5e1/clock.h ****  *
1939:src-gen/sr5e1/clock.h ****  * @api
1940:src-gen/sr5e1/clock.h ****  */
1941:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_ADC345(void) {
1942:src-gen/sr5e1/clock.h **** 
1943:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1H(RCC_AHB1HENR_ADC3_ADC4_ADC5);
1944:src-gen/sr5e1/clock.h **** }
1945:src-gen/sr5e1/clock.h **** 
1946:src-gen/sr5e1/clock.h **** /**
1947:src-gen/sr5e1/clock.h ****  * @brief   Resets ADC345
1948:src-gen/sr5e1/clock.h ****  *
1949:src-gen/sr5e1/clock.h ****  * @api
1950:src-gen/sr5e1/clock.h ****  */
1951:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_ADC345(void) {
1952:src-gen/sr5e1/clock.h **** 
1953:src-gen/sr5e1/clock.h ****     clock_reset_AHB1H(RCC_AHB1HRSTR_ADC3_ADC4_ADC5);
1954:src-gen/sr5e1/clock.h **** }
1955:src-gen/sr5e1/clock.h **** 
1956:src-gen/sr5e1/clock.h **** /**
1957:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOA clock
1958:src-gen/sr5e1/clock.h ****  *
1959:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1960:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1961:src-gen/sr5e1/clock.h ****  *
1962:src-gen/sr5e1/clock.h ****  * @api
1963:src-gen/sr5e1/clock.h ****  */
1964:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOA(bool smode) {
1965:src-gen/sr5e1/clock.h **** 
1966:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOA);
1967:src-gen/sr5e1/clock.h **** }
1968:src-gen/sr5e1/clock.h **** 
1969:src-gen/sr5e1/clock.h **** /**
1970:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOA clock
1971:src-gen/sr5e1/clock.h ****  *
1972:src-gen/sr5e1/clock.h ****  * @api
1973:src-gen/sr5e1/clock.h ****  */
1974:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOA(void) {
1975:src-gen/sr5e1/clock.h **** 
1976:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOA);
1977:src-gen/sr5e1/clock.h **** }
1978:src-gen/sr5e1/clock.h **** 
1979:src-gen/sr5e1/clock.h **** /**
1980:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOA clock is enabled
1981:src-gen/sr5e1/clock.h ****  *
1982:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1983:src-gen/sr5e1/clock.h ****  *
1984:src-gen/sr5e1/clock.h ****  * @api
1985:src-gen/sr5e1/clock.h ****  */
1986:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOA(void) {
1987:src-gen/sr5e1/clock.h **** 
1988:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOA);
1989:src-gen/sr5e1/clock.h **** }
1990:src-gen/sr5e1/clock.h **** 
1991:src-gen/sr5e1/clock.h **** /**
1992:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOA
1993:src-gen/sr5e1/clock.h ****  *
1994:src-gen/sr5e1/clock.h ****  * @api
1995:src-gen/sr5e1/clock.h ****  */
1996:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOA(void) {
1997:src-gen/sr5e1/clock.h **** 
1998:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOA);
1999:src-gen/sr5e1/clock.h **** }
2000:src-gen/sr5e1/clock.h **** 
2001:src-gen/sr5e1/clock.h **** /**
2002:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOB clock
2003:src-gen/sr5e1/clock.h ****  *
2004:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2005:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2006:src-gen/sr5e1/clock.h ****  *
2007:src-gen/sr5e1/clock.h ****  * @api
2008:src-gen/sr5e1/clock.h ****  */
2009:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOB(bool smode) {
2010:src-gen/sr5e1/clock.h **** 
2011:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOB);
2012:src-gen/sr5e1/clock.h **** }
2013:src-gen/sr5e1/clock.h **** 
2014:src-gen/sr5e1/clock.h **** /**
2015:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOB clock
2016:src-gen/sr5e1/clock.h ****  *
2017:src-gen/sr5e1/clock.h ****  * @api
2018:src-gen/sr5e1/clock.h ****  */
2019:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOB(void) {
2020:src-gen/sr5e1/clock.h **** 
2021:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOB);
2022:src-gen/sr5e1/clock.h **** }
2023:src-gen/sr5e1/clock.h **** 
2024:src-gen/sr5e1/clock.h **** /**
2025:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOB clock is enabled
2026:src-gen/sr5e1/clock.h ****  *
2027:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2028:src-gen/sr5e1/clock.h ****  *
2029:src-gen/sr5e1/clock.h ****  * @api
2030:src-gen/sr5e1/clock.h ****  */
2031:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOB(void) {
2032:src-gen/sr5e1/clock.h **** 
2033:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOB);
2034:src-gen/sr5e1/clock.h **** }
2035:src-gen/sr5e1/clock.h **** 
2036:src-gen/sr5e1/clock.h **** /**
2037:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOB
2038:src-gen/sr5e1/clock.h ****  *
2039:src-gen/sr5e1/clock.h ****  * @api
2040:src-gen/sr5e1/clock.h ****  */
2041:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOB(void) {
2042:src-gen/sr5e1/clock.h **** 
2043:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOB);
2044:src-gen/sr5e1/clock.h **** }
2045:src-gen/sr5e1/clock.h **** 
2046:src-gen/sr5e1/clock.h **** /**
2047:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOC clock
2048:src-gen/sr5e1/clock.h ****  *
2049:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2050:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2051:src-gen/sr5e1/clock.h ****  *
2052:src-gen/sr5e1/clock.h ****  * @api
2053:src-gen/sr5e1/clock.h ****  */
2054:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOC(bool smode) {
2055:src-gen/sr5e1/clock.h **** 
2056:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOC);
2057:src-gen/sr5e1/clock.h **** }
2058:src-gen/sr5e1/clock.h **** 
2059:src-gen/sr5e1/clock.h **** /**
2060:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOC clock
2061:src-gen/sr5e1/clock.h ****  *
2062:src-gen/sr5e1/clock.h ****  * @api
2063:src-gen/sr5e1/clock.h ****  */
2064:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOC(void) {
2065:src-gen/sr5e1/clock.h **** 
2066:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOC);
2067:src-gen/sr5e1/clock.h **** }
2068:src-gen/sr5e1/clock.h **** 
2069:src-gen/sr5e1/clock.h **** /**
2070:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOC clock is enabled
2071:src-gen/sr5e1/clock.h ****  *
2072:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2073:src-gen/sr5e1/clock.h ****  *
2074:src-gen/sr5e1/clock.h ****  * @api
2075:src-gen/sr5e1/clock.h ****  */
2076:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOC(void) {
2077:src-gen/sr5e1/clock.h **** 
2078:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOC);
2079:src-gen/sr5e1/clock.h **** }
2080:src-gen/sr5e1/clock.h **** 
2081:src-gen/sr5e1/clock.h **** /**
2082:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOC
2083:src-gen/sr5e1/clock.h ****  *
2084:src-gen/sr5e1/clock.h ****  * @api
2085:src-gen/sr5e1/clock.h ****  */
2086:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOC(void) {
2087:src-gen/sr5e1/clock.h **** 
2088:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOC);
2089:src-gen/sr5e1/clock.h **** }
2090:src-gen/sr5e1/clock.h **** 
2091:src-gen/sr5e1/clock.h **** /**
2092:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOD clock
2093:src-gen/sr5e1/clock.h ****  *
2094:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2095:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2096:src-gen/sr5e1/clock.h ****  *
2097:src-gen/sr5e1/clock.h ****  * @api
2098:src-gen/sr5e1/clock.h ****  */
2099:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOD(bool smode) {
2100:src-gen/sr5e1/clock.h **** 
2101:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOD);
2102:src-gen/sr5e1/clock.h **** }
2103:src-gen/sr5e1/clock.h **** 
2104:src-gen/sr5e1/clock.h **** /**
2105:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOD clock
2106:src-gen/sr5e1/clock.h ****  *
2107:src-gen/sr5e1/clock.h ****  * @api
2108:src-gen/sr5e1/clock.h ****  */
2109:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOD(void) {
2110:src-gen/sr5e1/clock.h **** 
2111:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOD);
2112:src-gen/sr5e1/clock.h **** }
2113:src-gen/sr5e1/clock.h **** 
2114:src-gen/sr5e1/clock.h **** /**
2115:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOD clock is enabled
2116:src-gen/sr5e1/clock.h ****  *
2117:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2118:src-gen/sr5e1/clock.h ****  *
2119:src-gen/sr5e1/clock.h ****  * @api
2120:src-gen/sr5e1/clock.h ****  */
2121:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOD(void) {
2122:src-gen/sr5e1/clock.h **** 
2123:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOD);
2124:src-gen/sr5e1/clock.h **** }
2125:src-gen/sr5e1/clock.h ****  
2126:src-gen/sr5e1/clock.h **** /**
2127:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOD
2128:src-gen/sr5e1/clock.h ****  *
2129:src-gen/sr5e1/clock.h ****  * @api
2130:src-gen/sr5e1/clock.h ****  */
2131:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOD(void) {
2132:src-gen/sr5e1/clock.h **** 
2133:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOD);
2134:src-gen/sr5e1/clock.h **** }
2135:src-gen/sr5e1/clock.h **** 
2136:src-gen/sr5e1/clock.h **** /**
2137:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOE clock
2138:src-gen/sr5e1/clock.h ****  *
2139:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2140:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2141:src-gen/sr5e1/clock.h ****  *
2142:src-gen/sr5e1/clock.h ****  * @api
2143:src-gen/sr5e1/clock.h ****  */
2144:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOE(bool smode) {
2145:src-gen/sr5e1/clock.h **** 
2146:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOE);
2147:src-gen/sr5e1/clock.h **** }
2148:src-gen/sr5e1/clock.h **** 
2149:src-gen/sr5e1/clock.h **** /**
2150:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOE clock
2151:src-gen/sr5e1/clock.h ****  *
2152:src-gen/sr5e1/clock.h ****  * @api
2153:src-gen/sr5e1/clock.h ****  */
2154:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOE(void) {
2155:src-gen/sr5e1/clock.h **** 
2156:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOE);
2157:src-gen/sr5e1/clock.h **** }
2158:src-gen/sr5e1/clock.h **** 
2159:src-gen/sr5e1/clock.h **** /**
2160:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOE clock is enabled
2161:src-gen/sr5e1/clock.h ****  *
2162:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2163:src-gen/sr5e1/clock.h ****  *
2164:src-gen/sr5e1/clock.h ****  * @api
2165:src-gen/sr5e1/clock.h ****  */
2166:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOE(void) {
2167:src-gen/sr5e1/clock.h **** 
2168:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOE);
2169:src-gen/sr5e1/clock.h **** }
2170:src-gen/sr5e1/clock.h **** 
2171:src-gen/sr5e1/clock.h **** /**
2172:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOE
2173:src-gen/sr5e1/clock.h ****  *
2174:src-gen/sr5e1/clock.h ****  * @api
2175:src-gen/sr5e1/clock.h ****  */
2176:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOE(void) {
2177:src-gen/sr5e1/clock.h **** 
2178:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOE);
2179:src-gen/sr5e1/clock.h **** }
2180:src-gen/sr5e1/clock.h **** 
2181:src-gen/sr5e1/clock.h **** /**
2182:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOF clock
2183:src-gen/sr5e1/clock.h ****  *
2184:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2185:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2186:src-gen/sr5e1/clock.h ****  *
2187:src-gen/sr5e1/clock.h ****  * @api
2188:src-gen/sr5e1/clock.h ****  */
2189:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOF(bool smode) {
2190:src-gen/sr5e1/clock.h **** 
2191:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOF);
2192:src-gen/sr5e1/clock.h **** }
2193:src-gen/sr5e1/clock.h **** 
2194:src-gen/sr5e1/clock.h **** /**
2195:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOF clock
2196:src-gen/sr5e1/clock.h ****  *
2197:src-gen/sr5e1/clock.h ****  * @api
2198:src-gen/sr5e1/clock.h ****  */
2199:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOF(void) {
2200:src-gen/sr5e1/clock.h **** 
2201:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOF);
2202:src-gen/sr5e1/clock.h **** }
2203:src-gen/sr5e1/clock.h **** 
2204:src-gen/sr5e1/clock.h **** /**
2205:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOF clock is enabled
2206:src-gen/sr5e1/clock.h ****  *
2207:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2208:src-gen/sr5e1/clock.h ****  *
2209:src-gen/sr5e1/clock.h ****  * @api
2210:src-gen/sr5e1/clock.h ****  */
2211:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOF(void) {
2212:src-gen/sr5e1/clock.h **** 
2213:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOF);
2214:src-gen/sr5e1/clock.h **** }
2215:src-gen/sr5e1/clock.h **** 
2216:src-gen/sr5e1/clock.h **** /**
2217:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOF
2218:src-gen/sr5e1/clock.h ****  *
2219:src-gen/sr5e1/clock.h ****  * @api
2220:src-gen/sr5e1/clock.h ****  */
2221:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOF(void) {
2222:src-gen/sr5e1/clock.h **** 
2223:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOF);
2224:src-gen/sr5e1/clock.h **** }
2225:src-gen/sr5e1/clock.h **** 
2226:src-gen/sr5e1/clock.h **** /**
2227:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOG clock
2228:src-gen/sr5e1/clock.h ****  *
2229:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2230:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2231:src-gen/sr5e1/clock.h ****  *
2232:src-gen/sr5e1/clock.h ****  * @api
2233:src-gen/sr5e1/clock.h ****  */
2234:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOG(bool smode) {
2235:src-gen/sr5e1/clock.h **** 
2236:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOG);
2237:src-gen/sr5e1/clock.h **** }
2238:src-gen/sr5e1/clock.h **** 
2239:src-gen/sr5e1/clock.h **** /**
2240:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOG clock
2241:src-gen/sr5e1/clock.h ****  *
2242:src-gen/sr5e1/clock.h ****  * @api
2243:src-gen/sr5e1/clock.h ****  */
2244:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOG(void) {
2245:src-gen/sr5e1/clock.h **** 
2246:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOG);
2247:src-gen/sr5e1/clock.h **** }
2248:src-gen/sr5e1/clock.h **** 
2249:src-gen/sr5e1/clock.h **** /**
2250:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOG clock is enabled
2251:src-gen/sr5e1/clock.h ****  *
2252:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2253:src-gen/sr5e1/clock.h ****  *
2254:src-gen/sr5e1/clock.h ****  * @api
2255:src-gen/sr5e1/clock.h ****  */
2256:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOG(void) {
2257:src-gen/sr5e1/clock.h **** 
2258:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOG);
2259:src-gen/sr5e1/clock.h **** }
2260:src-gen/sr5e1/clock.h **** 
2261:src-gen/sr5e1/clock.h **** /**
2262:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOG
2263:src-gen/sr5e1/clock.h ****  *
2264:src-gen/sr5e1/clock.h ****  * @api
2265:src-gen/sr5e1/clock.h ****  */
2266:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOG(void) {
2267:src-gen/sr5e1/clock.h **** 
2268:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOG);
2269:src-gen/sr5e1/clock.h **** }
2270:src-gen/sr5e1/clock.h **** 
2271:src-gen/sr5e1/clock.h **** /**
2272:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOH clock
2273:src-gen/sr5e1/clock.h ****  *
2274:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2275:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2276:src-gen/sr5e1/clock.h ****  *
2277:src-gen/sr5e1/clock.h ****  * @api
2278:src-gen/sr5e1/clock.h ****  */
2279:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOH(bool smode) {
2280:src-gen/sr5e1/clock.h **** 
2281:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOH);
2282:src-gen/sr5e1/clock.h **** }
2283:src-gen/sr5e1/clock.h **** 
2284:src-gen/sr5e1/clock.h **** /**
2285:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOH clock
2286:src-gen/sr5e1/clock.h ****  *
2287:src-gen/sr5e1/clock.h ****  * @api
2288:src-gen/sr5e1/clock.h ****  */
2289:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOH(void) {
2290:src-gen/sr5e1/clock.h **** 
2291:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOH);
2292:src-gen/sr5e1/clock.h **** }
2293:src-gen/sr5e1/clock.h **** 
2294:src-gen/sr5e1/clock.h **** /**
2295:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOH clock is enabled
2296:src-gen/sr5e1/clock.h ****  *
2297:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2298:src-gen/sr5e1/clock.h ****  *
2299:src-gen/sr5e1/clock.h ****  * @api
2300:src-gen/sr5e1/clock.h ****  */
2301:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOH(void) {
2302:src-gen/sr5e1/clock.h **** 
2303:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOH);
2304:src-gen/sr5e1/clock.h **** }
2305:src-gen/sr5e1/clock.h **** 
2306:src-gen/sr5e1/clock.h **** /**
2307:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOH
2308:src-gen/sr5e1/clock.h ****  *
2309:src-gen/sr5e1/clock.h ****  * @api
2310:src-gen/sr5e1/clock.h ****  */
2311:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOH(void) {
2312:src-gen/sr5e1/clock.h **** 
2313:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOH);
2314:src-gen/sr5e1/clock.h **** }
2315:src-gen/sr5e1/clock.h **** 
2316:src-gen/sr5e1/clock.h **** /**
2317:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOI clock
2318:src-gen/sr5e1/clock.h ****  *
2319:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2320:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2321:src-gen/sr5e1/clock.h ****  *
2322:src-gen/sr5e1/clock.h ****  * @api
2323:src-gen/sr5e1/clock.h ****  */
2324:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOI(bool smode) {
2325:src-gen/sr5e1/clock.h **** 
2326:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOI);
2327:src-gen/sr5e1/clock.h **** }
2328:src-gen/sr5e1/clock.h **** 
2329:src-gen/sr5e1/clock.h **** /**
2330:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOI clock
2331:src-gen/sr5e1/clock.h ****  *
2332:src-gen/sr5e1/clock.h ****  * @api
2333:src-gen/sr5e1/clock.h ****  */
2334:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOI(void) {
2335:src-gen/sr5e1/clock.h **** 
2336:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOI);
2337:src-gen/sr5e1/clock.h **** }
2338:src-gen/sr5e1/clock.h **** 
2339:src-gen/sr5e1/clock.h **** /**
2340:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOI clock is enabled
2341:src-gen/sr5e1/clock.h ****  *
2342:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2343:src-gen/sr5e1/clock.h ****  *
2344:src-gen/sr5e1/clock.h ****  * @api
2345:src-gen/sr5e1/clock.h ****  */
2346:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOI(void) {
2347:src-gen/sr5e1/clock.h **** 
2348:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOI);
2349:src-gen/sr5e1/clock.h **** }
2350:src-gen/sr5e1/clock.h **** 
2351:src-gen/sr5e1/clock.h **** /**
2352:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOI
2353:src-gen/sr5e1/clock.h ****  *
2354:src-gen/sr5e1/clock.h ****  * @api
2355:src-gen/sr5e1/clock.h ****  */
2356:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOI(void) {
2357:src-gen/sr5e1/clock.h **** 
2358:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOI);
2359:src-gen/sr5e1/clock.h **** }
2360:src-gen/sr5e1/clock.h **** 
2361:src-gen/sr5e1/clock.h **** /**
2362:src-gen/sr5e1/clock.h ****  * @brief   Enables BDAC1 clock
2363:src-gen/sr5e1/clock.h ****  *
2364:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2365:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2366:src-gen/sr5e1/clock.h ****  *
2367:src-gen/sr5e1/clock.h ****  * @api
2368:src-gen/sr5e1/clock.h ****  */
2369:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_BDAC1(bool smode) {
2370:src-gen/sr5e1/clock.h **** 
2371:src-gen/sr5e1/clock.h ****     clock_enable_AHB2H(smode, RCC_AHB2HENR_BDAC1);
2372:src-gen/sr5e1/clock.h **** }
2373:src-gen/sr5e1/clock.h **** 
2374:src-gen/sr5e1/clock.h **** /**
2375:src-gen/sr5e1/clock.h ****  * @brief   Disables BDAC1 clock
2376:src-gen/sr5e1/clock.h ****  *
2377:src-gen/sr5e1/clock.h ****  * @api
2378:src-gen/sr5e1/clock.h ****  */
2379:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_BDAC1(void) {
2380:src-gen/sr5e1/clock.h **** 
2381:src-gen/sr5e1/clock.h ****     clock_disable_AHB2H(RCC_AHB2HENR_BDAC1);
2382:src-gen/sr5e1/clock.h **** }
2383:src-gen/sr5e1/clock.h **** 
2384:src-gen/sr5e1/clock.h **** /**
2385:src-gen/sr5e1/clock.h ****  * @brief   Checks if BDAC1 clock is enabled
2386:src-gen/sr5e1/clock.h ****  *
2387:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2388:src-gen/sr5e1/clock.h ****  *
2389:src-gen/sr5e1/clock.h ****  * @api
2390:src-gen/sr5e1/clock.h ****  */
2391:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_BDAC1(void) {
2392:src-gen/sr5e1/clock.h **** 
2393:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2H(RCC_AHB2HENR_BDAC1);
2394:src-gen/sr5e1/clock.h **** }
2395:src-gen/sr5e1/clock.h **** 
2396:src-gen/sr5e1/clock.h **** /**
2397:src-gen/sr5e1/clock.h ****  * @brief   Resets BDAC1
2398:src-gen/sr5e1/clock.h ****  *
2399:src-gen/sr5e1/clock.h ****  * @api
2400:src-gen/sr5e1/clock.h ****  */
2401:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_BDAC1(void) {
2402:src-gen/sr5e1/clock.h **** 
2403:src-gen/sr5e1/clock.h ****     clock_reset_AHB2H(RCC_AHB2HRSTR_BDAC1);
2404:src-gen/sr5e1/clock.h **** }
2405:src-gen/sr5e1/clock.h **** 
2406:src-gen/sr5e1/clock.h **** /**
2407:src-gen/sr5e1/clock.h ****  * @brief   Enables DAC1 clock
2408:src-gen/sr5e1/clock.h ****  *
2409:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2410:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2411:src-gen/sr5e1/clock.h ****  *
2412:src-gen/sr5e1/clock.h ****  * @api
2413:src-gen/sr5e1/clock.h ****  */
2414:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DAC1(bool smode) {
2415:src-gen/sr5e1/clock.h **** 
2416:src-gen/sr5e1/clock.h ****     clock_enable_AHB2H(smode, RCC_AHB2HENR_DAC1);
2417:src-gen/sr5e1/clock.h **** }
2418:src-gen/sr5e1/clock.h **** 
2419:src-gen/sr5e1/clock.h **** /**
2420:src-gen/sr5e1/clock.h ****  * @brief   Disables DAC1 clock
2421:src-gen/sr5e1/clock.h ****  *
2422:src-gen/sr5e1/clock.h ****  * @api
2423:src-gen/sr5e1/clock.h ****  */
2424:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DAC1(void) {
2425:src-gen/sr5e1/clock.h **** 
2426:src-gen/sr5e1/clock.h ****     clock_disable_AHB2H(RCC_AHB2HENR_DAC1);
2427:src-gen/sr5e1/clock.h **** }
2428:src-gen/sr5e1/clock.h **** 
2429:src-gen/sr5e1/clock.h **** /**
2430:src-gen/sr5e1/clock.h ****  * @brief   Checks if DAC1 clock is enabled
2431:src-gen/sr5e1/clock.h ****  *
2432:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2433:src-gen/sr5e1/clock.h ****  *
2434:src-gen/sr5e1/clock.h ****  * @api
2435:src-gen/sr5e1/clock.h ****  */
2436:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DAC1(void) {
2437:src-gen/sr5e1/clock.h **** 
2438:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2H(RCC_AHB2HENR_DAC1);
2439:src-gen/sr5e1/clock.h **** }
2440:src-gen/sr5e1/clock.h **** 
2441:src-gen/sr5e1/clock.h **** /**
2442:src-gen/sr5e1/clock.h ****  * @brief   Resets DAC1
2443:src-gen/sr5e1/clock.h ****  *
2444:src-gen/sr5e1/clock.h ****  * @api
2445:src-gen/sr5e1/clock.h ****  */
2446:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DAC1(void) {
2447:src-gen/sr5e1/clock.h **** 
2448:src-gen/sr5e1/clock.h ****     clock_reset_AHB2H(RCC_AHB2HRSTR_DAC1);
2449:src-gen/sr5e1/clock.h **** }
2450:src-gen/sr5e1/clock.h **** 
2451:src-gen/sr5e1/clock.h **** /**
2452:src-gen/sr5e1/clock.h ****  * @brief   Enables DAC2 clock
2453:src-gen/sr5e1/clock.h ****  *
2454:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2455:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2456:src-gen/sr5e1/clock.h ****  *
2457:src-gen/sr5e1/clock.h ****  * @api
2458:src-gen/sr5e1/clock.h ****  */
2459:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DAC2(bool smode) {
2460:src-gen/sr5e1/clock.h **** 
2461:src-gen/sr5e1/clock.h ****     clock_enable_AHB2H(smode, RCC_AHB2HENR_DAC2);
2462:src-gen/sr5e1/clock.h **** }
2463:src-gen/sr5e1/clock.h **** 
2464:src-gen/sr5e1/clock.h **** /**
2465:src-gen/sr5e1/clock.h ****  * @brief   Disables DAC2 clock
2466:src-gen/sr5e1/clock.h ****  *
2467:src-gen/sr5e1/clock.h ****  * @api
2468:src-gen/sr5e1/clock.h ****  */
2469:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DAC2(void) {
2470:src-gen/sr5e1/clock.h **** 
2471:src-gen/sr5e1/clock.h ****     clock_disable_AHB2H(RCC_AHB2HENR_DAC2);
2472:src-gen/sr5e1/clock.h **** }
2473:src-gen/sr5e1/clock.h **** 
2474:src-gen/sr5e1/clock.h **** /**
2475:src-gen/sr5e1/clock.h ****  * @brief   Checks if DAC2 clock is enabled
2476:src-gen/sr5e1/clock.h ****  *
2477:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2478:src-gen/sr5e1/clock.h ****  *
2479:src-gen/sr5e1/clock.h ****  * @api
2480:src-gen/sr5e1/clock.h ****  */
2481:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DAC2(void) {
2482:src-gen/sr5e1/clock.h **** 
2483:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2H(RCC_AHB2HENR_DAC2);
2484:src-gen/sr5e1/clock.h **** }
2485:src-gen/sr5e1/clock.h **** 
2486:src-gen/sr5e1/clock.h **** /**
2487:src-gen/sr5e1/clock.h ****  * @brief   Resets DAC2
2488:src-gen/sr5e1/clock.h ****  *
2489:src-gen/sr5e1/clock.h ****  * @api
2490:src-gen/sr5e1/clock.h ****  */
2491:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DAC2(void) {
2492:src-gen/sr5e1/clock.h **** 
2493:src-gen/sr5e1/clock.h ****     clock_reset_AHB2H(RCC_AHB2HRSTR_DAC2);
2494:src-gen/sr5e1/clock.h **** }
2495:src-gen/sr5e1/clock.h **** 
2496:src-gen/sr5e1/clock.h **** /**
2497:src-gen/sr5e1/clock.h ****  * @brief   Enables DAC3 clock
2498:src-gen/sr5e1/clock.h ****  *
2499:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2500:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2501:src-gen/sr5e1/clock.h ****  *
2502:src-gen/sr5e1/clock.h ****  * @api
2503:src-gen/sr5e1/clock.h ****  */
2504:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DAC3(bool smode) {
2505:src-gen/sr5e1/clock.h **** 
2506:src-gen/sr5e1/clock.h ****     clock_enable_AHB1H(smode, RCC_AHB1HENR_DAC3);
2507:src-gen/sr5e1/clock.h **** }
2508:src-gen/sr5e1/clock.h **** 
2509:src-gen/sr5e1/clock.h **** /**
2510:src-gen/sr5e1/clock.h ****  * @brief   Disables DAC3 clock
2511:src-gen/sr5e1/clock.h ****  *
2512:src-gen/sr5e1/clock.h ****  * @api
2513:src-gen/sr5e1/clock.h ****  */
2514:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DAC3(void) {
2515:src-gen/sr5e1/clock.h **** 
2516:src-gen/sr5e1/clock.h ****     clock_disable_AHB1H(RCC_AHB1HENR_DAC3);
2517:src-gen/sr5e1/clock.h **** }
2518:src-gen/sr5e1/clock.h **** 
2519:src-gen/sr5e1/clock.h **** /**
2520:src-gen/sr5e1/clock.h ****  * @brief   Checks if DAC3 clock is enabled
2521:src-gen/sr5e1/clock.h ****  *
2522:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2523:src-gen/sr5e1/clock.h ****  *
2524:src-gen/sr5e1/clock.h ****  * @api
2525:src-gen/sr5e1/clock.h ****  */
2526:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DAC3(void) {
2527:src-gen/sr5e1/clock.h **** 
2528:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1H(RCC_AHB1HENR_DAC3);
2529:src-gen/sr5e1/clock.h **** }
2530:src-gen/sr5e1/clock.h **** 
2531:src-gen/sr5e1/clock.h **** /**
2532:src-gen/sr5e1/clock.h ****  * @brief   Resets DAC3
2533:src-gen/sr5e1/clock.h ****  *
2534:src-gen/sr5e1/clock.h ****  * @api
2535:src-gen/sr5e1/clock.h ****  */
2536:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DAC3(void) {
2537:src-gen/sr5e1/clock.h **** 
2538:src-gen/sr5e1/clock.h ****     clock_reset_AHB1H(RCC_AHB1HRSTR_DAC3);
2539:src-gen/sr5e1/clock.h **** }
2540:src-gen/sr5e1/clock.h **** 
2541:src-gen/sr5e1/clock.h **** /**
2542:src-gen/sr5e1/clock.h ****  * @brief   Enables DAC4 clock
2543:src-gen/sr5e1/clock.h ****  *
2544:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2545:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2546:src-gen/sr5e1/clock.h ****  *
2547:src-gen/sr5e1/clock.h ****  * @api
2548:src-gen/sr5e1/clock.h ****  */
2549:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DAC4(bool smode) {
2550:src-gen/sr5e1/clock.h **** 
2551:src-gen/sr5e1/clock.h ****     clock_enable_AHB1H(smode, RCC_AHB1HENR_DAC4);
2552:src-gen/sr5e1/clock.h **** }
2553:src-gen/sr5e1/clock.h **** 
2554:src-gen/sr5e1/clock.h **** /**
2555:src-gen/sr5e1/clock.h ****  * @brief   Disables DAC4 clock
2556:src-gen/sr5e1/clock.h ****  *
2557:src-gen/sr5e1/clock.h ****  * @api
2558:src-gen/sr5e1/clock.h ****  */
2559:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DAC4(void) {
2560:src-gen/sr5e1/clock.h **** 
2561:src-gen/sr5e1/clock.h ****     clock_disable_AHB1H(RCC_AHB1HENR_DAC4);
2562:src-gen/sr5e1/clock.h **** }
2563:src-gen/sr5e1/clock.h **** 
2564:src-gen/sr5e1/clock.h **** /**
2565:src-gen/sr5e1/clock.h ****  * @brief   Checks if DAC4 clock is enabled
2566:src-gen/sr5e1/clock.h ****  *
2567:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2568:src-gen/sr5e1/clock.h ****  *
2569:src-gen/sr5e1/clock.h ****  * @api
2570:src-gen/sr5e1/clock.h ****  */
2571:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DAC4(void) {
2572:src-gen/sr5e1/clock.h **** 
2573:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1H(RCC_AHB1HENR_DAC4);
2574:src-gen/sr5e1/clock.h **** }
2575:src-gen/sr5e1/clock.h **** 
2576:src-gen/sr5e1/clock.h **** /**
2577:src-gen/sr5e1/clock.h ****  * @brief   Resets DAC4
2578:src-gen/sr5e1/clock.h ****  *
2579:src-gen/sr5e1/clock.h ****  * @api
2580:src-gen/sr5e1/clock.h ****  */
2581:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DAC4(void) {
2582:src-gen/sr5e1/clock.h **** 
2583:src-gen/sr5e1/clock.h ****     clock_reset_AHB1H(RCC_AHB1HRSTR_DAC4);
2584:src-gen/sr5e1/clock.h **** }
2585:src-gen/sr5e1/clock.h **** 
2586:src-gen/sr5e1/clock.h **** /**
2587:src-gen/sr5e1/clock.h ****  * @brief   Enables COMP1 clock
2588:src-gen/sr5e1/clock.h ****  *
2589:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2590:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2591:src-gen/sr5e1/clock.h ****  *
2592:src-gen/sr5e1/clock.h ****  * @api
2593:src-gen/sr5e1/clock.h ****  */
2594:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_COMP1(bool smode) {
2595:src-gen/sr5e1/clock.h **** 
2596:src-gen/sr5e1/clock.h ****     clock_enable_AHB2H(smode, RCC_AHB2HENR_COMP1_DIG);
2597:src-gen/sr5e1/clock.h **** }
2598:src-gen/sr5e1/clock.h **** 
2599:src-gen/sr5e1/clock.h **** /**
2600:src-gen/sr5e1/clock.h ****  * @brief   Disables COMP1 clock
2601:src-gen/sr5e1/clock.h ****  *
2602:src-gen/sr5e1/clock.h ****  * @api
2603:src-gen/sr5e1/clock.h ****  */
2604:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_COMP1(void) {
2605:src-gen/sr5e1/clock.h **** 
2606:src-gen/sr5e1/clock.h ****     clock_disable_AHB2H(RCC_AHB2HENR_COMP1_DIG);
2607:src-gen/sr5e1/clock.h **** }
2608:src-gen/sr5e1/clock.h **** 
2609:src-gen/sr5e1/clock.h **** /**
2610:src-gen/sr5e1/clock.h ****  * @brief   Checks if COMP1 clock is enabled
2611:src-gen/sr5e1/clock.h ****  *
2612:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2613:src-gen/sr5e1/clock.h ****  *
2614:src-gen/sr5e1/clock.h ****  * @api
2615:src-gen/sr5e1/clock.h ****  */
2616:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_COMP1(void) {
2617:src-gen/sr5e1/clock.h **** 
2618:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2H(RCC_AHB2HENR_COMP1_DIG);
2619:src-gen/sr5e1/clock.h **** }
2620:src-gen/sr5e1/clock.h **** 
2621:src-gen/sr5e1/clock.h **** /**
2622:src-gen/sr5e1/clock.h ****  * @brief   Resets COMP1
2623:src-gen/sr5e1/clock.h ****  *
2624:src-gen/sr5e1/clock.h ****  * @api
2625:src-gen/sr5e1/clock.h ****  */
2626:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_COMP1(void) {
2627:src-gen/sr5e1/clock.h **** 
2628:src-gen/sr5e1/clock.h ****     clock_reset_AHB2H(RCC_AHB2HRSTR_COMP1_DIG);
2629:src-gen/sr5e1/clock.h **** }
2630:src-gen/sr5e1/clock.h **** 
2631:src-gen/sr5e1/clock.h **** /**
2632:src-gen/sr5e1/clock.h ****  * @brief   Enables COMP2 clock
2633:src-gen/sr5e1/clock.h ****  *
2634:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2635:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2636:src-gen/sr5e1/clock.h ****  *
2637:src-gen/sr5e1/clock.h ****  * @api
2638:src-gen/sr5e1/clock.h ****  */
2639:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_COMP2(bool smode) {
2640:src-gen/sr5e1/clock.h **** 
2641:src-gen/sr5e1/clock.h ****     clock_enable_AHB1H(smode, RCC_AHB1HENR_COMP2_DIG);
2642:src-gen/sr5e1/clock.h **** }
2643:src-gen/sr5e1/clock.h **** 
2644:src-gen/sr5e1/clock.h **** /**
2645:src-gen/sr5e1/clock.h ****  * @brief   Disables COMP2 clock
2646:src-gen/sr5e1/clock.h ****  *
2647:src-gen/sr5e1/clock.h ****  * @api
2648:src-gen/sr5e1/clock.h ****  */
2649:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_COMP2(void) {
2650:src-gen/sr5e1/clock.h **** 
2651:src-gen/sr5e1/clock.h ****     clock_disable_AHB1H(RCC_AHB1HENR_COMP2_DIG);
2652:src-gen/sr5e1/clock.h **** }
2653:src-gen/sr5e1/clock.h **** 
2654:src-gen/sr5e1/clock.h **** /**
2655:src-gen/sr5e1/clock.h ****  * @brief   Checks if COMP2 clock is enabled
2656:src-gen/sr5e1/clock.h ****  *
2657:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2658:src-gen/sr5e1/clock.h ****  *
2659:src-gen/sr5e1/clock.h ****  * @api
2660:src-gen/sr5e1/clock.h ****  */
2661:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_COMP2(void) {
2662:src-gen/sr5e1/clock.h **** 
2663:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1H(RCC_AHB1HENR_COMP2_DIG);
2664:src-gen/sr5e1/clock.h **** }
2665:src-gen/sr5e1/clock.h **** 
2666:src-gen/sr5e1/clock.h **** /**
2667:src-gen/sr5e1/clock.h ****  * @brief   Resets COMP2
2668:src-gen/sr5e1/clock.h ****  *
2669:src-gen/sr5e1/clock.h ****  * @api
2670:src-gen/sr5e1/clock.h ****  */
2671:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_COMP2(void) {
2672:src-gen/sr5e1/clock.h **** 
2673:src-gen/sr5e1/clock.h ****     clock_reset_AHB1H(RCC_AHB1HRSTR_COMP2_DIG);
2674:src-gen/sr5e1/clock.h **** }
2675:src-gen/sr5e1/clock.h **** 
2676:src-gen/sr5e1/clock.h **** /**
2677:src-gen/sr5e1/clock.h ****  * @brief   Enables HRTIM1 clock
2678:src-gen/sr5e1/clock.h ****  *
2679:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2680:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2681:src-gen/sr5e1/clock.h ****  *
2682:src-gen/sr5e1/clock.h ****  * @api
2683:src-gen/sr5e1/clock.h ****  */
2684:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_HRTIM1(bool smode) {
2685:src-gen/sr5e1/clock.h **** 
2686:src-gen/sr5e1/clock.h ****     clock_enable_AHB1H(smode, RCC_AHB1HENR_HRTIMER1);
2687:src-gen/sr5e1/clock.h **** }
2688:src-gen/sr5e1/clock.h **** 
2689:src-gen/sr5e1/clock.h **** /**
2690:src-gen/sr5e1/clock.h ****  * @brief   Disables HRTIM1 clock
2691:src-gen/sr5e1/clock.h ****  *
2692:src-gen/sr5e1/clock.h ****  * @api
2693:src-gen/sr5e1/clock.h ****  */
2694:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_HRTIM1(void) {
2695:src-gen/sr5e1/clock.h **** 
2696:src-gen/sr5e1/clock.h ****     clock_disable_AHB1H(RCC_AHB1HENR_HRTIMER1);
2697:src-gen/sr5e1/clock.h **** }
2698:src-gen/sr5e1/clock.h **** 
2699:src-gen/sr5e1/clock.h **** /**
2700:src-gen/sr5e1/clock.h ****  * @brief   Checks if HRTIM1 clock is enabled
2701:src-gen/sr5e1/clock.h ****  *
2702:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2703:src-gen/sr5e1/clock.h ****  *
2704:src-gen/sr5e1/clock.h ****  * @api
2705:src-gen/sr5e1/clock.h ****  */
2706:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_HRTIM1(void) {
2707:src-gen/sr5e1/clock.h **** 
2708:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1H(RCC_AHB1HENR_HRTIMER1);
2709:src-gen/sr5e1/clock.h **** }
2710:src-gen/sr5e1/clock.h **** 
2711:src-gen/sr5e1/clock.h **** /**
2712:src-gen/sr5e1/clock.h ****  * @brief   Resets HRTIM1
2713:src-gen/sr5e1/clock.h ****  *
2714:src-gen/sr5e1/clock.h ****  * @api
2715:src-gen/sr5e1/clock.h ****  */
2716:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_HRTIM1(void) {
2717:src-gen/sr5e1/clock.h **** 
2718:src-gen/sr5e1/clock.h ****     clock_reset_AHB1H(RCC_AHB1HRSTR_HRTIMER1);
2719:src-gen/sr5e1/clock.h **** }
2720:src-gen/sr5e1/clock.h **** 
2721:src-gen/sr5e1/clock.h **** /**
2722:src-gen/sr5e1/clock.h ****  * @brief   Enables HRTIM2 clock
2723:src-gen/sr5e1/clock.h ****  *
2724:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2725:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2726:src-gen/sr5e1/clock.h ****  *
2727:src-gen/sr5e1/clock.h ****  * @api
2728:src-gen/sr5e1/clock.h ****  */
2729:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_HRTIM2(bool smode) {
2730:src-gen/sr5e1/clock.h **** 
2731:src-gen/sr5e1/clock.h ****     clock_enable_AHB1H(smode, RCC_AHB1HENR_HRTIMER2);
2732:src-gen/sr5e1/clock.h **** }
2733:src-gen/sr5e1/clock.h **** 
2734:src-gen/sr5e1/clock.h **** /**
2735:src-gen/sr5e1/clock.h ****  * @brief   Disables HRTIM2 clock
2736:src-gen/sr5e1/clock.h ****  *
2737:src-gen/sr5e1/clock.h ****  * @api
2738:src-gen/sr5e1/clock.h ****  */
2739:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_HRTIM2(void) {
2740:src-gen/sr5e1/clock.h **** 
2741:src-gen/sr5e1/clock.h ****     clock_disable_AHB1H(RCC_AHB1HENR_HRTIMER2);
2742:src-gen/sr5e1/clock.h **** }
2743:src-gen/sr5e1/clock.h **** 
2744:src-gen/sr5e1/clock.h **** /**
2745:src-gen/sr5e1/clock.h ****  * @brief   Checks if HRTIM2 clock is enabled
2746:src-gen/sr5e1/clock.h ****  *
2747:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2748:src-gen/sr5e1/clock.h ****  *
2749:src-gen/sr5e1/clock.h ****  * @api
2750:src-gen/sr5e1/clock.h ****  */
2751:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_HRTIM2(void) {
2752:src-gen/sr5e1/clock.h **** 
2753:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1H(RCC_AHB1HENR_HRTIMER2);
2754:src-gen/sr5e1/clock.h **** }
2755:src-gen/sr5e1/clock.h **** 
2756:src-gen/sr5e1/clock.h **** /**
2757:src-gen/sr5e1/clock.h ****  * @brief   Resets HRTIM2
2758:src-gen/sr5e1/clock.h ****  *
2759:src-gen/sr5e1/clock.h ****  * @api
2760:src-gen/sr5e1/clock.h ****  */
2761:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_HRTIM2(void) {
2762:src-gen/sr5e1/clock.h **** 
2763:src-gen/sr5e1/clock.h ****     clock_reset_AHB1H(RCC_AHB1HRSTR_HRTIMER2);
2764:src-gen/sr5e1/clock.h **** }
2765:src-gen/sr5e1/clock.h **** 
2766:src-gen/sr5e1/clock.h **** /**
2767:src-gen/sr5e1/clock.h ****  * @brief   Enables WWDG1 clock
2768:src-gen/sr5e1/clock.h ****  *
2769:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2770:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2771:src-gen/sr5e1/clock.h ****  *
2772:src-gen/sr5e1/clock.h ****  * @api
2773:src-gen/sr5e1/clock.h ****  */
2774:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_WWDG1(bool smode) {
2775:src-gen/sr5e1/clock.h **** 
2776:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_WWDG1);
2777:src-gen/sr5e1/clock.h **** }
2778:src-gen/sr5e1/clock.h **** 
2779:src-gen/sr5e1/clock.h **** /**
2780:src-gen/sr5e1/clock.h ****  * @brief   Disables WWDG1 clock
2781:src-gen/sr5e1/clock.h ****  *
2782:src-gen/sr5e1/clock.h ****  * @api
2783:src-gen/sr5e1/clock.h ****  */
2784:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_WWDG1(void) {
2785:src-gen/sr5e1/clock.h **** 
2786:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_WWDG1);
2787:src-gen/sr5e1/clock.h **** }
2788:src-gen/sr5e1/clock.h **** 
2789:src-gen/sr5e1/clock.h **** /**
2790:src-gen/sr5e1/clock.h ****  * @brief   Checks if WWDG1 clock is enabled
2791:src-gen/sr5e1/clock.h ****  *
2792:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2793:src-gen/sr5e1/clock.h ****  *
2794:src-gen/sr5e1/clock.h ****  * @api
2795:src-gen/sr5e1/clock.h ****  */
2796:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_WWDG1(void) {
2797:src-gen/sr5e1/clock.h **** 
2798:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_WWDG1);
2799:src-gen/sr5e1/clock.h **** }
2800:src-gen/sr5e1/clock.h **** 
2801:src-gen/sr5e1/clock.h **** /**
2802:src-gen/sr5e1/clock.h ****  * @brief   Resets WWDG1
2803:src-gen/sr5e1/clock.h ****  *
2804:src-gen/sr5e1/clock.h ****  * @api
2805:src-gen/sr5e1/clock.h ****  */
2806:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_WWDG1(void) {
2807:src-gen/sr5e1/clock.h **** 
2808:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_WWDG1);
2809:src-gen/sr5e1/clock.h **** }
2810:src-gen/sr5e1/clock.h **** 
2811:src-gen/sr5e1/clock.h **** /**
2812:src-gen/sr5e1/clock.h ****  * @brief   Enables WWDG2 clock
2813:src-gen/sr5e1/clock.h ****  *
2814:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2815:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2816:src-gen/sr5e1/clock.h ****  *
2817:src-gen/sr5e1/clock.h ****  * @api
2818:src-gen/sr5e1/clock.h ****  */
2819:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_WWDG2(bool smode) {
2820:src-gen/sr5e1/clock.h **** 
2821:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_WWDG2);
2822:src-gen/sr5e1/clock.h **** }
2823:src-gen/sr5e1/clock.h **** 
2824:src-gen/sr5e1/clock.h **** /**
2825:src-gen/sr5e1/clock.h ****  * @brief   Disables WWDG2 clock
2826:src-gen/sr5e1/clock.h ****  *
2827:src-gen/sr5e1/clock.h ****  * @api
2828:src-gen/sr5e1/clock.h ****  */
2829:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_WWDG2(void) {
2830:src-gen/sr5e1/clock.h **** 
2831:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_WWDG2);
2832:src-gen/sr5e1/clock.h **** }
2833:src-gen/sr5e1/clock.h **** 
2834:src-gen/sr5e1/clock.h **** /**
2835:src-gen/sr5e1/clock.h ****  * @brief   Checks if WWDG2 clock is enabled
2836:src-gen/sr5e1/clock.h ****  *
2837:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2838:src-gen/sr5e1/clock.h ****  *
2839:src-gen/sr5e1/clock.h ****  * @api
2840:src-gen/sr5e1/clock.h ****  */
2841:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_WWDG2(void) {
2842:src-gen/sr5e1/clock.h **** 
2843:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_WWDG2);
2844:src-gen/sr5e1/clock.h **** }
2845:src-gen/sr5e1/clock.h **** 
2846:src-gen/sr5e1/clock.h **** /**
2847:src-gen/sr5e1/clock.h ****  * @brief   Resets WWDG2
2848:src-gen/sr5e1/clock.h ****  *
2849:src-gen/sr5e1/clock.h ****  * @api
2850:src-gen/sr5e1/clock.h ****  */
2851:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_WWDG2(void) {
2852:src-gen/sr5e1/clock.h **** 
2853:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_WWDG2);
2854:src-gen/sr5e1/clock.h **** }
2855:src-gen/sr5e1/clock.h **** 
2856:src-gen/sr5e1/clock.h **** /**
2857:src-gen/sr5e1/clock.h ****  * @brief   Enables IWDG1 clock
2858:src-gen/sr5e1/clock.h ****  *
2859:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2860:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2861:src-gen/sr5e1/clock.h ****  *
2862:src-gen/sr5e1/clock.h ****  * @api
2863:src-gen/sr5e1/clock.h ****  */
2864:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_IWDG1(bool smode) {
2865:src-gen/sr5e1/clock.h **** 
2866:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_IWDG1);
2867:src-gen/sr5e1/clock.h **** }
2868:src-gen/sr5e1/clock.h **** 
2869:src-gen/sr5e1/clock.h **** /**
2870:src-gen/sr5e1/clock.h ****  * @brief   Disables IWDG1 clock
2871:src-gen/sr5e1/clock.h ****  *
2872:src-gen/sr5e1/clock.h ****  * @api
2873:src-gen/sr5e1/clock.h ****  */
2874:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_IWDG1(void) {
2875:src-gen/sr5e1/clock.h **** 
2876:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_IWDG1);
2877:src-gen/sr5e1/clock.h **** }
2878:src-gen/sr5e1/clock.h **** 
2879:src-gen/sr5e1/clock.h **** /**
2880:src-gen/sr5e1/clock.h ****  * @brief   Checks if IWDG1 clock is enabled
2881:src-gen/sr5e1/clock.h ****  *
2882:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2883:src-gen/sr5e1/clock.h ****  *
2884:src-gen/sr5e1/clock.h ****  * @api
2885:src-gen/sr5e1/clock.h ****  */
2886:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_IWDG1(void) {
2887:src-gen/sr5e1/clock.h **** 
2888:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_IWDG1);
2889:src-gen/sr5e1/clock.h **** }
2890:src-gen/sr5e1/clock.h **** 
2891:src-gen/sr5e1/clock.h **** /**
2892:src-gen/sr5e1/clock.h ****  * @brief   Resets IWDG1
2893:src-gen/sr5e1/clock.h ****  *
2894:src-gen/sr5e1/clock.h ****  * @api
2895:src-gen/sr5e1/clock.h ****  */
2896:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_IWDG1(void) {
2897:src-gen/sr5e1/clock.h **** 
2898:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_IWDG1);
2899:src-gen/sr5e1/clock.h **** }
2900:src-gen/sr5e1/clock.h **** 
2901:src-gen/sr5e1/clock.h **** /**
2902:src-gen/sr5e1/clock.h ****  * @brief   Enables IWDG2 clock
2903:src-gen/sr5e1/clock.h ****  *
2904:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2905:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2906:src-gen/sr5e1/clock.h ****  *
2907:src-gen/sr5e1/clock.h ****  * @api
2908:src-gen/sr5e1/clock.h ****  */
2909:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_IWDG2(bool smode) {
2910:src-gen/sr5e1/clock.h **** 
2911:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_IWDG2);
2912:src-gen/sr5e1/clock.h **** }
2913:src-gen/sr5e1/clock.h **** 
2914:src-gen/sr5e1/clock.h **** /**
2915:src-gen/sr5e1/clock.h ****  * @brief   Disables IWDG2 clock
2916:src-gen/sr5e1/clock.h ****  *
2917:src-gen/sr5e1/clock.h ****  * @api
2918:src-gen/sr5e1/clock.h ****  */
2919:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_IWDG2(void) {
2920:src-gen/sr5e1/clock.h **** 
2921:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_IWDG2);
2922:src-gen/sr5e1/clock.h **** }
2923:src-gen/sr5e1/clock.h **** 
2924:src-gen/sr5e1/clock.h **** /**
2925:src-gen/sr5e1/clock.h ****  * @brief   Checks if IWDG2 clock is enabled
2926:src-gen/sr5e1/clock.h ****  *
2927:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2928:src-gen/sr5e1/clock.h ****  *
2929:src-gen/sr5e1/clock.h ****  * @api
2930:src-gen/sr5e1/clock.h ****  */
2931:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_IWDG2(void) {
2932:src-gen/sr5e1/clock.h **** 
2933:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_IWDG2);
2934:src-gen/sr5e1/clock.h **** }
2935:src-gen/sr5e1/clock.h **** 
2936:src-gen/sr5e1/clock.h **** /**
2937:src-gen/sr5e1/clock.h ****  * @brief   Resets IWDG2
2938:src-gen/sr5e1/clock.h ****  *
2939:src-gen/sr5e1/clock.h ****  * @api
2940:src-gen/sr5e1/clock.h ****  */
2941:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_IWDG2(void) {
2942:src-gen/sr5e1/clock.h **** 
2943:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_IWDG2);
2944:src-gen/sr5e1/clock.h **** }
2945:src-gen/sr5e1/clock.h **** 
2946:src-gen/sr5e1/clock.h **** /**
2947:src-gen/sr5e1/clock.h ****  * @brief   Enables RTC clock
2948:src-gen/sr5e1/clock.h ****  *
2949:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2950:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2951:src-gen/sr5e1/clock.h ****  *
2952:src-gen/sr5e1/clock.h ****  * @api
2953:src-gen/sr5e1/clock.h ****  */
2954:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_RTC(bool smode) {
2955:src-gen/sr5e1/clock.h **** 
2956:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_RTC);
2957:src-gen/sr5e1/clock.h **** }
2958:src-gen/sr5e1/clock.h **** 
2959:src-gen/sr5e1/clock.h **** /**
2960:src-gen/sr5e1/clock.h ****  * @brief   Disables RTC clock
2961:src-gen/sr5e1/clock.h ****  *
2962:src-gen/sr5e1/clock.h ****  * @api
2963:src-gen/sr5e1/clock.h ****  */
2964:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_RTC(void) {
2965:src-gen/sr5e1/clock.h **** 
2966:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_RTC);
2967:src-gen/sr5e1/clock.h **** }
2968:src-gen/sr5e1/clock.h **** 
2969:src-gen/sr5e1/clock.h **** /**
2970:src-gen/sr5e1/clock.h ****  * @brief   Checks if RTC clock is enabled
2971:src-gen/sr5e1/clock.h ****  *
2972:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2973:src-gen/sr5e1/clock.h ****  *
2974:src-gen/sr5e1/clock.h ****  * @api
2975:src-gen/sr5e1/clock.h ****  */
2976:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_RTC(void) {
2977:src-gen/sr5e1/clock.h **** 
2978:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_RTC);
2979:src-gen/sr5e1/clock.h **** }
2980:src-gen/sr5e1/clock.h **** 
2981:src-gen/sr5e1/clock.h **** /**
2982:src-gen/sr5e1/clock.h ****  * @brief   Resets RTC
2983:src-gen/sr5e1/clock.h ****  *
2984:src-gen/sr5e1/clock.h ****  * @api
2985:src-gen/sr5e1/clock.h ****  */
2986:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_RTC(void) {
2987:src-gen/sr5e1/clock.h **** 
2988:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_RTC);
2989:src-gen/sr5e1/clock.h **** }
2990:src-gen/sr5e1/clock.h **** 
2991:src-gen/sr5e1/clock.h **** /**
2992:src-gen/sr5e1/clock.h ****  * @brief   Enables I2C1 clock
2993:src-gen/sr5e1/clock.h ****  *
2994:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2995:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2996:src-gen/sr5e1/clock.h ****  *
2997:src-gen/sr5e1/clock.h ****  * @api
2998:src-gen/sr5e1/clock.h ****  */
2999:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_I2C1(bool smode) {
3000:src-gen/sr5e1/clock.h **** 
3001:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_I2C1);
3002:src-gen/sr5e1/clock.h **** }
3003:src-gen/sr5e1/clock.h **** 
3004:src-gen/sr5e1/clock.h **** /**
3005:src-gen/sr5e1/clock.h ****  * @brief   Disables I2C1 clock
3006:src-gen/sr5e1/clock.h ****  *
3007:src-gen/sr5e1/clock.h ****  * @api
3008:src-gen/sr5e1/clock.h ****  */
3009:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_I2C1(void) {
3010:src-gen/sr5e1/clock.h **** 
3011:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_I2C1);
3012:src-gen/sr5e1/clock.h **** }
3013:src-gen/sr5e1/clock.h **** 
3014:src-gen/sr5e1/clock.h **** /**
3015:src-gen/sr5e1/clock.h ****  * @brief   Checks if I2C1 clock is enabled
3016:src-gen/sr5e1/clock.h ****  *
3017:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3018:src-gen/sr5e1/clock.h ****  *
3019:src-gen/sr5e1/clock.h ****  * @api
3020:src-gen/sr5e1/clock.h ****  */
3021:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_I2C1(void) {
3022:src-gen/sr5e1/clock.h **** 
3023:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_I2C1);
3024:src-gen/sr5e1/clock.h **** }
3025:src-gen/sr5e1/clock.h **** 
3026:src-gen/sr5e1/clock.h **** /**
3027:src-gen/sr5e1/clock.h ****  * @brief   Enables I2C2 clock
3028:src-gen/sr5e1/clock.h ****  *
3029:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3030:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3031:src-gen/sr5e1/clock.h ****  *
3032:src-gen/sr5e1/clock.h ****  * @api
3033:src-gen/sr5e1/clock.h ****  */
3034:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_I2C2(bool smode) {
3035:src-gen/sr5e1/clock.h **** 
3036:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_I2C2);
3037:src-gen/sr5e1/clock.h **** }
3038:src-gen/sr5e1/clock.h **** 
3039:src-gen/sr5e1/clock.h **** /**
3040:src-gen/sr5e1/clock.h ****  * @brief   Disables I2C2 clock
3041:src-gen/sr5e1/clock.h ****  *
3042:src-gen/sr5e1/clock.h ****  * @api
3043:src-gen/sr5e1/clock.h ****  */
3044:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_I2C2(void) {
3045:src-gen/sr5e1/clock.h **** 
3046:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_I2C2);
3047:src-gen/sr5e1/clock.h **** }
3048:src-gen/sr5e1/clock.h **** 
3049:src-gen/sr5e1/clock.h **** /**
3050:src-gen/sr5e1/clock.h ****  * @brief   Checks if I2C2 clock is enabled
3051:src-gen/sr5e1/clock.h ****  *
3052:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3053:src-gen/sr5e1/clock.h ****  *
3054:src-gen/sr5e1/clock.h ****  * @api
3055:src-gen/sr5e1/clock.h ****  */
3056:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_I2C2(void) {
3057:src-gen/sr5e1/clock.h **** 
3058:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_I2C2);
3059:src-gen/sr5e1/clock.h **** }
3060:src-gen/sr5e1/clock.h **** 
3061:src-gen/sr5e1/clock.h **** /**
3062:src-gen/sr5e1/clock.h ****  * @brief   Enables SPI1 clock
3063:src-gen/sr5e1/clock.h ****  *
3064:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3065:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3066:src-gen/sr5e1/clock.h ****  *
3067:src-gen/sr5e1/clock.h ****  * @api
3068:src-gen/sr5e1/clock.h ****  */
3069:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_SPI1(bool smode) {
3070:src-gen/sr5e1/clock.h **** 
3071:src-gen/sr5e1/clock.h ****     clock_enable_APB2L(smode, RCC_APB2LENR_SPI1);
3072:src-gen/sr5e1/clock.h **** }
3073:src-gen/sr5e1/clock.h **** 
3074:src-gen/sr5e1/clock.h **** /**
3075:src-gen/sr5e1/clock.h ****  * @brief   Disables SPI1 clock
3076:src-gen/sr5e1/clock.h ****  *
3077:src-gen/sr5e1/clock.h ****  * @api
3078:src-gen/sr5e1/clock.h ****  */
3079:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_SPI1(void) {
3080:src-gen/sr5e1/clock.h **** 
3081:src-gen/sr5e1/clock.h ****     clock_disable_APB2L(RCC_APB2LENR_SPI1);
3082:src-gen/sr5e1/clock.h **** }
3083:src-gen/sr5e1/clock.h **** 
3084:src-gen/sr5e1/clock.h **** /**
3085:src-gen/sr5e1/clock.h ****  * @brief   Checks if SPI1 clock is enabled
3086:src-gen/sr5e1/clock.h ****  *
3087:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3088:src-gen/sr5e1/clock.h ****  *
3089:src-gen/sr5e1/clock.h ****  * @api
3090:src-gen/sr5e1/clock.h ****  */
3091:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_SPI1(void) {
3092:src-gen/sr5e1/clock.h **** 
3093:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2L(RCC_APB2LENR_SPI1);
3094:src-gen/sr5e1/clock.h **** }
3095:src-gen/sr5e1/clock.h **** 
3096:src-gen/sr5e1/clock.h **** /**
3097:src-gen/sr5e1/clock.h ****  * @brief   Resets SPI1
3098:src-gen/sr5e1/clock.h ****  *
3099:src-gen/sr5e1/clock.h ****  * @api
3100:src-gen/sr5e1/clock.h ****  */
3101:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_SPI1(void) {
3102:src-gen/sr5e1/clock.h **** 
3103:src-gen/sr5e1/clock.h ****     clock_reset_APB2L(RCC_APB2LRSTR_SPI1);
3104:src-gen/sr5e1/clock.h **** }
3105:src-gen/sr5e1/clock.h **** 
3106:src-gen/sr5e1/clock.h **** /**
3107:src-gen/sr5e1/clock.h ****  * @brief   Enables SPI2 clock
3108:src-gen/sr5e1/clock.h ****  *
3109:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3110:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3111:src-gen/sr5e1/clock.h ****  *
3112:src-gen/sr5e1/clock.h ****  * @api
3113:src-gen/sr5e1/clock.h ****  */
3114:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_SPI2(bool smode) {
3115:src-gen/sr5e1/clock.h **** 
3116:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_SPI2);
3117:src-gen/sr5e1/clock.h **** }
3118:src-gen/sr5e1/clock.h **** 
3119:src-gen/sr5e1/clock.h **** /**
3120:src-gen/sr5e1/clock.h ****  * @brief   Disables SPI2 clock
3121:src-gen/sr5e1/clock.h ****  *
3122:src-gen/sr5e1/clock.h ****  * @api
3123:src-gen/sr5e1/clock.h ****  */
3124:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_SPI2(void) {
3125:src-gen/sr5e1/clock.h **** 
3126:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_SPI2);
3127:src-gen/sr5e1/clock.h **** }
3128:src-gen/sr5e1/clock.h **** 
3129:src-gen/sr5e1/clock.h **** /**
3130:src-gen/sr5e1/clock.h ****  * @brief   Checks if SPI2 clock is enabled
3131:src-gen/sr5e1/clock.h ****  *
3132:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3133:src-gen/sr5e1/clock.h ****  *
3134:src-gen/sr5e1/clock.h ****  * @api
3135:src-gen/sr5e1/clock.h ****  */
3136:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_SPI2(void) {
3137:src-gen/sr5e1/clock.h **** 
3138:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_SPI2);
3139:src-gen/sr5e1/clock.h **** }
3140:src-gen/sr5e1/clock.h **** 
3141:src-gen/sr5e1/clock.h **** /**
3142:src-gen/sr5e1/clock.h ****  * @brief   Resets SPI2
3143:src-gen/sr5e1/clock.h ****  *
3144:src-gen/sr5e1/clock.h ****  * @api
3145:src-gen/sr5e1/clock.h ****  */
3146:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_SPI2(void) {
3147:src-gen/sr5e1/clock.h **** 
3148:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_SPI2);
3149:src-gen/sr5e1/clock.h **** }
3150:src-gen/sr5e1/clock.h **** 
3151:src-gen/sr5e1/clock.h **** /**
3152:src-gen/sr5e1/clock.h ****  * @brief   Enables SPI3 clock
3153:src-gen/sr5e1/clock.h ****  *
3154:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3155:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3156:src-gen/sr5e1/clock.h ****  *
3157:src-gen/sr5e1/clock.h ****  * @api
3158:src-gen/sr5e1/clock.h ****  */
3159:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_SPI3(bool smode) {
3160:src-gen/sr5e1/clock.h **** 
3161:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_SPI3);
3162:src-gen/sr5e1/clock.h **** }
3163:src-gen/sr5e1/clock.h **** 
3164:src-gen/sr5e1/clock.h **** /**
3165:src-gen/sr5e1/clock.h ****  * @brief   Disables SPI3 clock
3166:src-gen/sr5e1/clock.h ****  *
3167:src-gen/sr5e1/clock.h ****  * @api
3168:src-gen/sr5e1/clock.h ****  */
3169:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_SPI3(void) {
3170:src-gen/sr5e1/clock.h **** 
3171:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_SPI3);
3172:src-gen/sr5e1/clock.h **** }
3173:src-gen/sr5e1/clock.h **** 
3174:src-gen/sr5e1/clock.h **** /**
3175:src-gen/sr5e1/clock.h ****  * @brief   Checks if SPI3 clock is enabled
3176:src-gen/sr5e1/clock.h ****  *
3177:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3178:src-gen/sr5e1/clock.h ****  *
3179:src-gen/sr5e1/clock.h ****  * @api
3180:src-gen/sr5e1/clock.h ****  */
3181:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_SPI3(void) {
3182:src-gen/sr5e1/clock.h **** 
3183:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_SPI3);
3184:src-gen/sr5e1/clock.h **** }
3185:src-gen/sr5e1/clock.h **** 
3186:src-gen/sr5e1/clock.h **** /**
3187:src-gen/sr5e1/clock.h ****  * @brief   Resets SPI3
3188:src-gen/sr5e1/clock.h ****  *
3189:src-gen/sr5e1/clock.h ****  * @api
3190:src-gen/sr5e1/clock.h ****  */
3191:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_SPI3(void) {
3192:src-gen/sr5e1/clock.h **** 
3193:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_SPI3);
3194:src-gen/sr5e1/clock.h **** }
3195:src-gen/sr5e1/clock.h **** 
3196:src-gen/sr5e1/clock.h **** /**
3197:src-gen/sr5e1/clock.h ****  * @brief   Enables SPI4 clock
3198:src-gen/sr5e1/clock.h ****  *
3199:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3200:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3201:src-gen/sr5e1/clock.h ****  *
3202:src-gen/sr5e1/clock.h ****  * @api
3203:src-gen/sr5e1/clock.h ****  */
3204:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_SPI4(bool smode) {
3205:src-gen/sr5e1/clock.h **** 
3206:src-gen/sr5e1/clock.h ****     clock_enable_APB2L(smode, RCC_APB2LENR_SPI4);
3207:src-gen/sr5e1/clock.h **** }
3208:src-gen/sr5e1/clock.h **** 
3209:src-gen/sr5e1/clock.h **** /**
3210:src-gen/sr5e1/clock.h ****  * @brief   Disables SPI4 clock
3211:src-gen/sr5e1/clock.h ****  *
3212:src-gen/sr5e1/clock.h ****  * @api
3213:src-gen/sr5e1/clock.h ****  */
3214:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_SPI4(void) {
3215:src-gen/sr5e1/clock.h **** 
3216:src-gen/sr5e1/clock.h ****     clock_disable_APB2L(RCC_APB2LENR_SPI4);
3217:src-gen/sr5e1/clock.h **** }
3218:src-gen/sr5e1/clock.h **** 
3219:src-gen/sr5e1/clock.h **** /**
3220:src-gen/sr5e1/clock.h ****  * @brief   Checks if SPI4 clock is enabled
3221:src-gen/sr5e1/clock.h ****  *
3222:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3223:src-gen/sr5e1/clock.h ****  *
3224:src-gen/sr5e1/clock.h ****  * @api
3225:src-gen/sr5e1/clock.h ****  */
3226:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_SPI4(void) {
3227:src-gen/sr5e1/clock.h **** 
3228:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2L(RCC_APB2LENR_SPI4);
3229:src-gen/sr5e1/clock.h **** }
3230:src-gen/sr5e1/clock.h **** 
3231:src-gen/sr5e1/clock.h **** /**
3232:src-gen/sr5e1/clock.h ****  * @brief   Resets SPI4
3233:src-gen/sr5e1/clock.h ****  *
3234:src-gen/sr5e1/clock.h ****  * @api
3235:src-gen/sr5e1/clock.h ****  */
3236:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_SPI4(void) {
3237:src-gen/sr5e1/clock.h **** 
3238:src-gen/sr5e1/clock.h ****     clock_reset_APB2L(RCC_APB2LRSTR_SPI4);
3239:src-gen/sr5e1/clock.h **** }
3240:src-gen/sr5e1/clock.h **** 
3241:src-gen/sr5e1/clock.h **** /**
3242:src-gen/sr5e1/clock.h ****  * @brief   Enables SMPU clock
3243:src-gen/sr5e1/clock.h ****  *
3244:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3245:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3246:src-gen/sr5e1/clock.h ****  *
3247:src-gen/sr5e1/clock.h ****  * @api
3248:src-gen/sr5e1/clock.h ****  */
3249:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_SMPU(bool smode) {
3250:src-gen/sr5e1/clock.h **** 
3251:src-gen/sr5e1/clock.h ****     clock_enable_APB2L(smode, RCC_APB2LENR_SMPU);
3252:src-gen/sr5e1/clock.h **** }
3253:src-gen/sr5e1/clock.h **** 
3254:src-gen/sr5e1/clock.h **** /**
3255:src-gen/sr5e1/clock.h ****  * @brief   Disables SMPU clock
3256:src-gen/sr5e1/clock.h ****  *
3257:src-gen/sr5e1/clock.h ****  * @api
3258:src-gen/sr5e1/clock.h ****  */
3259:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_SMPU(void) {
3260:src-gen/sr5e1/clock.h **** 
3261:src-gen/sr5e1/clock.h ****     clock_disable_APB2L(RCC_APB2LENR_SMPU);
3262:src-gen/sr5e1/clock.h **** }
3263:src-gen/sr5e1/clock.h **** 
3264:src-gen/sr5e1/clock.h **** /**
3265:src-gen/sr5e1/clock.h ****  * @brief   Checks if SMPU clock is enabled
3266:src-gen/sr5e1/clock.h ****  *
3267:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3268:src-gen/sr5e1/clock.h ****  *
3269:src-gen/sr5e1/clock.h ****  * @api
3270:src-gen/sr5e1/clock.h ****  */
3271:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_SMPU(void) {
3272:src-gen/sr5e1/clock.h **** 
3273:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2L(RCC_APB2LENR_SMPU);
3274:src-gen/sr5e1/clock.h **** }
3275:src-gen/sr5e1/clock.h **** 
3276:src-gen/sr5e1/clock.h **** /**
3277:src-gen/sr5e1/clock.h ****  * @brief   Resets SMPU
3278:src-gen/sr5e1/clock.h ****  *
3279:src-gen/sr5e1/clock.h ****  * @api
3280:src-gen/sr5e1/clock.h ****  */
3281:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_SMPU(void) {
3282:src-gen/sr5e1/clock.h **** 
3283:src-gen/sr5e1/clock.h ****     clock_reset_APB2L(RCC_APB2LRSTR_SMPU);
3284:src-gen/sr5e1/clock.h **** }
3285:src-gen/sr5e1/clock.h **** 
3286:src-gen/sr5e1/clock.h **** /**
3287:src-gen/sr5e1/clock.h ****  * @brief   Enables TIM1 clock
3288:src-gen/sr5e1/clock.h ****  *
3289:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3290:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3291:src-gen/sr5e1/clock.h ****  *
3292:src-gen/sr5e1/clock.h ****  * @api
3293:src-gen/sr5e1/clock.h ****  */
3294:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_TIM1(bool smode) {
3295:src-gen/sr5e1/clock.h **** 
3296:src-gen/sr5e1/clock.h ****     clock_enable_APB2L(smode, RCC_APB2LENR_TIM1_PWM);
3297:src-gen/sr5e1/clock.h **** }
3298:src-gen/sr5e1/clock.h **** 
3299:src-gen/sr5e1/clock.h **** /**
3300:src-gen/sr5e1/clock.h ****  * @brief   Disables TIM1 clock
3301:src-gen/sr5e1/clock.h ****  *
3302:src-gen/sr5e1/clock.h ****  * @api
3303:src-gen/sr5e1/clock.h ****  */
3304:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_TIM1(void) {
3305:src-gen/sr5e1/clock.h **** 
3306:src-gen/sr5e1/clock.h ****     clock_disable_APB2L(RCC_APB2LENR_TIM1_PWM);
3307:src-gen/sr5e1/clock.h **** }
3308:src-gen/sr5e1/clock.h **** 
3309:src-gen/sr5e1/clock.h **** /**
3310:src-gen/sr5e1/clock.h ****  * @brief   Checks if TIM1 clock is enabled
3311:src-gen/sr5e1/clock.h ****  *
3312:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3313:src-gen/sr5e1/clock.h ****  *
3314:src-gen/sr5e1/clock.h ****  * @api
3315:src-gen/sr5e1/clock.h ****  */
3316:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_TIM1(void) {
3317:src-gen/sr5e1/clock.h **** 
3318:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2L(RCC_APB2LENR_TIM1_PWM);
3319:src-gen/sr5e1/clock.h **** }
3320:src-gen/sr5e1/clock.h **** 
3321:src-gen/sr5e1/clock.h **** /**
3322:src-gen/sr5e1/clock.h ****  * @brief   Resets TIM1
3323:src-gen/sr5e1/clock.h ****  *
3324:src-gen/sr5e1/clock.h ****  * @api
3325:src-gen/sr5e1/clock.h ****  */
3326:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_TIM1(void) {
3327:src-gen/sr5e1/clock.h **** 
3328:src-gen/sr5e1/clock.h ****     clock_reset_APB2L(RCC_APB2LRSTR_TIM1_PWM);
3329:src-gen/sr5e1/clock.h **** }
3330:src-gen/sr5e1/clock.h **** 
3331:src-gen/sr5e1/clock.h **** /**
3332:src-gen/sr5e1/clock.h ****  * @brief   Enables TIM2 clock
3333:src-gen/sr5e1/clock.h ****  *
3334:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3335:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3336:src-gen/sr5e1/clock.h ****  *
3337:src-gen/sr5e1/clock.h ****  * @api
3338:src-gen/sr5e1/clock.h ****  */
3339:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_TIM2(bool smode) {
3340:src-gen/sr5e1/clock.h **** 
3341:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_TIM2);
3342:src-gen/sr5e1/clock.h **** }
3343:src-gen/sr5e1/clock.h **** 
3344:src-gen/sr5e1/clock.h **** /**
3345:src-gen/sr5e1/clock.h ****  * @brief   Disables TIM2 clock
3346:src-gen/sr5e1/clock.h ****  *
3347:src-gen/sr5e1/clock.h ****  * @api
3348:src-gen/sr5e1/clock.h ****  */
3349:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_TIM2(void) {
3350:src-gen/sr5e1/clock.h **** 
3351:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_TIM2);
3352:src-gen/sr5e1/clock.h **** }
3353:src-gen/sr5e1/clock.h **** 
3354:src-gen/sr5e1/clock.h **** /**
3355:src-gen/sr5e1/clock.h ****  * @brief   Checks if TIM2 clock is enabled
3356:src-gen/sr5e1/clock.h ****  *
3357:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3358:src-gen/sr5e1/clock.h ****  *
3359:src-gen/sr5e1/clock.h ****  * @api
3360:src-gen/sr5e1/clock.h ****  */
3361:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_TIM2(void) {
3362:src-gen/sr5e1/clock.h **** 
3363:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_TIM2);
3364:src-gen/sr5e1/clock.h **** }
3365:src-gen/sr5e1/clock.h **** 
3366:src-gen/sr5e1/clock.h **** /**
3367:src-gen/sr5e1/clock.h ****  * @brief   Resets TIM2
3368:src-gen/sr5e1/clock.h ****  *
3369:src-gen/sr5e1/clock.h ****  * @api
3370:src-gen/sr5e1/clock.h ****  */
3371:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_TIM2(void) {
3372:src-gen/sr5e1/clock.h **** 
3373:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_TIM2);
3374:src-gen/sr5e1/clock.h **** }
3375:src-gen/sr5e1/clock.h **** 
3376:src-gen/sr5e1/clock.h **** /**
3377:src-gen/sr5e1/clock.h ****  * @brief   Enables TIM3 clock
3378:src-gen/sr5e1/clock.h ****  *
3379:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3380:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3381:src-gen/sr5e1/clock.h ****  *
3382:src-gen/sr5e1/clock.h ****  * @api
3383:src-gen/sr5e1/clock.h ****  */
3384:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_TIM3(bool smode) {
3385:src-gen/sr5e1/clock.h **** 
3386:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_TIM3);
3387:src-gen/sr5e1/clock.h **** }
3388:src-gen/sr5e1/clock.h **** 
3389:src-gen/sr5e1/clock.h **** /**
3390:src-gen/sr5e1/clock.h ****  * @brief   Disables TIM3 clock
3391:src-gen/sr5e1/clock.h ****  *
3392:src-gen/sr5e1/clock.h ****  * @api
3393:src-gen/sr5e1/clock.h ****  */
3394:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_TIM3(void) {
3395:src-gen/sr5e1/clock.h **** 
3396:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_TIM3);
3397:src-gen/sr5e1/clock.h **** }
3398:src-gen/sr5e1/clock.h **** 
3399:src-gen/sr5e1/clock.h **** /**
3400:src-gen/sr5e1/clock.h ****  * @brief   Checks if TIM3 clock is enabled
3401:src-gen/sr5e1/clock.h ****  *
3402:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3403:src-gen/sr5e1/clock.h ****  *
3404:src-gen/sr5e1/clock.h ****  * @api
3405:src-gen/sr5e1/clock.h ****  */
3406:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_TIM3(void) {
3407:src-gen/sr5e1/clock.h **** 
3408:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_TIM3);
3409:src-gen/sr5e1/clock.h **** }
3410:src-gen/sr5e1/clock.h **** 
3411:src-gen/sr5e1/clock.h **** /**
3412:src-gen/sr5e1/clock.h ****  * @brief   Resets TIM3
3413:src-gen/sr5e1/clock.h ****  *
3414:src-gen/sr5e1/clock.h ****  * @api
3415:src-gen/sr5e1/clock.h ****  */
3416:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_TIM3(void) {
3417:src-gen/sr5e1/clock.h **** 
3418:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_TIM3);
3419:src-gen/sr5e1/clock.h **** }
3420:src-gen/sr5e1/clock.h **** 
3421:src-gen/sr5e1/clock.h **** /**
3422:src-gen/sr5e1/clock.h ****  * @brief   Enables TIM4 clock
3423:src-gen/sr5e1/clock.h ****  *
3424:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3425:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3426:src-gen/sr5e1/clock.h ****  *
3427:src-gen/sr5e1/clock.h ****  * @api
3428:src-gen/sr5e1/clock.h ****  */
3429:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_TIM4(bool smode) {
3430:src-gen/sr5e1/clock.h **** 
3431:src-gen/sr5e1/clock.h ****     clock_enable_APB2L(smode, RCC_APB2LENR_TIM4);
3432:src-gen/sr5e1/clock.h **** }
3433:src-gen/sr5e1/clock.h **** 
3434:src-gen/sr5e1/clock.h **** /**
3435:src-gen/sr5e1/clock.h ****  * @brief   Disables TIM4 clock
3436:src-gen/sr5e1/clock.h ****  *
3437:src-gen/sr5e1/clock.h ****  * @api
3438:src-gen/sr5e1/clock.h ****  */
3439:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_TIM4(void) {
3440:src-gen/sr5e1/clock.h **** 
3441:src-gen/sr5e1/clock.h ****     clock_disable_APB2L(RCC_APB2LENR_TIM4);
3442:src-gen/sr5e1/clock.h **** }
3443:src-gen/sr5e1/clock.h **** 
3444:src-gen/sr5e1/clock.h **** /**
3445:src-gen/sr5e1/clock.h ****  * @brief   Checks if TIM4 clock is enabled
3446:src-gen/sr5e1/clock.h ****  *
3447:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3448:src-gen/sr5e1/clock.h ****  *
3449:src-gen/sr5e1/clock.h ****  * @api
3450:src-gen/sr5e1/clock.h ****  */
3451:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_TIM4(void) {
3452:src-gen/sr5e1/clock.h **** 
3453:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2L(RCC_APB2LENR_TIM4);
3454:src-gen/sr5e1/clock.h **** }
3455:src-gen/sr5e1/clock.h **** 
3456:src-gen/sr5e1/clock.h **** /**
3457:src-gen/sr5e1/clock.h ****  * @brief   Resets TIM4
3458:src-gen/sr5e1/clock.h ****  *
3459:src-gen/sr5e1/clock.h ****  * @api
3460:src-gen/sr5e1/clock.h ****  */
3461:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_TIM4(void) {
3462:src-gen/sr5e1/clock.h **** 
3463:src-gen/sr5e1/clock.h ****     clock_reset_APB2L(RCC_APB2LRSTR_TIM4);
3464:src-gen/sr5e1/clock.h **** }
3465:src-gen/sr5e1/clock.h **** 
3466:src-gen/sr5e1/clock.h **** /**
3467:src-gen/sr5e1/clock.h ****  * @brief   Enables TIM5 clock
3468:src-gen/sr5e1/clock.h ****  *
3469:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3470:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3471:src-gen/sr5e1/clock.h ****  *
3472:src-gen/sr5e1/clock.h ****  * @api
3473:src-gen/sr5e1/clock.h ****  */
3474:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_TIM5(bool smode) {
3475:src-gen/sr5e1/clock.h **** 
3476:src-gen/sr5e1/clock.h ****     clock_enable_APB2L(smode, RCC_APB2LENR_TIM5);
3477:src-gen/sr5e1/clock.h **** }
3478:src-gen/sr5e1/clock.h **** 
3479:src-gen/sr5e1/clock.h **** /**
3480:src-gen/sr5e1/clock.h ****  * @brief   Disables TIM5 clock
3481:src-gen/sr5e1/clock.h ****  *
3482:src-gen/sr5e1/clock.h ****  * @api
3483:src-gen/sr5e1/clock.h ****  */
3484:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_TIM5(void) {
3485:src-gen/sr5e1/clock.h **** 
3486:src-gen/sr5e1/clock.h ****     clock_disable_APB2L(RCC_APB2LENR_TIM5);
3487:src-gen/sr5e1/clock.h **** }
3488:src-gen/sr5e1/clock.h **** 
3489:src-gen/sr5e1/clock.h **** /**
3490:src-gen/sr5e1/clock.h ****  * @brief   Checks if TIM5 clock is enabled
3491:src-gen/sr5e1/clock.h ****  *
3492:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3493:src-gen/sr5e1/clock.h ****  *
3494:src-gen/sr5e1/clock.h ****  * @api
3495:src-gen/sr5e1/clock.h ****  */
3496:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_TIM5(void) {
3497:src-gen/sr5e1/clock.h **** 
3498:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2L(RCC_APB2LENR_TIM5);
3499:src-gen/sr5e1/clock.h **** }
3500:src-gen/sr5e1/clock.h **** 
3501:src-gen/sr5e1/clock.h **** /**
3502:src-gen/sr5e1/clock.h ****  * @brief   Resets TIM5
3503:src-gen/sr5e1/clock.h ****  *
3504:src-gen/sr5e1/clock.h ****  * @api
3505:src-gen/sr5e1/clock.h ****  */
3506:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_TIM5(void) {
3507:src-gen/sr5e1/clock.h **** 
3508:src-gen/sr5e1/clock.h ****     clock_reset_APB2L(RCC_APB2LRSTR_TIM5);
3509:src-gen/sr5e1/clock.h **** }
3510:src-gen/sr5e1/clock.h **** 
3511:src-gen/sr5e1/clock.h **** /**
3512:src-gen/sr5e1/clock.h ****  * @brief   Enables TIM6 clock
3513:src-gen/sr5e1/clock.h ****  *
3514:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3515:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3516:src-gen/sr5e1/clock.h ****  *
3517:src-gen/sr5e1/clock.h ****  * @api
3518:src-gen/sr5e1/clock.h ****  */
3519:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_TIM6(bool smode) {
3520:src-gen/sr5e1/clock.h **** 
3521:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_TIM6);
3522:src-gen/sr5e1/clock.h **** }
3523:src-gen/sr5e1/clock.h **** 
3524:src-gen/sr5e1/clock.h **** /**
3525:src-gen/sr5e1/clock.h ****  * @brief   Disables TIM6 clock
3526:src-gen/sr5e1/clock.h ****  *
3527:src-gen/sr5e1/clock.h ****  * @api
3528:src-gen/sr5e1/clock.h ****  */
3529:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_TIM6(void) {
3530:src-gen/sr5e1/clock.h **** 
3531:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_TIM6);
3532:src-gen/sr5e1/clock.h **** }
3533:src-gen/sr5e1/clock.h **** 
3534:src-gen/sr5e1/clock.h **** /**
3535:src-gen/sr5e1/clock.h ****  * @brief   Checks if TIM6 clock is enabled
3536:src-gen/sr5e1/clock.h ****  *
3537:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3538:src-gen/sr5e1/clock.h ****  *
3539:src-gen/sr5e1/clock.h ****  * @api
3540:src-gen/sr5e1/clock.h ****  */
3541:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_TIM6(void) {
3542:src-gen/sr5e1/clock.h **** 
3543:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_TIM6);
3544:src-gen/sr5e1/clock.h **** }
3545:src-gen/sr5e1/clock.h **** 
3546:src-gen/sr5e1/clock.h **** /**
3547:src-gen/sr5e1/clock.h ****  * @brief   Resets TIM6
3548:src-gen/sr5e1/clock.h ****  *
3549:src-gen/sr5e1/clock.h ****  * @api
3550:src-gen/sr5e1/clock.h ****  */
3551:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_TIM6(void) {
3552:src-gen/sr5e1/clock.h **** 
3553:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_TIM6);
3554:src-gen/sr5e1/clock.h **** }
3555:src-gen/sr5e1/clock.h **** 
3556:src-gen/sr5e1/clock.h **** /**
3557:src-gen/sr5e1/clock.h ****  * @brief   Enables TIM7 clock
3558:src-gen/sr5e1/clock.h ****  *
3559:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3560:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3561:src-gen/sr5e1/clock.h ****  *
3562:src-gen/sr5e1/clock.h ****  * @api
3563:src-gen/sr5e1/clock.h ****  */
3564:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_TIM7(bool smode) {
3565:src-gen/sr5e1/clock.h **** 
3566:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_TIM7);
3567:src-gen/sr5e1/clock.h **** }
3568:src-gen/sr5e1/clock.h **** 
3569:src-gen/sr5e1/clock.h **** /**
3570:src-gen/sr5e1/clock.h ****  * @brief   Disables TIM7 clock
3571:src-gen/sr5e1/clock.h ****  *
3572:src-gen/sr5e1/clock.h ****  * @api
3573:src-gen/sr5e1/clock.h ****  */
3574:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_TIM7(void) {
3575:src-gen/sr5e1/clock.h **** 
3576:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_TIM7);
3577:src-gen/sr5e1/clock.h **** }
3578:src-gen/sr5e1/clock.h **** 
3579:src-gen/sr5e1/clock.h **** /**
3580:src-gen/sr5e1/clock.h ****  * @brief   Checks if TIM7 clock is enabled
3581:src-gen/sr5e1/clock.h ****  *
3582:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3583:src-gen/sr5e1/clock.h ****  *
3584:src-gen/sr5e1/clock.h ****  * @api
3585:src-gen/sr5e1/clock.h ****  */
3586:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_TIM7(void) {
3587:src-gen/sr5e1/clock.h **** 
3588:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_TIM7);
3589:src-gen/sr5e1/clock.h **** }
3590:src-gen/sr5e1/clock.h **** 
3591:src-gen/sr5e1/clock.h **** /**
3592:src-gen/sr5e1/clock.h ****  * @brief   Resets TIM7
3593:src-gen/sr5e1/clock.h ****  *
3594:src-gen/sr5e1/clock.h ****  * @api
3595:src-gen/sr5e1/clock.h ****  */
3596:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_TIM7(void) {
3597:src-gen/sr5e1/clock.h **** 
3598:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_TIM7);
3599:src-gen/sr5e1/clock.h **** }
3600:src-gen/sr5e1/clock.h **** 
3601:src-gen/sr5e1/clock.h **** /**
3602:src-gen/sr5e1/clock.h ****  * @brief   Enables TIM_TS clock
3603:src-gen/sr5e1/clock.h ****  *
3604:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3605:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3606:src-gen/sr5e1/clock.h ****  *
3607:src-gen/sr5e1/clock.h ****  * @api
3608:src-gen/sr5e1/clock.h ****  */
3609:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_TIM_TS(bool smode) {
3610:src-gen/sr5e1/clock.h **** 
3611:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_TIM_TS);
3612:src-gen/sr5e1/clock.h **** }
3613:src-gen/sr5e1/clock.h **** 
3614:src-gen/sr5e1/clock.h **** /**
3615:src-gen/sr5e1/clock.h ****  * @brief   Disables TIM_TS clock
3616:src-gen/sr5e1/clock.h ****  *
3617:src-gen/sr5e1/clock.h ****  * @api
3618:src-gen/sr5e1/clock.h ****  */
3619:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_TIM_TS(void) {
3620:src-gen/sr5e1/clock.h **** 
3621:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_TIM_TS);
3622:src-gen/sr5e1/clock.h **** }
3623:src-gen/sr5e1/clock.h **** 
3624:src-gen/sr5e1/clock.h **** /**
3625:src-gen/sr5e1/clock.h ****  * @brief   Checks if TIM_TS clock is enabled
3626:src-gen/sr5e1/clock.h ****  *
3627:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3628:src-gen/sr5e1/clock.h ****  *
3629:src-gen/sr5e1/clock.h ****  * @api
3630:src-gen/sr5e1/clock.h ****  */
3631:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_TIM_TS(void) {
3632:src-gen/sr5e1/clock.h **** 
3633:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_TIM_TS);
3634:src-gen/sr5e1/clock.h **** }
3635:src-gen/sr5e1/clock.h **** 
3636:src-gen/sr5e1/clock.h **** /**
3637:src-gen/sr5e1/clock.h ****  * @brief   Resets TIM_TS
3638:src-gen/sr5e1/clock.h ****  *
3639:src-gen/sr5e1/clock.h ****  * @api
3640:src-gen/sr5e1/clock.h ****  */
3641:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_TIM_TS(void) {
3642:src-gen/sr5e1/clock.h **** 
3643:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_TIM_TS);
3644:src-gen/sr5e1/clock.h **** }
3645:src-gen/sr5e1/clock.h **** 
3646:src-gen/sr5e1/clock.h **** /**
3647:src-gen/sr5e1/clock.h ****  * @brief   Enables TIM8 clock
3648:src-gen/sr5e1/clock.h ****  *
3649:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3650:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3651:src-gen/sr5e1/clock.h ****  *
3652:src-gen/sr5e1/clock.h ****  * @api
3653:src-gen/sr5e1/clock.h ****  */
3654:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_TIM8(bool smode) {
3655:src-gen/sr5e1/clock.h **** 
3656:src-gen/sr5e1/clock.h ****     clock_enable_APB2L(smode, RCC_APB2LENR_TIM8_PWM);
3657:src-gen/sr5e1/clock.h **** }
3658:src-gen/sr5e1/clock.h **** 
3659:src-gen/sr5e1/clock.h **** /**
3660:src-gen/sr5e1/clock.h ****  * @brief   Disables TIM8 clock
3661:src-gen/sr5e1/clock.h ****  *
3662:src-gen/sr5e1/clock.h ****  * @api
3663:src-gen/sr5e1/clock.h ****  */
3664:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_TIM8(void) {
3665:src-gen/sr5e1/clock.h **** 
3666:src-gen/sr5e1/clock.h ****     clock_disable_APB2L(RCC_APB2LENR_TIM8_PWM);
3667:src-gen/sr5e1/clock.h **** }
3668:src-gen/sr5e1/clock.h **** 
3669:src-gen/sr5e1/clock.h **** /**
3670:src-gen/sr5e1/clock.h ****  * @brief   Checks if TIM8 clock is enabled
3671:src-gen/sr5e1/clock.h ****  *
3672:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3673:src-gen/sr5e1/clock.h ****  *
3674:src-gen/sr5e1/clock.h ****  * @api
3675:src-gen/sr5e1/clock.h ****  */
3676:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_TIM8(void) {
3677:src-gen/sr5e1/clock.h **** 
3678:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2L(RCC_APB2LENR_TIM8_PWM);
3679:src-gen/sr5e1/clock.h **** }
3680:src-gen/sr5e1/clock.h **** 
3681:src-gen/sr5e1/clock.h **** /**
3682:src-gen/sr5e1/clock.h ****  * @brief   Resets TIM8
3683:src-gen/sr5e1/clock.h ****  *
3684:src-gen/sr5e1/clock.h ****  * @api
3685:src-gen/sr5e1/clock.h ****  */
3686:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_TIM8(void) {
3687:src-gen/sr5e1/clock.h **** 
3688:src-gen/sr5e1/clock.h ****     clock_reset_APB2L(RCC_APB2LRSTR_TIM8_PWM);
3689:src-gen/sr5e1/clock.h **** }
3690:src-gen/sr5e1/clock.h **** 
3691:src-gen/sr5e1/clock.h **** /**
3692:src-gen/sr5e1/clock.h ****  * @brief   Enables TIM15 clock
3693:src-gen/sr5e1/clock.h ****  *
3694:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3695:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3696:src-gen/sr5e1/clock.h ****  *
3697:src-gen/sr5e1/clock.h ****  * @api
3698:src-gen/sr5e1/clock.h ****  */
3699:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_TIM15(bool smode) {
3700:src-gen/sr5e1/clock.h **** 
3701:src-gen/sr5e1/clock.h ****     clock_enable_APB2L(smode, RCC_APB2LENR_TIM15);
3702:src-gen/sr5e1/clock.h **** }
3703:src-gen/sr5e1/clock.h **** 
3704:src-gen/sr5e1/clock.h **** /**
3705:src-gen/sr5e1/clock.h ****  * @brief   Disables TIM15 clock
3706:src-gen/sr5e1/clock.h ****  *
3707:src-gen/sr5e1/clock.h ****  * @api
3708:src-gen/sr5e1/clock.h ****  */
3709:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_TIM15(void) {
3710:src-gen/sr5e1/clock.h **** 
3711:src-gen/sr5e1/clock.h ****     clock_disable_APB2L(RCC_APB2LENR_TIM15);
3712:src-gen/sr5e1/clock.h **** }
3713:src-gen/sr5e1/clock.h **** 
3714:src-gen/sr5e1/clock.h **** /**
3715:src-gen/sr5e1/clock.h ****  * @brief   Checks if TIM15 clock is enabled
3716:src-gen/sr5e1/clock.h ****  *
3717:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3718:src-gen/sr5e1/clock.h ****  *
3719:src-gen/sr5e1/clock.h ****  * @api
3720:src-gen/sr5e1/clock.h ****  */
3721:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_TIM15(void) {
3722:src-gen/sr5e1/clock.h **** 
3723:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2L(RCC_APB2LENR_TIM15);
3724:src-gen/sr5e1/clock.h **** }
3725:src-gen/sr5e1/clock.h **** 
3726:src-gen/sr5e1/clock.h **** /**
3727:src-gen/sr5e1/clock.h ****  * @brief   Resets TIM15
3728:src-gen/sr5e1/clock.h ****  *
3729:src-gen/sr5e1/clock.h ****  * @api
3730:src-gen/sr5e1/clock.h ****  */
3731:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_TIM15(void) {
3732:src-gen/sr5e1/clock.h **** 
3733:src-gen/sr5e1/clock.h ****     clock_reset_APB2L(RCC_APB2LRSTR_TIM15);
3734:src-gen/sr5e1/clock.h **** }
3735:src-gen/sr5e1/clock.h **** 
3736:src-gen/sr5e1/clock.h **** /**
3737:src-gen/sr5e1/clock.h ****  * @brief   Enables TIM16 clock
3738:src-gen/sr5e1/clock.h ****  *
3739:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3740:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3741:src-gen/sr5e1/clock.h ****  *
3742:src-gen/sr5e1/clock.h ****  * @api
3743:src-gen/sr5e1/clock.h ****  */
3744:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_TIM16(bool smode) {
3745:src-gen/sr5e1/clock.h **** 
3746:src-gen/sr5e1/clock.h ****     clock_enable_APB2L(smode, RCC_APB2LENR_TIM16);
3747:src-gen/sr5e1/clock.h **** }
3748:src-gen/sr5e1/clock.h **** 
3749:src-gen/sr5e1/clock.h **** /**
3750:src-gen/sr5e1/clock.h ****  * @brief   Disables TIM16 clock
3751:src-gen/sr5e1/clock.h ****  *
3752:src-gen/sr5e1/clock.h ****  * @api
3753:src-gen/sr5e1/clock.h ****  */
3754:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_TIM16(void) {
3755:src-gen/sr5e1/clock.h **** 
3756:src-gen/sr5e1/clock.h ****     clock_disable_APB2L(RCC_APB2LENR_TIM16);
3757:src-gen/sr5e1/clock.h **** }
3758:src-gen/sr5e1/clock.h **** 
3759:src-gen/sr5e1/clock.h **** /**
3760:src-gen/sr5e1/clock.h ****  * @brief   Checks if TIM16 clock is enabled
3761:src-gen/sr5e1/clock.h ****  *
3762:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3763:src-gen/sr5e1/clock.h ****  *
3764:src-gen/sr5e1/clock.h ****  * @api
3765:src-gen/sr5e1/clock.h ****  */
3766:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_TIM16(void) {
3767:src-gen/sr5e1/clock.h **** 
3768:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2L(RCC_APB2LENR_TIM16);
3769:src-gen/sr5e1/clock.h **** }
3770:src-gen/sr5e1/clock.h **** 
3771:src-gen/sr5e1/clock.h **** /**
3772:src-gen/sr5e1/clock.h ****  * @brief   Resets TIM16
3773:src-gen/sr5e1/clock.h ****  *
3774:src-gen/sr5e1/clock.h ****  * @api
3775:src-gen/sr5e1/clock.h ****  */
3776:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_TIM16(void) {
3777:src-gen/sr5e1/clock.h **** 
3778:src-gen/sr5e1/clock.h ****     clock_reset_APB2L(RCC_APB2LRSTR_TIM16);
3779:src-gen/sr5e1/clock.h **** }
3780:src-gen/sr5e1/clock.h **** 
3781:src-gen/sr5e1/clock.h **** /**
3782:src-gen/sr5e1/clock.h ****  * @brief   Enables UART1 clock
3783:src-gen/sr5e1/clock.h ****  *
3784:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3785:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3786:src-gen/sr5e1/clock.h ****  *
3787:src-gen/sr5e1/clock.h ****  * @api
3788:src-gen/sr5e1/clock.h ****  */
3789:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_UART1(bool smode) {
3790:src-gen/sr5e1/clock.h **** 
3791:src-gen/sr5e1/clock.h ****     clock_enable_APB2L(smode, RCC_APB2LENR_UART1);
3792:src-gen/sr5e1/clock.h **** }
3793:src-gen/sr5e1/clock.h **** 
3794:src-gen/sr5e1/clock.h **** /**
3795:src-gen/sr5e1/clock.h ****  * @brief   Disables UART1 clock
3796:src-gen/sr5e1/clock.h ****  *
3797:src-gen/sr5e1/clock.h ****  * @api
3798:src-gen/sr5e1/clock.h ****  */
3799:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_UART1(void) {
3800:src-gen/sr5e1/clock.h **** 
3801:src-gen/sr5e1/clock.h ****     clock_disable_APB2L(RCC_APB2LENR_UART1);
3802:src-gen/sr5e1/clock.h **** }
3803:src-gen/sr5e1/clock.h **** 
3804:src-gen/sr5e1/clock.h **** /**
3805:src-gen/sr5e1/clock.h ****  * @brief   Checks if UART1 clock is enabled
3806:src-gen/sr5e1/clock.h ****  *
3807:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3808:src-gen/sr5e1/clock.h ****  *
3809:src-gen/sr5e1/clock.h ****  * @api
3810:src-gen/sr5e1/clock.h ****  */
3811:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_UART1(void) {
3812:src-gen/sr5e1/clock.h **** 
3813:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2L(RCC_APB2LENR_UART1);
3814:src-gen/sr5e1/clock.h **** }
3815:src-gen/sr5e1/clock.h **** 
3816:src-gen/sr5e1/clock.h **** /**
3817:src-gen/sr5e1/clock.h ****  * @brief   Resets UART1
3818:src-gen/sr5e1/clock.h ****  *
3819:src-gen/sr5e1/clock.h ****  * @api
3820:src-gen/sr5e1/clock.h ****  */
3821:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_UART1(void) {
3822:src-gen/sr5e1/clock.h **** 
3823:src-gen/sr5e1/clock.h ****     clock_reset_APB2L(RCC_APB2LRSTR_UART1);
3824:src-gen/sr5e1/clock.h **** }
3825:src-gen/sr5e1/clock.h **** 
3826:src-gen/sr5e1/clock.h **** /**
3827:src-gen/sr5e1/clock.h ****  * @brief   Enables UART2 clock
3828:src-gen/sr5e1/clock.h ****  *
3829:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3830:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3831:src-gen/sr5e1/clock.h ****  *
3832:src-gen/sr5e1/clock.h ****  * @api
3833:src-gen/sr5e1/clock.h ****  */
3834:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_UART2(bool smode) {
3835:src-gen/sr5e1/clock.h **** 
3836:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_UART2);
3837:src-gen/sr5e1/clock.h **** }
3838:src-gen/sr5e1/clock.h **** 
3839:src-gen/sr5e1/clock.h **** /**
3840:src-gen/sr5e1/clock.h ****  * @brief   Disables UART2 clock
3841:src-gen/sr5e1/clock.h ****  *
3842:src-gen/sr5e1/clock.h ****  * @api
3843:src-gen/sr5e1/clock.h ****  */
3844:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_UART2(void) {
3845:src-gen/sr5e1/clock.h **** 
3846:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_UART2);
3847:src-gen/sr5e1/clock.h **** }
3848:src-gen/sr5e1/clock.h **** 
3849:src-gen/sr5e1/clock.h **** /**
3850:src-gen/sr5e1/clock.h ****  * @brief   Checks if UART2 clock is enabled
3851:src-gen/sr5e1/clock.h ****  *
3852:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3853:src-gen/sr5e1/clock.h ****  *
3854:src-gen/sr5e1/clock.h ****  * @api
3855:src-gen/sr5e1/clock.h ****  */
3856:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_UART2(void) {
3857:src-gen/sr5e1/clock.h **** 
3858:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_UART2);
3859:src-gen/sr5e1/clock.h **** }
3860:src-gen/sr5e1/clock.h **** 
3861:src-gen/sr5e1/clock.h **** /**
3862:src-gen/sr5e1/clock.h ****  * @brief   Resets UART2
3863:src-gen/sr5e1/clock.h ****  *
3864:src-gen/sr5e1/clock.h ****  * @api
3865:src-gen/sr5e1/clock.h ****  */
3866:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_UART2(void) {
3867:src-gen/sr5e1/clock.h **** 
3868:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_UART2);
3869:src-gen/sr5e1/clock.h **** }
3870:src-gen/sr5e1/clock.h **** 
3871:src-gen/sr5e1/clock.h **** /**
3872:src-gen/sr5e1/clock.h ****  * @brief   Enables UART3 clock
3873:src-gen/sr5e1/clock.h ****  *
3874:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3875:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3876:src-gen/sr5e1/clock.h ****  *
3877:src-gen/sr5e1/clock.h ****  * @api
3878:src-gen/sr5e1/clock.h ****  */
3879:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_UART3(bool smode) {
3880:src-gen/sr5e1/clock.h **** 
3881:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_UART3);
3882:src-gen/sr5e1/clock.h **** }
3883:src-gen/sr5e1/clock.h **** 
3884:src-gen/sr5e1/clock.h **** /**
3885:src-gen/sr5e1/clock.h ****  * @brief   Disables UART3 clock
3886:src-gen/sr5e1/clock.h ****  *
3887:src-gen/sr5e1/clock.h ****  * @api
3888:src-gen/sr5e1/clock.h ****  */
3889:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_UART3(void) {
3890:src-gen/sr5e1/clock.h **** 
3891:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_UART3);
3892:src-gen/sr5e1/clock.h **** }
3893:src-gen/sr5e1/clock.h **** 
3894:src-gen/sr5e1/clock.h **** /**
3895:src-gen/sr5e1/clock.h ****  * @brief   Checks if UART3 clock is enabled
3896:src-gen/sr5e1/clock.h ****  *
3897:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3898:src-gen/sr5e1/clock.h ****  *
3899:src-gen/sr5e1/clock.h ****  * @api
3900:src-gen/sr5e1/clock.h ****  */
3901:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_UART3(void) {
3902:src-gen/sr5e1/clock.h **** 
3903:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_UART3);
3904:src-gen/sr5e1/clock.h **** }
3905:src-gen/sr5e1/clock.h **** 
3906:src-gen/sr5e1/clock.h **** /**
3907:src-gen/sr5e1/clock.h ****  * @brief   Resets UART3
3908:src-gen/sr5e1/clock.h ****  *
3909:src-gen/sr5e1/clock.h ****  * @api
3910:src-gen/sr5e1/clock.h ****  */
3911:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_UART3(void) {
3912:src-gen/sr5e1/clock.h **** 
3913:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_UART3);
3914:src-gen/sr5e1/clock.h **** }
3915:src-gen/sr5e1/clock.h **** 
3916:src-gen/sr5e1/clock.h **** /**
3917:src-gen/sr5e1/clock.h ****  * @brief   Enables SDADC1 clock
3918:src-gen/sr5e1/clock.h ****  *
3919:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3920:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3921:src-gen/sr5e1/clock.h ****  *
3922:src-gen/sr5e1/clock.h ****  * @api
3923:src-gen/sr5e1/clock.h ****  */
3924:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_SDADC1(bool smode) {
3925:src-gen/sr5e1/clock.h **** 
3926:src-gen/sr5e1/clock.h ****     clock_enable_APB2H(smode, RCC_APB2HENR_SD_ADC1);
3927:src-gen/sr5e1/clock.h **** }
3928:src-gen/sr5e1/clock.h **** 
3929:src-gen/sr5e1/clock.h **** /**
3930:src-gen/sr5e1/clock.h ****  * @brief   Disables SDADC1 clock
3931:src-gen/sr5e1/clock.h ****  *
3932:src-gen/sr5e1/clock.h ****  * @api
3933:src-gen/sr5e1/clock.h ****  */
3934:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_SDADC1(void) {
3935:src-gen/sr5e1/clock.h **** 
3936:src-gen/sr5e1/clock.h ****     clock_disable_APB2H(RCC_APB2HENR_SD_ADC1);
3937:src-gen/sr5e1/clock.h **** }
3938:src-gen/sr5e1/clock.h **** 
3939:src-gen/sr5e1/clock.h **** /**
3940:src-gen/sr5e1/clock.h ****  * @brief   Checks if SDADC1 clock is enabled
3941:src-gen/sr5e1/clock.h ****  *
3942:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3943:src-gen/sr5e1/clock.h ****  *
3944:src-gen/sr5e1/clock.h ****  * @api
3945:src-gen/sr5e1/clock.h ****  */
3946:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_SDADC1(void) {
3947:src-gen/sr5e1/clock.h **** 
3948:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2H(RCC_APB2HENR_SD_ADC1);
3949:src-gen/sr5e1/clock.h **** }
3950:src-gen/sr5e1/clock.h **** 
3951:src-gen/sr5e1/clock.h **** /**
3952:src-gen/sr5e1/clock.h ****  * @brief   Resets SDADC1
3953:src-gen/sr5e1/clock.h ****  *
3954:src-gen/sr5e1/clock.h ****  * @api
3955:src-gen/sr5e1/clock.h ****  */
3956:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_SDADC1(void) {
3957:src-gen/sr5e1/clock.h **** 
3958:src-gen/sr5e1/clock.h ****     clock_reset_APB2H(RCC_APB2HRSTR_SD_ADC1);
3959:src-gen/sr5e1/clock.h **** }
3960:src-gen/sr5e1/clock.h **** 
3961:src-gen/sr5e1/clock.h **** /**
3962:src-gen/sr5e1/clock.h ****  * @brief   Enables SDADC2 clock
3963:src-gen/sr5e1/clock.h ****  *
3964:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3965:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3966:src-gen/sr5e1/clock.h ****  *
3967:src-gen/sr5e1/clock.h ****  * @api
3968:src-gen/sr5e1/clock.h ****  */
3969:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_SDADC2(bool smode) {
3970:src-gen/sr5e1/clock.h **** 
3971:src-gen/sr5e1/clock.h ****     clock_enable_APB2H(smode, RCC_APB2HENR_SD_ADC2);
3972:src-gen/sr5e1/clock.h **** }
3973:src-gen/sr5e1/clock.h **** 
3974:src-gen/sr5e1/clock.h **** /**
3975:src-gen/sr5e1/clock.h ****  * @brief   Disables SDADC2 clock
3976:src-gen/sr5e1/clock.h ****  *
3977:src-gen/sr5e1/clock.h ****  * @api
3978:src-gen/sr5e1/clock.h ****  */
3979:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_SDADC2(void) {
3980:src-gen/sr5e1/clock.h **** 
3981:src-gen/sr5e1/clock.h ****     clock_disable_APB2H(RCC_APB2HENR_SD_ADC2);
3982:src-gen/sr5e1/clock.h **** }
3983:src-gen/sr5e1/clock.h **** 
3984:src-gen/sr5e1/clock.h **** /**
3985:src-gen/sr5e1/clock.h ****  * @brief   Checks if SDADC2 clock is enabled
3986:src-gen/sr5e1/clock.h ****  *
3987:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3988:src-gen/sr5e1/clock.h ****  *
3989:src-gen/sr5e1/clock.h ****  * @api
3990:src-gen/sr5e1/clock.h ****  */
3991:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_SDADC2(void) {
3992:src-gen/sr5e1/clock.h **** 
3993:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2H(RCC_APB2HENR_SD_ADC2);
3994:src-gen/sr5e1/clock.h **** }
3995:src-gen/sr5e1/clock.h **** 
3996:src-gen/sr5e1/clock.h **** /**
3997:src-gen/sr5e1/clock.h ****  * @brief   Resets SDADC2
3998:src-gen/sr5e1/clock.h ****  *
3999:src-gen/sr5e1/clock.h ****  * @api
4000:src-gen/sr5e1/clock.h ****  */
4001:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_SDADC2(void) {
4002:src-gen/sr5e1/clock.h **** 
4003:src-gen/sr5e1/clock.h ****     clock_reset_APB2H(RCC_APB2HRSTR_SD_ADC2);
4004:src-gen/sr5e1/clock.h **** }
4005:src-gen/sr5e1/clock.h **** 
4006:src-gen/sr5e1/clock.h **** /**
4007:src-gen/sr5e1/clock.h ****  * @brief   Enables FDCAN1 clock
4008:src-gen/sr5e1/clock.h ****  *
4009:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
4010:src-gen/sr5e1/clock.h ****  *                      sleep mode)
4011:src-gen/sr5e1/clock.h ****  *
4012:src-gen/sr5e1/clock.h ****  * @api
4013:src-gen/sr5e1/clock.h ****  */
4014:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_FDCAN1(bool smode) {
4015:src-gen/sr5e1/clock.h **** 
4016:src-gen/sr5e1/clock.h ****     clock_enable_APB2H(smode, RCC_APB2HENR_FDCAN1);
4017:src-gen/sr5e1/clock.h **** }
 217              		.loc 2 4017 1
 218 009c 00BF     		nop
 219              	.LBE171:
 220              	.LBE170:
 114:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         clock_enable_FDCAN1(true);
 115:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         if(can_enabled == 0U) {
 221              		.loc 1 115 24
 222 009e 864B     		ldr	r3, .L95+4
 223 00a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 224              		.loc 1 115 11
 225 00a2 002B     		cmp	r3, #0
 226 00a4 40F0A081 		bne	.L18
 227 00a8 0123     		movs	r3, #1
 228 00aa 8DF8AB30 		strb	r3, [sp, #171]
 229 00ae 9DF8AB30 		ldrb	r3, [sp, #171]
 230 00b2 8DF8AA30 		strb	r3, [sp, #170]
 231 00b6 4FF48063 		mov	r3, #1024
 232 00ba 2993     		str	r3, [sp, #164]
 233              	.LBB174:
 234              	.LBB175:
 235              	.LBB176:
 236              	.LBB177:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 237              		.loc 2 1477 19
 238 00bc 4FF08843 		mov	r3, #1140850688
 239 00c0 D3F88C20 		ldr	r2, [r3, #140]
 240 00c4 4FF08841 		mov	r1, #1140850688
 241 00c8 299B     		ldr	r3, [sp, #164]
 242 00ca 1343     		orrs	r3, r3, r2
 243 00cc C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 244              		.loc 2 1478 8
 245 00d0 9DF8AA30 		ldrb	r3, [sp, #170]	@ zero_extendqisi2
 246 00d4 002B     		cmp	r3, #0
 247 00d6 14D0     		beq	.L19
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 248              		.loc 2 1479 28
 249 00d8 4FF08843 		mov	r3, #1140850688
 250 00dc D3F8AC20 		ldr	r2, [r3, #172]
 251 00e0 4FF08841 		mov	r1, #1140850688
 252 00e4 299B     		ldr	r3, [sp, #164]
 253 00e6 1343     		orrs	r3, r3, r2
 254 00e8 C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 255              		.loc 2 1481 28
 256 00ec 4FF08843 		mov	r3, #1140850688
 257 00f0 D3F8CC20 		ldr	r2, [r3, #204]
 258 00f4 4FF08841 		mov	r1, #1140850688
 259 00f8 299B     		ldr	r3, [sp, #164]
 260 00fa 1343     		orrs	r3, r3, r2
 261 00fc C1F8CC30 		str	r3, [r1, #204]
 262 0100 15E0     		b	.L20
 263              	.L19:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 264              		.loc 2 1485 28
 265 0102 4FF08843 		mov	r3, #1140850688
 266 0106 D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 267              		.loc 2 1485 31
 268 010a 299B     		ldr	r3, [sp, #164]
 269 010c DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 270              		.loc 2 1485 28
 271 010e 4FF08841 		mov	r1, #1140850688
 272 0112 1340     		ands	r3, r3, r2
 273 0114 C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 274              		.loc 2 1487 28
 275 0118 4FF08843 		mov	r3, #1140850688
 276 011c D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 277              		.loc 2 1487 31
 278 0120 299B     		ldr	r3, [sp, #164]
 279 0122 DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 280              		.loc 2 1487 28
 281 0124 4FF08841 		mov	r1, #1140850688
 282 0128 1340     		ands	r3, r3, r2
 283 012a C1F8CC30 		str	r3, [r1, #204]
 284              	.L20:
1491:src-gen/sr5e1/clock.h **** }
 285              		.loc 2 1491 15
 286 012e 4FF08843 		mov	r3, #1140850688
 287 0132 D3F88C30 		ldr	r3, [r3, #140]
 288              	.LBE177:
 289              	.LBE176:
4018:src-gen/sr5e1/clock.h **** 
4019:src-gen/sr5e1/clock.h **** /**
4020:src-gen/sr5e1/clock.h ****  * @brief   Disables FDCAN1 clock
4021:src-gen/sr5e1/clock.h ****  *
4022:src-gen/sr5e1/clock.h ****  * @api
4023:src-gen/sr5e1/clock.h ****  */
4024:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_FDCAN1(void) {
4025:src-gen/sr5e1/clock.h **** 
4026:src-gen/sr5e1/clock.h ****     clock_disable_APB2H(RCC_APB2HENR_FDCAN1);
4027:src-gen/sr5e1/clock.h **** }
4028:src-gen/sr5e1/clock.h **** 
4029:src-gen/sr5e1/clock.h **** /**
4030:src-gen/sr5e1/clock.h ****  * @brief   Checks if FDCAN1 clock is enabled
4031:src-gen/sr5e1/clock.h ****  *
4032:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
4033:src-gen/sr5e1/clock.h ****  *
4034:src-gen/sr5e1/clock.h ****  * @api
4035:src-gen/sr5e1/clock.h ****  */
4036:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_FDCAN1(void) {
4037:src-gen/sr5e1/clock.h **** 
4038:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2H(RCC_APB2HENR_FDCAN1);
4039:src-gen/sr5e1/clock.h **** }
4040:src-gen/sr5e1/clock.h **** 
4041:src-gen/sr5e1/clock.h **** /**
4042:src-gen/sr5e1/clock.h ****  * @brief   Resets FDCAN1
4043:src-gen/sr5e1/clock.h ****  *
4044:src-gen/sr5e1/clock.h ****  * @api
4045:src-gen/sr5e1/clock.h ****  */
4046:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_FDCAN1(void) {
4047:src-gen/sr5e1/clock.h **** 
4048:src-gen/sr5e1/clock.h ****     clock_reset_APB2H(RCC_APB2HRSTR_FDCAN1);
4049:src-gen/sr5e1/clock.h **** }
4050:src-gen/sr5e1/clock.h **** 
4051:src-gen/sr5e1/clock.h **** /**
4052:src-gen/sr5e1/clock.h ****  * @brief   Enables FDCAN2 clock
4053:src-gen/sr5e1/clock.h ****  *
4054:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
4055:src-gen/sr5e1/clock.h ****  *                      sleep mode)
4056:src-gen/sr5e1/clock.h ****  *
4057:src-gen/sr5e1/clock.h ****  * @api
4058:src-gen/sr5e1/clock.h ****  */
4059:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_FDCAN2(bool smode) {
4060:src-gen/sr5e1/clock.h **** 
4061:src-gen/sr5e1/clock.h ****     clock_enable_APB2H(smode, RCC_APB2HENR_FDCAN2);
4062:src-gen/sr5e1/clock.h **** }
 290              		.loc 2 4062 1
 291 0136 00BF     		nop
 292 0138 0123     		movs	r3, #1
 293 013a 8DF8B330 		strb	r3, [sp, #179]
 294 013e 9DF8B330 		ldrb	r3, [sp, #179]
 295 0142 8DF8B230 		strb	r3, [sp, #178]
 296 0146 4FF48053 		mov	r3, #4096
 297 014a 2B93     		str	r3, [sp, #172]
 298              	.LBE175:
 299              	.LBE174:
 300              	.LBB178:
 301              	.LBB179:
 302              	.LBB180:
 303              	.LBB181:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 304              		.loc 2 1477 19
 305 014c 4FF08843 		mov	r3, #1140850688
 306 0150 D3F88C20 		ldr	r2, [r3, #140]
 307 0154 4FF08841 		mov	r1, #1140850688
 308 0158 2B9B     		ldr	r3, [sp, #172]
 309 015a 1343     		orrs	r3, r3, r2
 310 015c C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 311              		.loc 2 1478 8
 312 0160 9DF8B230 		ldrb	r3, [sp, #178]	@ zero_extendqisi2
 313 0164 002B     		cmp	r3, #0
 314 0166 14D0     		beq	.L22
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 315              		.loc 2 1479 28
 316 0168 4FF08843 		mov	r3, #1140850688
 317 016c D3F8AC20 		ldr	r2, [r3, #172]
 318 0170 4FF08841 		mov	r1, #1140850688
 319 0174 2B9B     		ldr	r3, [sp, #172]
 320 0176 1343     		orrs	r3, r3, r2
 321 0178 C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 322              		.loc 2 1481 28
 323 017c 4FF08843 		mov	r3, #1140850688
 324 0180 D3F8CC20 		ldr	r2, [r3, #204]
 325 0184 4FF08841 		mov	r1, #1140850688
 326 0188 2B9B     		ldr	r3, [sp, #172]
 327 018a 1343     		orrs	r3, r3, r2
 328 018c C1F8CC30 		str	r3, [r1, #204]
 329 0190 15E0     		b	.L23
 330              	.L22:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 331              		.loc 2 1485 28
 332 0192 4FF08843 		mov	r3, #1140850688
 333 0196 D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 334              		.loc 2 1485 31
 335 019a 2B9B     		ldr	r3, [sp, #172]
 336 019c DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 337              		.loc 2 1485 28
 338 019e 4FF08841 		mov	r1, #1140850688
 339 01a2 1340     		ands	r3, r3, r2
 340 01a4 C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 341              		.loc 2 1487 28
 342 01a8 4FF08843 		mov	r3, #1140850688
 343 01ac D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 344              		.loc 2 1487 31
 345 01b0 2B9B     		ldr	r3, [sp, #172]
 346 01b2 DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 347              		.loc 2 1487 28
 348 01b4 4FF08841 		mov	r1, #1140850688
 349 01b8 1340     		ands	r3, r3, r2
 350 01ba C1F8CC30 		str	r3, [r1, #204]
 351              	.L23:
1491:src-gen/sr5e1/clock.h **** }
 352              		.loc 2 1491 15
 353 01be 4FF08843 		mov	r3, #1140850688
 354 01c2 D3F88C30 		ldr	r3, [r3, #140]
 355              	.LBE181:
 356              	.LBE180:
4063:src-gen/sr5e1/clock.h **** 
4064:src-gen/sr5e1/clock.h **** /**
4065:src-gen/sr5e1/clock.h ****  * @brief   Disables FDCAN2 clock
4066:src-gen/sr5e1/clock.h ****  *
4067:src-gen/sr5e1/clock.h ****  * @api
4068:src-gen/sr5e1/clock.h ****  */
4069:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_FDCAN2(void) {
4070:src-gen/sr5e1/clock.h **** 
4071:src-gen/sr5e1/clock.h ****     clock_disable_APB2H(RCC_APB2HENR_FDCAN2);
4072:src-gen/sr5e1/clock.h **** }
4073:src-gen/sr5e1/clock.h **** 
4074:src-gen/sr5e1/clock.h **** /**
4075:src-gen/sr5e1/clock.h ****  * @brief   Checks if FDCAN2 clock is enabled
4076:src-gen/sr5e1/clock.h ****  *
4077:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
4078:src-gen/sr5e1/clock.h ****  *
4079:src-gen/sr5e1/clock.h ****  * @api
4080:src-gen/sr5e1/clock.h ****  */
4081:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_FDCAN2(void) {
4082:src-gen/sr5e1/clock.h **** 
4083:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2H(RCC_APB2HENR_FDCAN2);
4084:src-gen/sr5e1/clock.h **** }
4085:src-gen/sr5e1/clock.h **** 
4086:src-gen/sr5e1/clock.h **** /**
4087:src-gen/sr5e1/clock.h ****  * @brief   Resets FDCAN2
4088:src-gen/sr5e1/clock.h ****  *
4089:src-gen/sr5e1/clock.h ****  * @api
4090:src-gen/sr5e1/clock.h ****  */
4091:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_FDCAN2(void) {
4092:src-gen/sr5e1/clock.h **** 
4093:src-gen/sr5e1/clock.h ****     clock_reset_APB2H(RCC_APB2HRSTR_FDCAN2);
4094:src-gen/sr5e1/clock.h **** }
4095:src-gen/sr5e1/clock.h **** 
4096:src-gen/sr5e1/clock.h **** /**
4097:src-gen/sr5e1/clock.h ****  * @brief   Enables FDCAN3 clock
4098:src-gen/sr5e1/clock.h ****  *
4099:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
4100:src-gen/sr5e1/clock.h ****  *                      sleep mode)
4101:src-gen/sr5e1/clock.h ****  *
4102:src-gen/sr5e1/clock.h ****  * @api
4103:src-gen/sr5e1/clock.h ****  */
4104:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_FDCAN3(bool smode) {
4105:src-gen/sr5e1/clock.h **** 
4106:src-gen/sr5e1/clock.h ****     clock_enable_APB2H(smode, RCC_APB2HENR_FDCAN3);
4107:src-gen/sr5e1/clock.h **** }
 357              		.loc 2 4107 1
 358 01c6 00BF     		nop
 359 01c8 0123     		movs	r3, #1
 360 01ca 8DF8BB30 		strb	r3, [sp, #187]
 361 01ce 9DF8BB30 		ldrb	r3, [sp, #187]
 362 01d2 8DF8BA30 		strb	r3, [sp, #186]
 363 01d6 4FF48043 		mov	r3, #16384
 364 01da 2D93     		str	r3, [sp, #180]
 365              	.LBE179:
 366              	.LBE178:
 367              	.LBB182:
 368              	.LBB183:
 369              	.LBB184:
 370              	.LBB185:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 371              		.loc 2 1477 19
 372 01dc 4FF08843 		mov	r3, #1140850688
 373 01e0 D3F88C20 		ldr	r2, [r3, #140]
 374 01e4 4FF08841 		mov	r1, #1140850688
 375 01e8 2D9B     		ldr	r3, [sp, #180]
 376 01ea 1343     		orrs	r3, r3, r2
 377 01ec C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 378              		.loc 2 1478 8
 379 01f0 9DF8BA30 		ldrb	r3, [sp, #186]	@ zero_extendqisi2
 380 01f4 002B     		cmp	r3, #0
 381 01f6 14D0     		beq	.L25
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 382              		.loc 2 1479 28
 383 01f8 4FF08843 		mov	r3, #1140850688
 384 01fc D3F8AC20 		ldr	r2, [r3, #172]
 385 0200 4FF08841 		mov	r1, #1140850688
 386 0204 2D9B     		ldr	r3, [sp, #180]
 387 0206 1343     		orrs	r3, r3, r2
 388 0208 C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 389              		.loc 2 1481 28
 390 020c 4FF08843 		mov	r3, #1140850688
 391 0210 D3F8CC20 		ldr	r2, [r3, #204]
 392 0214 4FF08841 		mov	r1, #1140850688
 393 0218 2D9B     		ldr	r3, [sp, #180]
 394 021a 1343     		orrs	r3, r3, r2
 395 021c C1F8CC30 		str	r3, [r1, #204]
 396 0220 15E0     		b	.L26
 397              	.L25:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 398              		.loc 2 1485 28
 399 0222 4FF08843 		mov	r3, #1140850688
 400 0226 D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 401              		.loc 2 1485 31
 402 022a 2D9B     		ldr	r3, [sp, #180]
 403 022c DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 404              		.loc 2 1485 28
 405 022e 4FF08841 		mov	r1, #1140850688
 406 0232 1340     		ands	r3, r3, r2
 407 0234 C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 408              		.loc 2 1487 28
 409 0238 4FF08843 		mov	r3, #1140850688
 410 023c D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 411              		.loc 2 1487 31
 412 0240 2D9B     		ldr	r3, [sp, #180]
 413 0242 DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 414              		.loc 2 1487 28
 415 0244 4FF08841 		mov	r1, #1140850688
 416 0248 1340     		ands	r3, r3, r2
 417 024a C1F8CC30 		str	r3, [r1, #204]
 418              	.L26:
1491:src-gen/sr5e1/clock.h **** }
 419              		.loc 2 1491 15
 420 024e 4FF08843 		mov	r3, #1140850688
 421 0252 D3F88C30 		ldr	r3, [r3, #140]
 422              	.LBE185:
 423              	.LBE184:
4108:src-gen/sr5e1/clock.h **** 
4109:src-gen/sr5e1/clock.h **** /**
4110:src-gen/sr5e1/clock.h ****  * @brief   Disables FDCAN3 clock
4111:src-gen/sr5e1/clock.h ****  *
4112:src-gen/sr5e1/clock.h ****  * @api
4113:src-gen/sr5e1/clock.h ****  */
4114:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_FDCAN3(void) {
4115:src-gen/sr5e1/clock.h **** 
4116:src-gen/sr5e1/clock.h ****     clock_disable_APB2H(RCC_APB2HENR_FDCAN3);
4117:src-gen/sr5e1/clock.h **** }
4118:src-gen/sr5e1/clock.h **** 
4119:src-gen/sr5e1/clock.h **** /**
4120:src-gen/sr5e1/clock.h ****  * @brief   Checks if FDCAN3 clock is enabled
4121:src-gen/sr5e1/clock.h ****  *
4122:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
4123:src-gen/sr5e1/clock.h ****  *
4124:src-gen/sr5e1/clock.h ****  * @api
4125:src-gen/sr5e1/clock.h ****  */
4126:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_FDCAN3(void) {
4127:src-gen/sr5e1/clock.h **** 
4128:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2H(RCC_APB2HENR_FDCAN3);
4129:src-gen/sr5e1/clock.h **** }
4130:src-gen/sr5e1/clock.h **** 
4131:src-gen/sr5e1/clock.h **** /**
4132:src-gen/sr5e1/clock.h ****  * @brief   Resets FDCAN3
4133:src-gen/sr5e1/clock.h ****  *
4134:src-gen/sr5e1/clock.h ****  * @api
4135:src-gen/sr5e1/clock.h ****  */
4136:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_FDCAN3(void) {
4137:src-gen/sr5e1/clock.h **** 
4138:src-gen/sr5e1/clock.h ****     clock_reset_APB2H(RCC_APB2HRSTR_FDCAN3);
4139:src-gen/sr5e1/clock.h **** }
4140:src-gen/sr5e1/clock.h **** 
4141:src-gen/sr5e1/clock.h **** /**
4142:src-gen/sr5e1/clock.h ****  * @brief   Enables FDCAN4 clock
4143:src-gen/sr5e1/clock.h ****  *
4144:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
4145:src-gen/sr5e1/clock.h ****  *                      sleep mode)
4146:src-gen/sr5e1/clock.h ****  *
4147:src-gen/sr5e1/clock.h ****  * @api
4148:src-gen/sr5e1/clock.h ****  */
4149:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_FDCAN4(bool smode) {
4150:src-gen/sr5e1/clock.h **** 
4151:src-gen/sr5e1/clock.h ****     clock_enable_APB2H(smode, RCC_APB2HENR_FDCAN4);
4152:src-gen/sr5e1/clock.h **** }
 424              		.loc 2 4152 1
 425 0256 00BF     		nop
 426 0258 0123     		movs	r3, #1
 427 025a 8DF8C330 		strb	r3, [sp, #195]
 428 025e 9DF8C330 		ldrb	r3, [sp, #195]
 429 0262 8DF8C230 		strb	r3, [sp, #194]
 430 0266 4FF48033 		mov	r3, #65536
 431 026a 2F93     		str	r3, [sp, #188]
 432              	.LBE183:
 433              	.LBE182:
 434              	.LBB186:
 435              	.LBB187:
 436              	.LBB188:
 437              	.LBB189:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 438              		.loc 2 1477 19
 439 026c 4FF08843 		mov	r3, #1140850688
 440 0270 D3F88C20 		ldr	r2, [r3, #140]
 441 0274 4FF08841 		mov	r1, #1140850688
 442 0278 2F9B     		ldr	r3, [sp, #188]
 443 027a 1343     		orrs	r3, r3, r2
 444 027c C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 445              		.loc 2 1478 8
 446 0280 9DF8C230 		ldrb	r3, [sp, #194]	@ zero_extendqisi2
 447 0284 002B     		cmp	r3, #0
 448 0286 19D0     		beq	.L28
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 449              		.loc 2 1479 28
 450 0288 4FF08843 		mov	r3, #1140850688
 451 028c D3F8AC20 		ldr	r2, [r3, #172]
 452 0290 4FF08841 		mov	r1, #1140850688
 453 0294 2F9B     		ldr	r3, [sp, #188]
 454 0296 1343     		orrs	r3, r3, r2
 455 0298 C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 456              		.loc 2 1481 28
 457 029c 4FF08843 		mov	r3, #1140850688
 458 02a0 D3F8CC20 		ldr	r2, [r3, #204]
 459 02a4 4FF08841 		mov	r1, #1140850688
 460 02a8 2F9B     		ldr	r3, [sp, #188]
 461 02aa 1343     		orrs	r3, r3, r2
 462 02ac C1F8CC30 		str	r3, [r1, #204]
 463 02b0 1AE0     		b	.L29
 464              	.L96:
 465 02b2 00BF     		.align	2
 466              	.L95:
 467 02b4 00000000 		.word	DRV_CAN1
 468 02b8 00000000 		.word	can_enabled
 469              	.L28:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 470              		.loc 2 1485 28
 471 02bc 4FF08843 		mov	r3, #1140850688
 472 02c0 D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 473              		.loc 2 1485 31
 474 02c4 2F9B     		ldr	r3, [sp, #188]
 475 02c6 DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 476              		.loc 2 1485 28
 477 02c8 4FF08841 		mov	r1, #1140850688
 478 02cc 1340     		ands	r3, r3, r2
 479 02ce C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 480              		.loc 2 1487 28
 481 02d2 4FF08843 		mov	r3, #1140850688
 482 02d6 D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 483              		.loc 2 1487 31
 484 02da 2F9B     		ldr	r3, [sp, #188]
 485 02dc DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 486              		.loc 2 1487 28
 487 02de 4FF08841 		mov	r1, #1140850688
 488 02e2 1340     		ands	r3, r3, r2
 489 02e4 C1F8CC30 		str	r3, [r1, #204]
 490              	.L29:
1491:src-gen/sr5e1/clock.h **** }
 491              		.loc 2 1491 15
 492 02e8 4FF08843 		mov	r3, #1140850688
 493 02ec D3F88C30 		ldr	r3, [r3, #140]
 494              	.LBE189:
 495              	.LBE188:
4153:src-gen/sr5e1/clock.h **** 
4154:src-gen/sr5e1/clock.h **** /**
4155:src-gen/sr5e1/clock.h ****  * @brief   Disables FDCAN4 clock
4156:src-gen/sr5e1/clock.h ****  *
4157:src-gen/sr5e1/clock.h ****  * @api
4158:src-gen/sr5e1/clock.h ****  */
4159:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_FDCAN4(void) {
4160:src-gen/sr5e1/clock.h **** 
4161:src-gen/sr5e1/clock.h ****     clock_disable_APB2H(RCC_APB2HENR_FDCAN4);
4162:src-gen/sr5e1/clock.h **** }
4163:src-gen/sr5e1/clock.h **** 
4164:src-gen/sr5e1/clock.h **** /**
4165:src-gen/sr5e1/clock.h ****  * @brief   Checks if FDCAN4 clock is enabled
4166:src-gen/sr5e1/clock.h ****  *
4167:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
4168:src-gen/sr5e1/clock.h ****  *
4169:src-gen/sr5e1/clock.h ****  * @api
4170:src-gen/sr5e1/clock.h ****  */
4171:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_FDCAN4(void) {
4172:src-gen/sr5e1/clock.h **** 
4173:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2H(RCC_APB2HENR_FDCAN4);
4174:src-gen/sr5e1/clock.h **** }
4175:src-gen/sr5e1/clock.h **** 
4176:src-gen/sr5e1/clock.h **** /**
4177:src-gen/sr5e1/clock.h ****  * @brief   Resets FDCAN4
4178:src-gen/sr5e1/clock.h ****  *
4179:src-gen/sr5e1/clock.h ****  * @api
4180:src-gen/sr5e1/clock.h ****  */
4181:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_FDCAN4(void) {
4182:src-gen/sr5e1/clock.h **** 
4183:src-gen/sr5e1/clock.h ****     clock_reset_APB2H(RCC_APB2HRSTR_FDCAN4);
4184:src-gen/sr5e1/clock.h **** }
4185:src-gen/sr5e1/clock.h **** 
4186:src-gen/sr5e1/clock.h **** /**
4187:src-gen/sr5e1/clock.h ****  * @brief   Enables FDCAN MRAM clock
4188:src-gen/sr5e1/clock.h ****  *
4189:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
4190:src-gen/sr5e1/clock.h ****  *                      sleep mode)
4191:src-gen/sr5e1/clock.h ****  *
4192:src-gen/sr5e1/clock.h ****  * @api
4193:src-gen/sr5e1/clock.h ****  */
4194:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_FDCAN_MRAM(bool smode) {
4195:src-gen/sr5e1/clock.h **** 
4196:src-gen/sr5e1/clock.h ****     clock_enable_APB2H(smode, RCC_APB2HENR_FDCAN_MRAM);
4197:src-gen/sr5e1/clock.h **** }
 496              		.loc 2 4197 1
 497 02f0 00BF     		nop
 498 02f2 4FF48063 		mov	r3, #1024
 499 02f6 3193     		str	r3, [sp, #196]
 500              	.LBE187:
 501              	.LBE186:
 502              	.LBB190:
 503              	.LBB191:
 504              	.LBB192:
 505              	.LBB193:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 506              		.loc 2 1504 19
 507 02f8 4FF08843 		mov	r3, #1140850688
 508 02fc D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 509              		.loc 2 1504 22
 510 0300 319B     		ldr	r3, [sp, #196]
 511 0302 DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 512              		.loc 2 1504 19
 513 0304 4FF08841 		mov	r1, #1140850688
 514 0308 1340     		ands	r3, r3, r2
 515 030a C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 516              		.loc 2 1505 24
 517 030e 4FF08843 		mov	r3, #1140850688
 518 0312 D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 519              		.loc 2 1505 27
 520 0316 319B     		ldr	r3, [sp, #196]
 521 0318 DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 522              		.loc 2 1505 24
 523 031a 4FF08841 		mov	r1, #1140850688
 524 031e 1340     		ands	r3, r3, r2
 525 0320 C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 526              		.loc 2 1507 24
 527 0324 4FF08843 		mov	r3, #1140850688
 528 0328 D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 529              		.loc 2 1507 27
 530 032c 319B     		ldr	r3, [sp, #196]
 531 032e DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 532              		.loc 2 1507 24
 533 0330 4FF08841 		mov	r1, #1140850688
 534 0334 1340     		ands	r3, r3, r2
 535 0336 C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 536              		.loc 2 1510 15
 537 033a 4FF08843 		mov	r3, #1140850688
 538 033e D3F88C30 		ldr	r3, [r3, #140]
 539              	.LBE193:
 540              	.LBE192:
4072:src-gen/sr5e1/clock.h **** 
 541              		.loc 2 4072 1
 542 0342 00BF     		nop
 543 0344 4FF48053 		mov	r3, #4096
 544 0348 3293     		str	r3, [sp, #200]
 545              	.LBE191:
 546              	.LBE190:
 547              	.LBB194:
 548              	.LBB195:
 549              	.LBB196:
 550              	.LBB197:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 551              		.loc 2 1504 19
 552 034a 4FF08843 		mov	r3, #1140850688
 553 034e D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 554              		.loc 2 1504 22
 555 0352 329B     		ldr	r3, [sp, #200]
 556 0354 DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 557              		.loc 2 1504 19
 558 0356 4FF08841 		mov	r1, #1140850688
 559 035a 1340     		ands	r3, r3, r2
 560 035c C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 561              		.loc 2 1505 24
 562 0360 4FF08843 		mov	r3, #1140850688
 563 0364 D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 564              		.loc 2 1505 27
 565 0368 329B     		ldr	r3, [sp, #200]
 566 036a DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 567              		.loc 2 1505 24
 568 036c 4FF08841 		mov	r1, #1140850688
 569 0370 1340     		ands	r3, r3, r2
 570 0372 C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 571              		.loc 2 1507 24
 572 0376 4FF08843 		mov	r3, #1140850688
 573 037a D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 574              		.loc 2 1507 27
 575 037e 329B     		ldr	r3, [sp, #200]
 576 0380 DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 577              		.loc 2 1507 24
 578 0382 4FF08841 		mov	r1, #1140850688
 579 0386 1340     		ands	r3, r3, r2
 580 0388 C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 581              		.loc 2 1510 15
 582 038c 4FF08843 		mov	r3, #1140850688
 583 0390 D3F88C30 		ldr	r3, [r3, #140]
 584              	.LBE197:
 585              	.LBE196:
4117:src-gen/sr5e1/clock.h **** 
 586              		.loc 2 4117 1
 587 0394 00BF     		nop
 588 0396 4FF48043 		mov	r3, #16384
 589 039a 3393     		str	r3, [sp, #204]
 590              	.LBE195:
 591              	.LBE194:
 592              	.LBB198:
 593              	.LBB199:
 594              	.LBB200:
 595              	.LBB201:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 596              		.loc 2 1504 19
 597 039c 4FF08843 		mov	r3, #1140850688
 598 03a0 D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 599              		.loc 2 1504 22
 600 03a4 339B     		ldr	r3, [sp, #204]
 601 03a6 DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 602              		.loc 2 1504 19
 603 03a8 4FF08841 		mov	r1, #1140850688
 604 03ac 1340     		ands	r3, r3, r2
 605 03ae C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 606              		.loc 2 1505 24
 607 03b2 4FF08843 		mov	r3, #1140850688
 608 03b6 D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 609              		.loc 2 1505 27
 610 03ba 339B     		ldr	r3, [sp, #204]
 611 03bc DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 612              		.loc 2 1505 24
 613 03be 4FF08841 		mov	r1, #1140850688
 614 03c2 1340     		ands	r3, r3, r2
 615 03c4 C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 616              		.loc 2 1507 24
 617 03c8 4FF08843 		mov	r3, #1140850688
 618 03cc D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 619              		.loc 2 1507 27
 620 03d0 339B     		ldr	r3, [sp, #204]
 621 03d2 DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 622              		.loc 2 1507 24
 623 03d4 4FF08841 		mov	r1, #1140850688
 624 03d8 1340     		ands	r3, r3, r2
 625 03da C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 626              		.loc 2 1510 15
 627 03de 4FF08843 		mov	r3, #1140850688
 628 03e2 D3F88C30 		ldr	r3, [r3, #140]
 629              	.LBE201:
 630              	.LBE200:
4162:src-gen/sr5e1/clock.h **** 
 631              		.loc 2 4162 1
 632 03e6 00BF     		nop
 633              	.L18:
 634              	.LBE199:
 635              	.LBE198:
 116:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN2(true);
 117:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN3(true);
 118:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN4(true);
 119:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN_MRAM(true);
 120:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_disable_FDCAN2();
 121:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_disable_FDCAN3();
 122:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_disable_FDCAN4();
 123:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         }
 124:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         can_enabled |= (1U << 0U);
 636              		.loc 1 124 21
 637 03e8 AF4B     		ldr	r3, .L97
 638 03ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 639 03ec 43F00103 		orr	r3, r3, #1
 640 03f0 DAB2     		uxtb	r2, r3
 641 03f2 AD4B     		ldr	r3, .L97
 642 03f4 1A70     		strb	r2, [r3]
 125:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN2) {
 126:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         clock_enable_FDCAN2(true);
 127:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         if(can_enabled == 0U) {
 128:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN1(true);
 129:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN3(true);
 130:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN4(true);
 131:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN_MRAM(true);
 132:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_disable_FDCAN1();
 133:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_disable_FDCAN3();
 134:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_disable_FDCAN4();
 135:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         }
 136:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         can_enabled |= (1U << 1U);
 137:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN3) {
 138:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         clock_enable_FDCAN3(true);
 139:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         if(can_enabled == 0U) {
 140:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN1(true);
 141:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN2(true);
 142:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN4(true);
 143:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN_MRAM(true);
 144:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_disable_FDCAN1();
 145:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_disable_FDCAN2();
 146:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_disable_FDCAN4();
 147:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         }
 148:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         can_enabled |= (1U << 2U);
 149:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else {
 150:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         clock_enable_FDCAN4(true);
 151:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         if(can_enabled == 0U) {
 152:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN1(true);
 153:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN2(true);
 154:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN3(true);
 155:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN_MRAM(true);
 156:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_disable_FDCAN1();
 157:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_disable_FDCAN2();
 158:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_disable_FDCAN3();
 159:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         }
 160:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         can_enabled |= (1U << 3U);
 161:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     }
 162:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 643              		.loc 1 162 1
 644 03f6 00F0E4BD 		b	.L94
 645              	.L14:
 125:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN2) {
 646              		.loc 1 125 15
 647 03fa 019B     		ldr	r3, [sp, #4]
 648 03fc AB4A     		ldr	r2, .L97+4
 649 03fe 9342     		cmp	r3, r2
 650 0400 40F0F481 		bne	.L35
 651 0404 0123     		movs	r3, #1
 652 0406 8DF8A330 		strb	r3, [sp, #163]
 653 040a 9DF8A330 		ldrb	r3, [sp, #163]
 654 040e 8DF8A230 		strb	r3, [sp, #162]
 655 0412 4FF48063 		mov	r3, #1024
 656 0416 2793     		str	r3, [sp, #156]
 657              	.LBB202:
 658              	.LBB203:
 659              	.LBB204:
 660              	.LBB205:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 661              		.loc 2 1477 19
 662 0418 4FF08843 		mov	r3, #1140850688
 663 041c D3F88C20 		ldr	r2, [r3, #140]
 664 0420 4FF08841 		mov	r1, #1140850688
 665 0424 279B     		ldr	r3, [sp, #156]
 666 0426 1343     		orrs	r3, r3, r2
 667 0428 C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 668              		.loc 2 1478 8
 669 042c 9DF8A230 		ldrb	r3, [sp, #162]	@ zero_extendqisi2
 670 0430 002B     		cmp	r3, #0
 671 0432 14D0     		beq	.L36
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 672              		.loc 2 1479 28
 673 0434 4FF08843 		mov	r3, #1140850688
 674 0438 D3F8AC20 		ldr	r2, [r3, #172]
 675 043c 4FF08841 		mov	r1, #1140850688
 676 0440 279B     		ldr	r3, [sp, #156]
 677 0442 1343     		orrs	r3, r3, r2
 678 0444 C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 679              		.loc 2 1481 28
 680 0448 4FF08843 		mov	r3, #1140850688
 681 044c D3F8CC20 		ldr	r2, [r3, #204]
 682 0450 4FF08841 		mov	r1, #1140850688
 683 0454 279B     		ldr	r3, [sp, #156]
 684 0456 1343     		orrs	r3, r3, r2
 685 0458 C1F8CC30 		str	r3, [r1, #204]
 686 045c 15E0     		b	.L37
 687              	.L36:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 688              		.loc 2 1485 28
 689 045e 4FF08843 		mov	r3, #1140850688
 690 0462 D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 691              		.loc 2 1485 31
 692 0466 279B     		ldr	r3, [sp, #156]
 693 0468 DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 694              		.loc 2 1485 28
 695 046a 4FF08841 		mov	r1, #1140850688
 696 046e 1340     		ands	r3, r3, r2
 697 0470 C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 698              		.loc 2 1487 28
 699 0474 4FF08843 		mov	r3, #1140850688
 700 0478 D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 701              		.loc 2 1487 31
 702 047c 279B     		ldr	r3, [sp, #156]
 703 047e DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 704              		.loc 2 1487 28
 705 0480 4FF08841 		mov	r1, #1140850688
 706 0484 1340     		ands	r3, r3, r2
 707 0486 C1F8CC30 		str	r3, [r1, #204]
 708              	.L37:
1491:src-gen/sr5e1/clock.h **** }
 709              		.loc 2 1491 15
 710 048a 4FF08843 		mov	r3, #1140850688
 711 048e D3F88C30 		ldr	r3, [r3, #140]
 712              	.LBE205:
 713              	.LBE204:
4062:src-gen/sr5e1/clock.h **** 
 714              		.loc 2 4062 1
 715 0492 00BF     		nop
 716              	.LBE203:
 717              	.LBE202:
 127:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN1(true);
 718              		.loc 1 127 24
 719 0494 844B     		ldr	r3, .L97
 720 0496 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 127:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN1(true);
 721              		.loc 1 127 11
 722 0498 002B     		cmp	r3, #0
 723 049a 40F09F81 		bne	.L39
 724 049e 0123     		movs	r3, #1
 725 04a0 8DF87730 		strb	r3, [sp, #119]
 726 04a4 9DF87730 		ldrb	r3, [sp, #119]
 727 04a8 8DF87630 		strb	r3, [sp, #118]
 728 04ac 4FF48073 		mov	r3, #256
 729 04b0 1C93     		str	r3, [sp, #112]
 730              	.LBB206:
 731              	.LBB207:
 732              	.LBB208:
 733              	.LBB209:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 734              		.loc 2 1477 19
 735 04b2 4FF08843 		mov	r3, #1140850688
 736 04b6 D3F88C20 		ldr	r2, [r3, #140]
 737 04ba 4FF08841 		mov	r1, #1140850688
 738 04be 1C9B     		ldr	r3, [sp, #112]
 739 04c0 1343     		orrs	r3, r3, r2
 740 04c2 C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 741              		.loc 2 1478 8
 742 04c6 9DF87630 		ldrb	r3, [sp, #118]	@ zero_extendqisi2
 743 04ca 002B     		cmp	r3, #0
 744 04cc 14D0     		beq	.L40
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 745              		.loc 2 1479 28
 746 04ce 4FF08843 		mov	r3, #1140850688
 747 04d2 D3F8AC20 		ldr	r2, [r3, #172]
 748 04d6 4FF08841 		mov	r1, #1140850688
 749 04da 1C9B     		ldr	r3, [sp, #112]
 750 04dc 1343     		orrs	r3, r3, r2
 751 04de C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 752              		.loc 2 1481 28
 753 04e2 4FF08843 		mov	r3, #1140850688
 754 04e6 D3F8CC20 		ldr	r2, [r3, #204]
 755 04ea 4FF08841 		mov	r1, #1140850688
 756 04ee 1C9B     		ldr	r3, [sp, #112]
 757 04f0 1343     		orrs	r3, r3, r2
 758 04f2 C1F8CC30 		str	r3, [r1, #204]
 759 04f6 15E0     		b	.L41
 760              	.L40:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 761              		.loc 2 1485 28
 762 04f8 4FF08843 		mov	r3, #1140850688
 763 04fc D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 764              		.loc 2 1485 31
 765 0500 1C9B     		ldr	r3, [sp, #112]
 766 0502 DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 767              		.loc 2 1485 28
 768 0504 4FF08841 		mov	r1, #1140850688
 769 0508 1340     		ands	r3, r3, r2
 770 050a C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 771              		.loc 2 1487 28
 772 050e 4FF08843 		mov	r3, #1140850688
 773 0512 D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 774              		.loc 2 1487 31
 775 0516 1C9B     		ldr	r3, [sp, #112]
 776 0518 DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 777              		.loc 2 1487 28
 778 051a 4FF08841 		mov	r1, #1140850688
 779 051e 1340     		ands	r3, r3, r2
 780 0520 C1F8CC30 		str	r3, [r1, #204]
 781              	.L41:
1491:src-gen/sr5e1/clock.h **** }
 782              		.loc 2 1491 15
 783 0524 4FF08843 		mov	r3, #1140850688
 784 0528 D3F88C30 		ldr	r3, [r3, #140]
 785              	.LBE209:
 786              	.LBE208:
4017:src-gen/sr5e1/clock.h **** 
 787              		.loc 2 4017 1
 788 052c 00BF     		nop
 789 052e 0123     		movs	r3, #1
 790 0530 8DF87F30 		strb	r3, [sp, #127]
 791 0534 9DF87F30 		ldrb	r3, [sp, #127]
 792 0538 8DF87E30 		strb	r3, [sp, #126]
 793 053c 4FF48053 		mov	r3, #4096
 794 0540 1E93     		str	r3, [sp, #120]
 795              	.LBE207:
 796              	.LBE206:
 797              	.LBB210:
 798              	.LBB211:
 799              	.LBB212:
 800              	.LBB213:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 801              		.loc 2 1477 19
 802 0542 4FF08843 		mov	r3, #1140850688
 803 0546 D3F88C20 		ldr	r2, [r3, #140]
 804 054a 4FF08841 		mov	r1, #1140850688
 805 054e 1E9B     		ldr	r3, [sp, #120]
 806 0550 1343     		orrs	r3, r3, r2
 807 0552 C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 808              		.loc 2 1478 8
 809 0556 9DF87E30 		ldrb	r3, [sp, #126]	@ zero_extendqisi2
 810 055a 002B     		cmp	r3, #0
 811 055c 14D0     		beq	.L43
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 812              		.loc 2 1479 28
 813 055e 4FF08843 		mov	r3, #1140850688
 814 0562 D3F8AC20 		ldr	r2, [r3, #172]
 815 0566 4FF08841 		mov	r1, #1140850688
 816 056a 1E9B     		ldr	r3, [sp, #120]
 817 056c 1343     		orrs	r3, r3, r2
 818 056e C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 819              		.loc 2 1481 28
 820 0572 4FF08843 		mov	r3, #1140850688
 821 0576 D3F8CC20 		ldr	r2, [r3, #204]
 822 057a 4FF08841 		mov	r1, #1140850688
 823 057e 1E9B     		ldr	r3, [sp, #120]
 824 0580 1343     		orrs	r3, r3, r2
 825 0582 C1F8CC30 		str	r3, [r1, #204]
 826 0586 15E0     		b	.L44
 827              	.L43:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 828              		.loc 2 1485 28
 829 0588 4FF08843 		mov	r3, #1140850688
 830 058c D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 831              		.loc 2 1485 31
 832 0590 1E9B     		ldr	r3, [sp, #120]
 833 0592 DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 834              		.loc 2 1485 28
 835 0594 4FF08841 		mov	r1, #1140850688
 836 0598 1340     		ands	r3, r3, r2
 837 059a C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 838              		.loc 2 1487 28
 839 059e 4FF08843 		mov	r3, #1140850688
 840 05a2 D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 841              		.loc 2 1487 31
 842 05a6 1E9B     		ldr	r3, [sp, #120]
 843 05a8 DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 844              		.loc 2 1487 28
 845 05aa 4FF08841 		mov	r1, #1140850688
 846 05ae 1340     		ands	r3, r3, r2
 847 05b0 C1F8CC30 		str	r3, [r1, #204]
 848              	.L44:
1491:src-gen/sr5e1/clock.h **** }
 849              		.loc 2 1491 15
 850 05b4 4FF08843 		mov	r3, #1140850688
 851 05b8 D3F88C30 		ldr	r3, [r3, #140]
 852              	.LBE213:
 853              	.LBE212:
4107:src-gen/sr5e1/clock.h **** 
 854              		.loc 2 4107 1
 855 05bc 00BF     		nop
 856 05be 0123     		movs	r3, #1
 857 05c0 8DF88730 		strb	r3, [sp, #135]
 858 05c4 9DF88730 		ldrb	r3, [sp, #135]
 859 05c8 8DF88630 		strb	r3, [sp, #134]
 860 05cc 4FF48043 		mov	r3, #16384
 861 05d0 2093     		str	r3, [sp, #128]
 862              	.LBE211:
 863              	.LBE210:
 864              	.LBB214:
 865              	.LBB215:
 866              	.LBB216:
 867              	.LBB217:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 868              		.loc 2 1477 19
 869 05d2 4FF08843 		mov	r3, #1140850688
 870 05d6 D3F88C20 		ldr	r2, [r3, #140]
 871 05da 4FF08841 		mov	r1, #1140850688
 872 05de 209B     		ldr	r3, [sp, #128]
 873 05e0 1343     		orrs	r3, r3, r2
 874 05e2 C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 875              		.loc 2 1478 8
 876 05e6 9DF88630 		ldrb	r3, [sp, #134]	@ zero_extendqisi2
 877 05ea 002B     		cmp	r3, #0
 878 05ec 14D0     		beq	.L46
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 879              		.loc 2 1479 28
 880 05ee 4FF08843 		mov	r3, #1140850688
 881 05f2 D3F8AC20 		ldr	r2, [r3, #172]
 882 05f6 4FF08841 		mov	r1, #1140850688
 883 05fa 209B     		ldr	r3, [sp, #128]
 884 05fc 1343     		orrs	r3, r3, r2
 885 05fe C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 886              		.loc 2 1481 28
 887 0602 4FF08843 		mov	r3, #1140850688
 888 0606 D3F8CC20 		ldr	r2, [r3, #204]
 889 060a 4FF08841 		mov	r1, #1140850688
 890 060e 209B     		ldr	r3, [sp, #128]
 891 0610 1343     		orrs	r3, r3, r2
 892 0612 C1F8CC30 		str	r3, [r1, #204]
 893 0616 15E0     		b	.L47
 894              	.L46:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 895              		.loc 2 1485 28
 896 0618 4FF08843 		mov	r3, #1140850688
 897 061c D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 898              		.loc 2 1485 31
 899 0620 209B     		ldr	r3, [sp, #128]
 900 0622 DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 901              		.loc 2 1485 28
 902 0624 4FF08841 		mov	r1, #1140850688
 903 0628 1340     		ands	r3, r3, r2
 904 062a C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 905              		.loc 2 1487 28
 906 062e 4FF08843 		mov	r3, #1140850688
 907 0632 D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 908              		.loc 2 1487 31
 909 0636 209B     		ldr	r3, [sp, #128]
 910 0638 DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 911              		.loc 2 1487 28
 912 063a 4FF08841 		mov	r1, #1140850688
 913 063e 1340     		ands	r3, r3, r2
 914 0640 C1F8CC30 		str	r3, [r1, #204]
 915              	.L47:
1491:src-gen/sr5e1/clock.h **** }
 916              		.loc 2 1491 15
 917 0644 4FF08843 		mov	r3, #1140850688
 918 0648 D3F88C30 		ldr	r3, [r3, #140]
 919              	.LBE217:
 920              	.LBE216:
4152:src-gen/sr5e1/clock.h **** 
 921              		.loc 2 4152 1
 922 064c 00BF     		nop
 923 064e 0123     		movs	r3, #1
 924 0650 8DF88F30 		strb	r3, [sp, #143]
 925 0654 9DF88F30 		ldrb	r3, [sp, #143]
 926 0658 8DF88E30 		strb	r3, [sp, #142]
 927 065c 4FF48033 		mov	r3, #65536
 928 0660 2293     		str	r3, [sp, #136]
 929              	.LBE215:
 930              	.LBE214:
 931              	.LBB218:
 932              	.LBB219:
 933              	.LBB220:
 934              	.LBB221:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 935              		.loc 2 1477 19
 936 0662 4FF08843 		mov	r3, #1140850688
 937 0666 D3F88C20 		ldr	r2, [r3, #140]
 938 066a 4FF08841 		mov	r1, #1140850688
 939 066e 229B     		ldr	r3, [sp, #136]
 940 0670 1343     		orrs	r3, r3, r2
 941 0672 C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 942              		.loc 2 1478 8
 943 0676 9DF88E30 		ldrb	r3, [sp, #142]	@ zero_extendqisi2
 944 067a 002B     		cmp	r3, #0
 945 067c 18D0     		beq	.L49
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 946              		.loc 2 1479 28
 947 067e 4FF08843 		mov	r3, #1140850688
 948 0682 D3F8AC20 		ldr	r2, [r3, #172]
 949 0686 4FF08841 		mov	r1, #1140850688
 950 068a 229B     		ldr	r3, [sp, #136]
 951 068c 1343     		orrs	r3, r3, r2
 952 068e C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 953              		.loc 2 1481 28
 954 0692 4FF08843 		mov	r3, #1140850688
 955 0696 D3F8CC20 		ldr	r2, [r3, #204]
 956 069a 4FF08841 		mov	r1, #1140850688
 957 069e 229B     		ldr	r3, [sp, #136]
 958 06a0 1343     		orrs	r3, r3, r2
 959 06a2 C1F8CC30 		str	r3, [r1, #204]
 960 06a6 19E0     		b	.L50
 961              	.L98:
 962              		.align	2
 963              	.L97:
 964 06a8 00000000 		.word	can_enabled
 965 06ac 00000000 		.word	DRV_CAN2
 966              	.L49:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 967              		.loc 2 1485 28
 968 06b0 4FF08843 		mov	r3, #1140850688
 969 06b4 D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 970              		.loc 2 1485 31
 971 06b8 229B     		ldr	r3, [sp, #136]
 972 06ba DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 973              		.loc 2 1485 28
 974 06bc 4FF08841 		mov	r1, #1140850688
 975 06c0 1340     		ands	r3, r3, r2
 976 06c2 C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 977              		.loc 2 1487 28
 978 06c6 4FF08843 		mov	r3, #1140850688
 979 06ca D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 980              		.loc 2 1487 31
 981 06ce 229B     		ldr	r3, [sp, #136]
 982 06d0 DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 983              		.loc 2 1487 28
 984 06d2 4FF08841 		mov	r1, #1140850688
 985 06d6 1340     		ands	r3, r3, r2
 986 06d8 C1F8CC30 		str	r3, [r1, #204]
 987              	.L50:
1491:src-gen/sr5e1/clock.h **** }
 988              		.loc 2 1491 15
 989 06dc 4FF08843 		mov	r3, #1140850688
 990 06e0 D3F88C30 		ldr	r3, [r3, #140]
 991              	.LBE221:
 992              	.LBE220:
 993              		.loc 2 4197 1
 994 06e4 00BF     		nop
 995 06e6 4FF48073 		mov	r3, #256
 996 06ea 2493     		str	r3, [sp, #144]
 997              	.LBE219:
 998              	.LBE218:
 999              	.LBB222:
 1000              	.LBB223:
 1001              	.LBB224:
 1002              	.LBB225:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1003              		.loc 2 1504 19
 1004 06ec 4FF08843 		mov	r3, #1140850688
 1005 06f0 D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1006              		.loc 2 1504 22
 1007 06f4 249B     		ldr	r3, [sp, #144]
 1008 06f6 DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1009              		.loc 2 1504 19
 1010 06f8 4FF08841 		mov	r1, #1140850688
 1011 06fc 1340     		ands	r3, r3, r2
 1012 06fe C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1013              		.loc 2 1505 24
 1014 0702 4FF08843 		mov	r3, #1140850688
 1015 0706 D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1016              		.loc 2 1505 27
 1017 070a 249B     		ldr	r3, [sp, #144]
 1018 070c DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1019              		.loc 2 1505 24
 1020 070e 4FF08841 		mov	r1, #1140850688
 1021 0712 1340     		ands	r3, r3, r2
 1022 0714 C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 1023              		.loc 2 1507 24
 1024 0718 4FF08843 		mov	r3, #1140850688
 1025 071c D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 1026              		.loc 2 1507 27
 1027 0720 249B     		ldr	r3, [sp, #144]
 1028 0722 DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 1029              		.loc 2 1507 24
 1030 0724 4FF08841 		mov	r1, #1140850688
 1031 0728 1340     		ands	r3, r3, r2
 1032 072a C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 1033              		.loc 2 1510 15
 1034 072e 4FF08843 		mov	r3, #1140850688
 1035 0732 D3F88C30 		ldr	r3, [r3, #140]
 1036              	.LBE225:
 1037              	.LBE224:
4027:src-gen/sr5e1/clock.h **** 
 1038              		.loc 2 4027 1
 1039 0736 00BF     		nop
 1040 0738 4FF48053 		mov	r3, #4096
 1041 073c 2593     		str	r3, [sp, #148]
 1042              	.LBE223:
 1043              	.LBE222:
 1044              	.LBB226:
 1045              	.LBB227:
 1046              	.LBB228:
 1047              	.LBB229:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1048              		.loc 2 1504 19
 1049 073e 4FF08843 		mov	r3, #1140850688
 1050 0742 D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1051              		.loc 2 1504 22
 1052 0746 259B     		ldr	r3, [sp, #148]
 1053 0748 DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1054              		.loc 2 1504 19
 1055 074a 4FF08841 		mov	r1, #1140850688
 1056 074e 1340     		ands	r3, r3, r2
 1057 0750 C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1058              		.loc 2 1505 24
 1059 0754 4FF08843 		mov	r3, #1140850688
 1060 0758 D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1061              		.loc 2 1505 27
 1062 075c 259B     		ldr	r3, [sp, #148]
 1063 075e DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1064              		.loc 2 1505 24
 1065 0760 4FF08841 		mov	r1, #1140850688
 1066 0764 1340     		ands	r3, r3, r2
 1067 0766 C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 1068              		.loc 2 1507 24
 1069 076a 4FF08843 		mov	r3, #1140850688
 1070 076e D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 1071              		.loc 2 1507 27
 1072 0772 259B     		ldr	r3, [sp, #148]
 1073 0774 DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 1074              		.loc 2 1507 24
 1075 0776 4FF08841 		mov	r1, #1140850688
 1076 077a 1340     		ands	r3, r3, r2
 1077 077c C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 1078              		.loc 2 1510 15
 1079 0780 4FF08843 		mov	r3, #1140850688
 1080 0784 D3F88C30 		ldr	r3, [r3, #140]
 1081              	.LBE229:
 1082              	.LBE228:
4117:src-gen/sr5e1/clock.h **** 
 1083              		.loc 2 4117 1
 1084 0788 00BF     		nop
 1085 078a 4FF48043 		mov	r3, #16384
 1086 078e 2693     		str	r3, [sp, #152]
 1087              	.LBE227:
 1088              	.LBE226:
 1089              	.LBB230:
 1090              	.LBB231:
 1091              	.LBB232:
 1092              	.LBB233:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1093              		.loc 2 1504 19
 1094 0790 4FF08843 		mov	r3, #1140850688
 1095 0794 D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1096              		.loc 2 1504 22
 1097 0798 269B     		ldr	r3, [sp, #152]
 1098 079a DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1099              		.loc 2 1504 19
 1100 079c 4FF08841 		mov	r1, #1140850688
 1101 07a0 1340     		ands	r3, r3, r2
 1102 07a2 C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1103              		.loc 2 1505 24
 1104 07a6 4FF08843 		mov	r3, #1140850688
 1105 07aa D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1106              		.loc 2 1505 27
 1107 07ae 269B     		ldr	r3, [sp, #152]
 1108 07b0 DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1109              		.loc 2 1505 24
 1110 07b2 4FF08841 		mov	r1, #1140850688
 1111 07b6 1340     		ands	r3, r3, r2
 1112 07b8 C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 1113              		.loc 2 1507 24
 1114 07bc 4FF08843 		mov	r3, #1140850688
 1115 07c0 D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 1116              		.loc 2 1507 27
 1117 07c4 269B     		ldr	r3, [sp, #152]
 1118 07c6 DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 1119              		.loc 2 1507 24
 1120 07c8 4FF08841 		mov	r1, #1140850688
 1121 07cc 1340     		ands	r3, r3, r2
 1122 07ce C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 1123              		.loc 2 1510 15
 1124 07d2 4FF08843 		mov	r3, #1140850688
 1125 07d6 D3F88C30 		ldr	r3, [r3, #140]
 1126              	.LBE233:
 1127              	.LBE232:
4162:src-gen/sr5e1/clock.h **** 
 1128              		.loc 2 4162 1
 1129 07da 00BF     		nop
 1130              	.L39:
 1131              	.LBE231:
 1132              	.LBE230:
 136:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN3) {
 1133              		.loc 1 136 21
 1134 07dc AF4B     		ldr	r3, .L99
 1135 07de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1136 07e0 43F00203 		orr	r3, r3, #2
 1137 07e4 DAB2     		uxtb	r2, r3
 1138 07e6 AD4B     		ldr	r3, .L99
 1139 07e8 1A70     		strb	r2, [r3]
 1140              		.loc 1 162 1
 1141 07ea EAE3     		b	.L94
 1142              	.L35:
 137:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         clock_enable_FDCAN3(true);
 1143              		.loc 1 137 15
 1144 07ec 019B     		ldr	r3, [sp, #4]
 1145 07ee AC4A     		ldr	r2, .L99+4
 1146 07f0 9342     		cmp	r3, r2
 1147 07f2 40F0F581 		bne	.L55
 1148 07f6 0123     		movs	r3, #1
 1149 07f8 8DF86F30 		strb	r3, [sp, #111]
 1150 07fc 9DF86F30 		ldrb	r3, [sp, #111]
 1151 0800 8DF86E30 		strb	r3, [sp, #110]
 1152 0804 4FF48053 		mov	r3, #4096
 1153 0808 1A93     		str	r3, [sp, #104]
 1154              	.LBB234:
 1155              	.LBB235:
 1156              	.LBB236:
 1157              	.LBB237:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 1158              		.loc 2 1477 19
 1159 080a 4FF08843 		mov	r3, #1140850688
 1160 080e D3F88C20 		ldr	r2, [r3, #140]
 1161 0812 4FF08841 		mov	r1, #1140850688
 1162 0816 1A9B     		ldr	r3, [sp, #104]
 1163 0818 1343     		orrs	r3, r3, r2
 1164 081a C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 1165              		.loc 2 1478 8
 1166 081e 9DF86E30 		ldrb	r3, [sp, #110]	@ zero_extendqisi2
 1167 0822 002B     		cmp	r3, #0
 1168 0824 14D0     		beq	.L56
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1169              		.loc 2 1479 28
 1170 0826 4FF08843 		mov	r3, #1140850688
 1171 082a D3F8AC20 		ldr	r2, [r3, #172]
 1172 082e 4FF08841 		mov	r1, #1140850688
 1173 0832 1A9B     		ldr	r3, [sp, #104]
 1174 0834 1343     		orrs	r3, r3, r2
 1175 0836 C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 1176              		.loc 2 1481 28
 1177 083a 4FF08843 		mov	r3, #1140850688
 1178 083e D3F8CC20 		ldr	r2, [r3, #204]
 1179 0842 4FF08841 		mov	r1, #1140850688
 1180 0846 1A9B     		ldr	r3, [sp, #104]
 1181 0848 1343     		orrs	r3, r3, r2
 1182 084a C1F8CC30 		str	r3, [r1, #204]
 1183 084e 15E0     		b	.L57
 1184              	.L56:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1185              		.loc 2 1485 28
 1186 0850 4FF08843 		mov	r3, #1140850688
 1187 0854 D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1188              		.loc 2 1485 31
 1189 0858 1A9B     		ldr	r3, [sp, #104]
 1190 085a DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1191              		.loc 2 1485 28
 1192 085c 4FF08841 		mov	r1, #1140850688
 1193 0860 1340     		ands	r3, r3, r2
 1194 0862 C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 1195              		.loc 2 1487 28
 1196 0866 4FF08843 		mov	r3, #1140850688
 1197 086a D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 1198              		.loc 2 1487 31
 1199 086e 1A9B     		ldr	r3, [sp, #104]
 1200 0870 DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 1201              		.loc 2 1487 28
 1202 0872 4FF08841 		mov	r1, #1140850688
 1203 0876 1340     		ands	r3, r3, r2
 1204 0878 C1F8CC30 		str	r3, [r1, #204]
 1205              	.L57:
1491:src-gen/sr5e1/clock.h **** }
 1206              		.loc 2 1491 15
 1207 087c 4FF08843 		mov	r3, #1140850688
 1208 0880 D3F88C30 		ldr	r3, [r3, #140]
 1209              	.LBE237:
 1210              	.LBE236:
4107:src-gen/sr5e1/clock.h **** 
 1211              		.loc 2 4107 1
 1212 0884 00BF     		nop
 1213              	.LBE235:
 1214              	.LBE234:
 139:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN1(true);
 1215              		.loc 1 139 24
 1216 0886 854B     		ldr	r3, .L99
 1217 0888 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 139:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN1(true);
 1218              		.loc 1 139 11
 1219 088a 002B     		cmp	r3, #0
 1220 088c 40F0A081 		bne	.L59
 1221 0890 0123     		movs	r3, #1
 1222 0892 8DF84330 		strb	r3, [sp, #67]
 1223 0896 9DF84330 		ldrb	r3, [sp, #67]
 1224 089a 8DF84230 		strb	r3, [sp, #66]
 1225 089e 4FF48073 		mov	r3, #256
 1226 08a2 0F93     		str	r3, [sp, #60]
 1227              	.LBB238:
 1228              	.LBB239:
 1229              	.LBB240:
 1230              	.LBB241:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 1231              		.loc 2 1477 19
 1232 08a4 4FF08843 		mov	r3, #1140850688
 1233 08a8 D3F88C20 		ldr	r2, [r3, #140]
 1234 08ac 4FF08841 		mov	r1, #1140850688
 1235 08b0 0F9B     		ldr	r3, [sp, #60]
 1236 08b2 1343     		orrs	r3, r3, r2
 1237 08b4 C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 1238              		.loc 2 1478 8
 1239 08b8 9DF84230 		ldrb	r3, [sp, #66]	@ zero_extendqisi2
 1240 08bc 002B     		cmp	r3, #0
 1241 08be 14D0     		beq	.L60
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1242              		.loc 2 1479 28
 1243 08c0 4FF08843 		mov	r3, #1140850688
 1244 08c4 D3F8AC20 		ldr	r2, [r3, #172]
 1245 08c8 4FF08841 		mov	r1, #1140850688
 1246 08cc 0F9B     		ldr	r3, [sp, #60]
 1247 08ce 1343     		orrs	r3, r3, r2
 1248 08d0 C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 1249              		.loc 2 1481 28
 1250 08d4 4FF08843 		mov	r3, #1140850688
 1251 08d8 D3F8CC20 		ldr	r2, [r3, #204]
 1252 08dc 4FF08841 		mov	r1, #1140850688
 1253 08e0 0F9B     		ldr	r3, [sp, #60]
 1254 08e2 1343     		orrs	r3, r3, r2
 1255 08e4 C1F8CC30 		str	r3, [r1, #204]
 1256 08e8 15E0     		b	.L61
 1257              	.L60:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1258              		.loc 2 1485 28
 1259 08ea 4FF08843 		mov	r3, #1140850688
 1260 08ee D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1261              		.loc 2 1485 31
 1262 08f2 0F9B     		ldr	r3, [sp, #60]
 1263 08f4 DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1264              		.loc 2 1485 28
 1265 08f6 4FF08841 		mov	r1, #1140850688
 1266 08fa 1340     		ands	r3, r3, r2
 1267 08fc C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 1268              		.loc 2 1487 28
 1269 0900 4FF08843 		mov	r3, #1140850688
 1270 0904 D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 1271              		.loc 2 1487 31
 1272 0908 0F9B     		ldr	r3, [sp, #60]
 1273 090a DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 1274              		.loc 2 1487 28
 1275 090c 4FF08841 		mov	r1, #1140850688
 1276 0910 1340     		ands	r3, r3, r2
 1277 0912 C1F8CC30 		str	r3, [r1, #204]
 1278              	.L61:
1491:src-gen/sr5e1/clock.h **** }
 1279              		.loc 2 1491 15
 1280 0916 4FF08843 		mov	r3, #1140850688
 1281 091a D3F88C30 		ldr	r3, [r3, #140]
 1282              	.LBE241:
 1283              	.LBE240:
4017:src-gen/sr5e1/clock.h **** 
 1284              		.loc 2 4017 1
 1285 091e 00BF     		nop
 1286 0920 0123     		movs	r3, #1
 1287 0922 8DF84B30 		strb	r3, [sp, #75]
 1288 0926 9DF84B30 		ldrb	r3, [sp, #75]
 1289 092a 8DF84A30 		strb	r3, [sp, #74]
 1290 092e 4FF48063 		mov	r3, #1024
 1291 0932 1193     		str	r3, [sp, #68]
 1292              	.LBE239:
 1293              	.LBE238:
 1294              	.LBB242:
 1295              	.LBB243:
 1296              	.LBB244:
 1297              	.LBB245:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 1298              		.loc 2 1477 19
 1299 0934 4FF08843 		mov	r3, #1140850688
 1300 0938 D3F88C20 		ldr	r2, [r3, #140]
 1301 093c 4FF08841 		mov	r1, #1140850688
 1302 0940 119B     		ldr	r3, [sp, #68]
 1303 0942 1343     		orrs	r3, r3, r2
 1304 0944 C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 1305              		.loc 2 1478 8
 1306 0948 9DF84A30 		ldrb	r3, [sp, #74]	@ zero_extendqisi2
 1307 094c 002B     		cmp	r3, #0
 1308 094e 14D0     		beq	.L63
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1309              		.loc 2 1479 28
 1310 0950 4FF08843 		mov	r3, #1140850688
 1311 0954 D3F8AC20 		ldr	r2, [r3, #172]
 1312 0958 4FF08841 		mov	r1, #1140850688
 1313 095c 119B     		ldr	r3, [sp, #68]
 1314 095e 1343     		orrs	r3, r3, r2
 1315 0960 C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 1316              		.loc 2 1481 28
 1317 0964 4FF08843 		mov	r3, #1140850688
 1318 0968 D3F8CC20 		ldr	r2, [r3, #204]
 1319 096c 4FF08841 		mov	r1, #1140850688
 1320 0970 119B     		ldr	r3, [sp, #68]
 1321 0972 1343     		orrs	r3, r3, r2
 1322 0974 C1F8CC30 		str	r3, [r1, #204]
 1323 0978 15E0     		b	.L64
 1324              	.L63:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1325              		.loc 2 1485 28
 1326 097a 4FF08843 		mov	r3, #1140850688
 1327 097e D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1328              		.loc 2 1485 31
 1329 0982 119B     		ldr	r3, [sp, #68]
 1330 0984 DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1331              		.loc 2 1485 28
 1332 0986 4FF08841 		mov	r1, #1140850688
 1333 098a 1340     		ands	r3, r3, r2
 1334 098c C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 1335              		.loc 2 1487 28
 1336 0990 4FF08843 		mov	r3, #1140850688
 1337 0994 D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 1338              		.loc 2 1487 31
 1339 0998 119B     		ldr	r3, [sp, #68]
 1340 099a DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 1341              		.loc 2 1487 28
 1342 099c 4FF08841 		mov	r1, #1140850688
 1343 09a0 1340     		ands	r3, r3, r2
 1344 09a2 C1F8CC30 		str	r3, [r1, #204]
 1345              	.L64:
1491:src-gen/sr5e1/clock.h **** }
 1346              		.loc 2 1491 15
 1347 09a6 4FF08843 		mov	r3, #1140850688
 1348 09aa D3F88C30 		ldr	r3, [r3, #140]
 1349              	.LBE245:
 1350              	.LBE244:
4062:src-gen/sr5e1/clock.h **** 
 1351              		.loc 2 4062 1
 1352 09ae 00BF     		nop
 1353 09b0 0123     		movs	r3, #1
 1354 09b2 8DF85330 		strb	r3, [sp, #83]
 1355 09b6 9DF85330 		ldrb	r3, [sp, #83]
 1356 09ba 8DF85230 		strb	r3, [sp, #82]
 1357 09be 4FF48043 		mov	r3, #16384
 1358 09c2 1393     		str	r3, [sp, #76]
 1359              	.LBE243:
 1360              	.LBE242:
 1361              	.LBB246:
 1362              	.LBB247:
 1363              	.LBB248:
 1364              	.LBB249:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 1365              		.loc 2 1477 19
 1366 09c4 4FF08843 		mov	r3, #1140850688
 1367 09c8 D3F88C20 		ldr	r2, [r3, #140]
 1368 09cc 4FF08841 		mov	r1, #1140850688
 1369 09d0 139B     		ldr	r3, [sp, #76]
 1370 09d2 1343     		orrs	r3, r3, r2
 1371 09d4 C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 1372              		.loc 2 1478 8
 1373 09d8 9DF85230 		ldrb	r3, [sp, #82]	@ zero_extendqisi2
 1374 09dc 002B     		cmp	r3, #0
 1375 09de 14D0     		beq	.L66
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1376              		.loc 2 1479 28
 1377 09e0 4FF08843 		mov	r3, #1140850688
 1378 09e4 D3F8AC20 		ldr	r2, [r3, #172]
 1379 09e8 4FF08841 		mov	r1, #1140850688
 1380 09ec 139B     		ldr	r3, [sp, #76]
 1381 09ee 1343     		orrs	r3, r3, r2
 1382 09f0 C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 1383              		.loc 2 1481 28
 1384 09f4 4FF08843 		mov	r3, #1140850688
 1385 09f8 D3F8CC20 		ldr	r2, [r3, #204]
 1386 09fc 4FF08841 		mov	r1, #1140850688
 1387 0a00 139B     		ldr	r3, [sp, #76]
 1388 0a02 1343     		orrs	r3, r3, r2
 1389 0a04 C1F8CC30 		str	r3, [r1, #204]
 1390 0a08 15E0     		b	.L67
 1391              	.L66:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1392              		.loc 2 1485 28
 1393 0a0a 4FF08843 		mov	r3, #1140850688
 1394 0a0e D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1395              		.loc 2 1485 31
 1396 0a12 139B     		ldr	r3, [sp, #76]
 1397 0a14 DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1398              		.loc 2 1485 28
 1399 0a16 4FF08841 		mov	r1, #1140850688
 1400 0a1a 1340     		ands	r3, r3, r2
 1401 0a1c C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 1402              		.loc 2 1487 28
 1403 0a20 4FF08843 		mov	r3, #1140850688
 1404 0a24 D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 1405              		.loc 2 1487 31
 1406 0a28 139B     		ldr	r3, [sp, #76]
 1407 0a2a DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 1408              		.loc 2 1487 28
 1409 0a2c 4FF08841 		mov	r1, #1140850688
 1410 0a30 1340     		ands	r3, r3, r2
 1411 0a32 C1F8CC30 		str	r3, [r1, #204]
 1412              	.L67:
1491:src-gen/sr5e1/clock.h **** }
 1413              		.loc 2 1491 15
 1414 0a36 4FF08843 		mov	r3, #1140850688
 1415 0a3a D3F88C30 		ldr	r3, [r3, #140]
 1416              	.LBE249:
 1417              	.LBE248:
4152:src-gen/sr5e1/clock.h **** 
 1418              		.loc 2 4152 1
 1419 0a3e 00BF     		nop
 1420 0a40 0123     		movs	r3, #1
 1421 0a42 8DF85B30 		strb	r3, [sp, #91]
 1422 0a46 9DF85B30 		ldrb	r3, [sp, #91]
 1423 0a4a 8DF85A30 		strb	r3, [sp, #90]
 1424 0a4e 4FF48033 		mov	r3, #65536
 1425 0a52 1593     		str	r3, [sp, #84]
 1426              	.LBE247:
 1427              	.LBE246:
 1428              	.LBB250:
 1429              	.LBB251:
 1430              	.LBB252:
 1431              	.LBB253:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 1432              		.loc 2 1477 19
 1433 0a54 4FF08843 		mov	r3, #1140850688
 1434 0a58 D3F88C20 		ldr	r2, [r3, #140]
 1435 0a5c 4FF08841 		mov	r1, #1140850688
 1436 0a60 159B     		ldr	r3, [sp, #84]
 1437 0a62 1343     		orrs	r3, r3, r2
 1438 0a64 C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 1439              		.loc 2 1478 8
 1440 0a68 9DF85A30 		ldrb	r3, [sp, #90]	@ zero_extendqisi2
 1441 0a6c 002B     		cmp	r3, #0
 1442 0a6e 19D0     		beq	.L69
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1443              		.loc 2 1479 28
 1444 0a70 4FF08843 		mov	r3, #1140850688
 1445 0a74 D3F8AC20 		ldr	r2, [r3, #172]
 1446 0a78 4FF08841 		mov	r1, #1140850688
 1447 0a7c 159B     		ldr	r3, [sp, #84]
 1448 0a7e 1343     		orrs	r3, r3, r2
 1449 0a80 C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 1450              		.loc 2 1481 28
 1451 0a84 4FF08843 		mov	r3, #1140850688
 1452 0a88 D3F8CC20 		ldr	r2, [r3, #204]
 1453 0a8c 4FF08841 		mov	r1, #1140850688
 1454 0a90 159B     		ldr	r3, [sp, #84]
 1455 0a92 1343     		orrs	r3, r3, r2
 1456 0a94 C1F8CC30 		str	r3, [r1, #204]
 1457 0a98 1AE0     		b	.L70
 1458              	.L100:
 1459 0a9a 00BF     		.align	2
 1460              	.L99:
 1461 0a9c 00000000 		.word	can_enabled
 1462 0aa0 00000000 		.word	DRV_CAN3
 1463              	.L69:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1464              		.loc 2 1485 28
 1465 0aa4 4FF08843 		mov	r3, #1140850688
 1466 0aa8 D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1467              		.loc 2 1485 31
 1468 0aac 159B     		ldr	r3, [sp, #84]
 1469 0aae DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1470              		.loc 2 1485 28
 1471 0ab0 4FF08841 		mov	r1, #1140850688
 1472 0ab4 1340     		ands	r3, r3, r2
 1473 0ab6 C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 1474              		.loc 2 1487 28
 1475 0aba 4FF08843 		mov	r3, #1140850688
 1476 0abe D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 1477              		.loc 2 1487 31
 1478 0ac2 159B     		ldr	r3, [sp, #84]
 1479 0ac4 DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 1480              		.loc 2 1487 28
 1481 0ac6 4FF08841 		mov	r1, #1140850688
 1482 0aca 1340     		ands	r3, r3, r2
 1483 0acc C1F8CC30 		str	r3, [r1, #204]
 1484              	.L70:
1491:src-gen/sr5e1/clock.h **** }
 1485              		.loc 2 1491 15
 1486 0ad0 4FF08843 		mov	r3, #1140850688
 1487 0ad4 D3F88C30 		ldr	r3, [r3, #140]
 1488              	.LBE253:
 1489              	.LBE252:
 1490              		.loc 2 4197 1
 1491 0ad8 00BF     		nop
 1492 0ada 4FF48073 		mov	r3, #256
 1493 0ade 1793     		str	r3, [sp, #92]
 1494              	.LBE251:
 1495              	.LBE250:
 1496              	.LBB254:
 1497              	.LBB255:
 1498              	.LBB256:
 1499              	.LBB257:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1500              		.loc 2 1504 19
 1501 0ae0 4FF08843 		mov	r3, #1140850688
 1502 0ae4 D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1503              		.loc 2 1504 22
 1504 0ae8 179B     		ldr	r3, [sp, #92]
 1505 0aea DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1506              		.loc 2 1504 19
 1507 0aec 4FF08841 		mov	r1, #1140850688
 1508 0af0 1340     		ands	r3, r3, r2
 1509 0af2 C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1510              		.loc 2 1505 24
 1511 0af6 4FF08843 		mov	r3, #1140850688
 1512 0afa D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1513              		.loc 2 1505 27
 1514 0afe 179B     		ldr	r3, [sp, #92]
 1515 0b00 DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1516              		.loc 2 1505 24
 1517 0b02 4FF08841 		mov	r1, #1140850688
 1518 0b06 1340     		ands	r3, r3, r2
 1519 0b08 C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 1520              		.loc 2 1507 24
 1521 0b0c 4FF08843 		mov	r3, #1140850688
 1522 0b10 D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 1523              		.loc 2 1507 27
 1524 0b14 179B     		ldr	r3, [sp, #92]
 1525 0b16 DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 1526              		.loc 2 1507 24
 1527 0b18 4FF08841 		mov	r1, #1140850688
 1528 0b1c 1340     		ands	r3, r3, r2
 1529 0b1e C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 1530              		.loc 2 1510 15
 1531 0b22 4FF08843 		mov	r3, #1140850688
 1532 0b26 D3F88C30 		ldr	r3, [r3, #140]
 1533              	.LBE257:
 1534              	.LBE256:
4027:src-gen/sr5e1/clock.h **** 
 1535              		.loc 2 4027 1
 1536 0b2a 00BF     		nop
 1537 0b2c 4FF48063 		mov	r3, #1024
 1538 0b30 1893     		str	r3, [sp, #96]
 1539              	.LBE255:
 1540              	.LBE254:
 1541              	.LBB258:
 1542              	.LBB259:
 1543              	.LBB260:
 1544              	.LBB261:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1545              		.loc 2 1504 19
 1546 0b32 4FF08843 		mov	r3, #1140850688
 1547 0b36 D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1548              		.loc 2 1504 22
 1549 0b3a 189B     		ldr	r3, [sp, #96]
 1550 0b3c DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1551              		.loc 2 1504 19
 1552 0b3e 4FF08841 		mov	r1, #1140850688
 1553 0b42 1340     		ands	r3, r3, r2
 1554 0b44 C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1555              		.loc 2 1505 24
 1556 0b48 4FF08843 		mov	r3, #1140850688
 1557 0b4c D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1558              		.loc 2 1505 27
 1559 0b50 189B     		ldr	r3, [sp, #96]
 1560 0b52 DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1561              		.loc 2 1505 24
 1562 0b54 4FF08841 		mov	r1, #1140850688
 1563 0b58 1340     		ands	r3, r3, r2
 1564 0b5a C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 1565              		.loc 2 1507 24
 1566 0b5e 4FF08843 		mov	r3, #1140850688
 1567 0b62 D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 1568              		.loc 2 1507 27
 1569 0b66 189B     		ldr	r3, [sp, #96]
 1570 0b68 DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 1571              		.loc 2 1507 24
 1572 0b6a 4FF08841 		mov	r1, #1140850688
 1573 0b6e 1340     		ands	r3, r3, r2
 1574 0b70 C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 1575              		.loc 2 1510 15
 1576 0b74 4FF08843 		mov	r3, #1140850688
 1577 0b78 D3F88C30 		ldr	r3, [r3, #140]
 1578              	.LBE261:
 1579              	.LBE260:
4072:src-gen/sr5e1/clock.h **** 
 1580              		.loc 2 4072 1
 1581 0b7c 00BF     		nop
 1582 0b7e 4FF48043 		mov	r3, #16384
 1583 0b82 1993     		str	r3, [sp, #100]
 1584              	.LBE259:
 1585              	.LBE258:
 1586              	.LBB262:
 1587              	.LBB263:
 1588              	.LBB264:
 1589              	.LBB265:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1590              		.loc 2 1504 19
 1591 0b84 4FF08843 		mov	r3, #1140850688
 1592 0b88 D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1593              		.loc 2 1504 22
 1594 0b8c 199B     		ldr	r3, [sp, #100]
 1595 0b8e DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1596              		.loc 2 1504 19
 1597 0b90 4FF08841 		mov	r1, #1140850688
 1598 0b94 1340     		ands	r3, r3, r2
 1599 0b96 C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1600              		.loc 2 1505 24
 1601 0b9a 4FF08843 		mov	r3, #1140850688
 1602 0b9e D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1603              		.loc 2 1505 27
 1604 0ba2 199B     		ldr	r3, [sp, #100]
 1605 0ba4 DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1606              		.loc 2 1505 24
 1607 0ba6 4FF08841 		mov	r1, #1140850688
 1608 0baa 1340     		ands	r3, r3, r2
 1609 0bac C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 1610              		.loc 2 1507 24
 1611 0bb0 4FF08843 		mov	r3, #1140850688
 1612 0bb4 D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 1613              		.loc 2 1507 27
 1614 0bb8 199B     		ldr	r3, [sp, #100]
 1615 0bba DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 1616              		.loc 2 1507 24
 1617 0bbc 4FF08841 		mov	r1, #1140850688
 1618 0bc0 1340     		ands	r3, r3, r2
 1619 0bc2 C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 1620              		.loc 2 1510 15
 1621 0bc6 4FF08843 		mov	r3, #1140850688
 1622 0bca D3F88C30 		ldr	r3, [r3, #140]
 1623              	.LBE265:
 1624              	.LBE264:
4162:src-gen/sr5e1/clock.h **** 
 1625              		.loc 2 4162 1
 1626 0bce 00BF     		nop
 1627              	.L59:
 1628              	.LBE263:
 1629              	.LBE262:
 148:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else {
 1630              		.loc 1 148 21
 1631 0bd0 AC4B     		ldr	r3, .L101
 1632 0bd2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1633 0bd4 43F00403 		orr	r3, r3, #4
 1634 0bd8 DAB2     		uxtb	r2, r3
 1635 0bda AA4B     		ldr	r3, .L101
 1636 0bdc 1A70     		strb	r2, [r3]
 1637              		.loc 1 162 1
 1638 0bde F0E1     		b	.L94
 1639              	.L55:
 1640 0be0 0123     		movs	r3, #1
 1641 0be2 8DF83B30 		strb	r3, [sp, #59]
 1642 0be6 9DF83B30 		ldrb	r3, [sp, #59]
 1643 0bea 8DF83A30 		strb	r3, [sp, #58]
 1644 0bee 4FF48043 		mov	r3, #16384
 1645 0bf2 0D93     		str	r3, [sp, #52]
 1646              	.LBB266:
 1647              	.LBB267:
 1648              	.LBB268:
 1649              	.LBB269:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 1650              		.loc 2 1477 19
 1651 0bf4 4FF08843 		mov	r3, #1140850688
 1652 0bf8 D3F88C20 		ldr	r2, [r3, #140]
 1653 0bfc 4FF08841 		mov	r1, #1140850688
 1654 0c00 0D9B     		ldr	r3, [sp, #52]
 1655 0c02 1343     		orrs	r3, r3, r2
 1656 0c04 C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 1657              		.loc 2 1478 8
 1658 0c08 9DF83A30 		ldrb	r3, [sp, #58]	@ zero_extendqisi2
 1659 0c0c 002B     		cmp	r3, #0
 1660 0c0e 14D0     		beq	.L75
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1661              		.loc 2 1479 28
 1662 0c10 4FF08843 		mov	r3, #1140850688
 1663 0c14 D3F8AC20 		ldr	r2, [r3, #172]
 1664 0c18 4FF08841 		mov	r1, #1140850688
 1665 0c1c 0D9B     		ldr	r3, [sp, #52]
 1666 0c1e 1343     		orrs	r3, r3, r2
 1667 0c20 C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 1668              		.loc 2 1481 28
 1669 0c24 4FF08843 		mov	r3, #1140850688
 1670 0c28 D3F8CC20 		ldr	r2, [r3, #204]
 1671 0c2c 4FF08841 		mov	r1, #1140850688
 1672 0c30 0D9B     		ldr	r3, [sp, #52]
 1673 0c32 1343     		orrs	r3, r3, r2
 1674 0c34 C1F8CC30 		str	r3, [r1, #204]
 1675 0c38 15E0     		b	.L76
 1676              	.L75:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1677              		.loc 2 1485 28
 1678 0c3a 4FF08843 		mov	r3, #1140850688
 1679 0c3e D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1680              		.loc 2 1485 31
 1681 0c42 0D9B     		ldr	r3, [sp, #52]
 1682 0c44 DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1683              		.loc 2 1485 28
 1684 0c46 4FF08841 		mov	r1, #1140850688
 1685 0c4a 1340     		ands	r3, r3, r2
 1686 0c4c C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 1687              		.loc 2 1487 28
 1688 0c50 4FF08843 		mov	r3, #1140850688
 1689 0c54 D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 1690              		.loc 2 1487 31
 1691 0c58 0D9B     		ldr	r3, [sp, #52]
 1692 0c5a DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 1693              		.loc 2 1487 28
 1694 0c5c 4FF08841 		mov	r1, #1140850688
 1695 0c60 1340     		ands	r3, r3, r2
 1696 0c62 C1F8CC30 		str	r3, [r1, #204]
 1697              	.L76:
1491:src-gen/sr5e1/clock.h **** }
 1698              		.loc 2 1491 15
 1699 0c66 4FF08843 		mov	r3, #1140850688
 1700 0c6a D3F88C30 		ldr	r3, [r3, #140]
 1701              	.LBE269:
 1702              	.LBE268:
4152:src-gen/sr5e1/clock.h **** 
 1703              		.loc 2 4152 1
 1704 0c6e 00BF     		nop
 1705              	.LBE267:
 1706              	.LBE266:
 151:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN1(true);
 1707              		.loc 1 151 24
 1708 0c70 844B     		ldr	r3, .L101
 1709 0c72 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 151:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****             clock_enable_FDCAN1(true);
 1710              		.loc 1 151 11
 1711 0c74 002B     		cmp	r3, #0
 1712 0c76 40F09D81 		bne	.L78
 1713 0c7a 0123     		movs	r3, #1
 1714 0c7c 8DF80F30 		strb	r3, [sp, #15]
 1715 0c80 9DF80F30 		ldrb	r3, [sp, #15]
 1716 0c84 8DF80E30 		strb	r3, [sp, #14]
 1717 0c88 4FF48073 		mov	r3, #256
 1718 0c8c 0293     		str	r3, [sp, #8]
 1719              	.LBB270:
 1720              	.LBB271:
 1721              	.LBB272:
 1722              	.LBB273:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 1723              		.loc 2 1477 19
 1724 0c8e 4FF08843 		mov	r3, #1140850688
 1725 0c92 D3F88C20 		ldr	r2, [r3, #140]
 1726 0c96 4FF08841 		mov	r1, #1140850688
 1727 0c9a 029B     		ldr	r3, [sp, #8]
 1728 0c9c 1343     		orrs	r3, r3, r2
 1729 0c9e C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 1730              		.loc 2 1478 8
 1731 0ca2 9DF80E30 		ldrb	r3, [sp, #14]	@ zero_extendqisi2
 1732 0ca6 002B     		cmp	r3, #0
 1733 0ca8 14D0     		beq	.L79
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1734              		.loc 2 1479 28
 1735 0caa 4FF08843 		mov	r3, #1140850688
 1736 0cae D3F8AC20 		ldr	r2, [r3, #172]
 1737 0cb2 4FF08841 		mov	r1, #1140850688
 1738 0cb6 029B     		ldr	r3, [sp, #8]
 1739 0cb8 1343     		orrs	r3, r3, r2
 1740 0cba C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 1741              		.loc 2 1481 28
 1742 0cbe 4FF08843 		mov	r3, #1140850688
 1743 0cc2 D3F8CC20 		ldr	r2, [r3, #204]
 1744 0cc6 4FF08841 		mov	r1, #1140850688
 1745 0cca 029B     		ldr	r3, [sp, #8]
 1746 0ccc 1343     		orrs	r3, r3, r2
 1747 0cce C1F8CC30 		str	r3, [r1, #204]
 1748 0cd2 15E0     		b	.L80
 1749              	.L79:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1750              		.loc 2 1485 28
 1751 0cd4 4FF08843 		mov	r3, #1140850688
 1752 0cd8 D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1753              		.loc 2 1485 31
 1754 0cdc 029B     		ldr	r3, [sp, #8]
 1755 0cde DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1756              		.loc 2 1485 28
 1757 0ce0 4FF08841 		mov	r1, #1140850688
 1758 0ce4 1340     		ands	r3, r3, r2
 1759 0ce6 C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 1760              		.loc 2 1487 28
 1761 0cea 4FF08843 		mov	r3, #1140850688
 1762 0cee D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 1763              		.loc 2 1487 31
 1764 0cf2 029B     		ldr	r3, [sp, #8]
 1765 0cf4 DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 1766              		.loc 2 1487 28
 1767 0cf6 4FF08841 		mov	r1, #1140850688
 1768 0cfa 1340     		ands	r3, r3, r2
 1769 0cfc C1F8CC30 		str	r3, [r1, #204]
 1770              	.L80:
1491:src-gen/sr5e1/clock.h **** }
 1771              		.loc 2 1491 15
 1772 0d00 4FF08843 		mov	r3, #1140850688
 1773 0d04 D3F88C30 		ldr	r3, [r3, #140]
 1774              	.LBE273:
 1775              	.LBE272:
4017:src-gen/sr5e1/clock.h **** 
 1776              		.loc 2 4017 1
 1777 0d08 00BF     		nop
 1778 0d0a 0123     		movs	r3, #1
 1779 0d0c 8DF81730 		strb	r3, [sp, #23]
 1780 0d10 9DF81730 		ldrb	r3, [sp, #23]
 1781 0d14 8DF81630 		strb	r3, [sp, #22]
 1782 0d18 4FF48063 		mov	r3, #1024
 1783 0d1c 0493     		str	r3, [sp, #16]
 1784              	.LBE271:
 1785              	.LBE270:
 1786              	.LBB274:
 1787              	.LBB275:
 1788              	.LBB276:
 1789              	.LBB277:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 1790              		.loc 2 1477 19
 1791 0d1e 4FF08843 		mov	r3, #1140850688
 1792 0d22 D3F88C20 		ldr	r2, [r3, #140]
 1793 0d26 4FF08841 		mov	r1, #1140850688
 1794 0d2a 049B     		ldr	r3, [sp, #16]
 1795 0d2c 1343     		orrs	r3, r3, r2
 1796 0d2e C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 1797              		.loc 2 1478 8
 1798 0d32 9DF81630 		ldrb	r3, [sp, #22]	@ zero_extendqisi2
 1799 0d36 002B     		cmp	r3, #0
 1800 0d38 14D0     		beq	.L82
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1801              		.loc 2 1479 28
 1802 0d3a 4FF08843 		mov	r3, #1140850688
 1803 0d3e D3F8AC20 		ldr	r2, [r3, #172]
 1804 0d42 4FF08841 		mov	r1, #1140850688
 1805 0d46 049B     		ldr	r3, [sp, #16]
 1806 0d48 1343     		orrs	r3, r3, r2
 1807 0d4a C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 1808              		.loc 2 1481 28
 1809 0d4e 4FF08843 		mov	r3, #1140850688
 1810 0d52 D3F8CC20 		ldr	r2, [r3, #204]
 1811 0d56 4FF08841 		mov	r1, #1140850688
 1812 0d5a 049B     		ldr	r3, [sp, #16]
 1813 0d5c 1343     		orrs	r3, r3, r2
 1814 0d5e C1F8CC30 		str	r3, [r1, #204]
 1815 0d62 15E0     		b	.L83
 1816              	.L82:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1817              		.loc 2 1485 28
 1818 0d64 4FF08843 		mov	r3, #1140850688
 1819 0d68 D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1820              		.loc 2 1485 31
 1821 0d6c 049B     		ldr	r3, [sp, #16]
 1822 0d6e DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1823              		.loc 2 1485 28
 1824 0d70 4FF08841 		mov	r1, #1140850688
 1825 0d74 1340     		ands	r3, r3, r2
 1826 0d76 C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 1827              		.loc 2 1487 28
 1828 0d7a 4FF08843 		mov	r3, #1140850688
 1829 0d7e D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 1830              		.loc 2 1487 31
 1831 0d82 049B     		ldr	r3, [sp, #16]
 1832 0d84 DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 1833              		.loc 2 1487 28
 1834 0d86 4FF08841 		mov	r1, #1140850688
 1835 0d8a 1340     		ands	r3, r3, r2
 1836 0d8c C1F8CC30 		str	r3, [r1, #204]
 1837              	.L83:
1491:src-gen/sr5e1/clock.h **** }
 1838              		.loc 2 1491 15
 1839 0d90 4FF08843 		mov	r3, #1140850688
 1840 0d94 D3F88C30 		ldr	r3, [r3, #140]
 1841              	.LBE277:
 1842              	.LBE276:
4062:src-gen/sr5e1/clock.h **** 
 1843              		.loc 2 4062 1
 1844 0d98 00BF     		nop
 1845 0d9a 0123     		movs	r3, #1
 1846 0d9c 8DF81F30 		strb	r3, [sp, #31]
 1847 0da0 9DF81F30 		ldrb	r3, [sp, #31]
 1848 0da4 8DF81E30 		strb	r3, [sp, #30]
 1849 0da8 4FF48053 		mov	r3, #4096
 1850 0dac 0693     		str	r3, [sp, #24]
 1851              	.LBE275:
 1852              	.LBE274:
 1853              	.LBB278:
 1854              	.LBB279:
 1855              	.LBB280:
 1856              	.LBB281:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 1857              		.loc 2 1477 19
 1858 0dae 4FF08843 		mov	r3, #1140850688
 1859 0db2 D3F88C20 		ldr	r2, [r3, #140]
 1860 0db6 4FF08841 		mov	r1, #1140850688
 1861 0dba 069B     		ldr	r3, [sp, #24]
 1862 0dbc 1343     		orrs	r3, r3, r2
 1863 0dbe C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 1864              		.loc 2 1478 8
 1865 0dc2 9DF81E30 		ldrb	r3, [sp, #30]	@ zero_extendqisi2
 1866 0dc6 002B     		cmp	r3, #0
 1867 0dc8 14D0     		beq	.L85
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1868              		.loc 2 1479 28
 1869 0dca 4FF08843 		mov	r3, #1140850688
 1870 0dce D3F8AC20 		ldr	r2, [r3, #172]
 1871 0dd2 4FF08841 		mov	r1, #1140850688
 1872 0dd6 069B     		ldr	r3, [sp, #24]
 1873 0dd8 1343     		orrs	r3, r3, r2
 1874 0dda C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 1875              		.loc 2 1481 28
 1876 0dde 4FF08843 		mov	r3, #1140850688
 1877 0de2 D3F8CC20 		ldr	r2, [r3, #204]
 1878 0de6 4FF08841 		mov	r1, #1140850688
 1879 0dea 069B     		ldr	r3, [sp, #24]
 1880 0dec 1343     		orrs	r3, r3, r2
 1881 0dee C1F8CC30 		str	r3, [r1, #204]
 1882 0df2 15E0     		b	.L86
 1883              	.L85:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1884              		.loc 2 1485 28
 1885 0df4 4FF08843 		mov	r3, #1140850688
 1886 0df8 D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1887              		.loc 2 1485 31
 1888 0dfc 069B     		ldr	r3, [sp, #24]
 1889 0dfe DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1890              		.loc 2 1485 28
 1891 0e00 4FF08841 		mov	r1, #1140850688
 1892 0e04 1340     		ands	r3, r3, r2
 1893 0e06 C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 1894              		.loc 2 1487 28
 1895 0e0a 4FF08843 		mov	r3, #1140850688
 1896 0e0e D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 1897              		.loc 2 1487 31
 1898 0e12 069B     		ldr	r3, [sp, #24]
 1899 0e14 DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 1900              		.loc 2 1487 28
 1901 0e16 4FF08841 		mov	r1, #1140850688
 1902 0e1a 1340     		ands	r3, r3, r2
 1903 0e1c C1F8CC30 		str	r3, [r1, #204]
 1904              	.L86:
1491:src-gen/sr5e1/clock.h **** }
 1905              		.loc 2 1491 15
 1906 0e20 4FF08843 		mov	r3, #1140850688
 1907 0e24 D3F88C30 		ldr	r3, [r3, #140]
 1908              	.LBE281:
 1909              	.LBE280:
4107:src-gen/sr5e1/clock.h **** 
 1910              		.loc 2 4107 1
 1911 0e28 00BF     		nop
 1912 0e2a 0123     		movs	r3, #1
 1913 0e2c 8DF82730 		strb	r3, [sp, #39]
 1914 0e30 9DF82730 		ldrb	r3, [sp, #39]
 1915 0e34 8DF82630 		strb	r3, [sp, #38]
 1916 0e38 4FF48033 		mov	r3, #65536
 1917 0e3c 0893     		str	r3, [sp, #32]
 1918              	.LBE279:
 1919              	.LBE278:
 1920              	.LBB282:
 1921              	.LBB283:
 1922              	.LBB284:
 1923              	.LBB285:
1477:src-gen/sr5e1/clock.h ****     if (smode) {
 1924              		.loc 2 1477 19
 1925 0e3e 4FF08843 		mov	r3, #1140850688
 1926 0e42 D3F88C20 		ldr	r2, [r3, #140]
 1927 0e46 4FF08841 		mov	r1, #1140850688
 1928 0e4a 089B     		ldr	r3, [sp, #32]
 1929 0e4c 1343     		orrs	r3, r3, r2
 1930 0e4e C1F88C30 		str	r3, [r1, #140]
1478:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
 1931              		.loc 2 1478 8
 1932 0e52 9DF82630 		ldrb	r3, [sp, #38]	@ zero_extendqisi2
 1933 0e56 002B     		cmp	r3, #0
 1934 0e58 16D0     		beq	.L88
1479:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1935              		.loc 2 1479 28
 1936 0e5a 4FF08843 		mov	r3, #1140850688
 1937 0e5e D3F8AC20 		ldr	r2, [r3, #172]
 1938 0e62 4FF08841 		mov	r1, #1140850688
 1939 0e66 089B     		ldr	r3, [sp, #32]
 1940 0e68 1343     		orrs	r3, r3, r2
 1941 0e6a C1F8AC30 		str	r3, [r1, #172]
1481:src-gen/sr5e1/clock.h **** #endif
 1942              		.loc 2 1481 28
 1943 0e6e 4FF08843 		mov	r3, #1140850688
 1944 0e72 D3F8CC20 		ldr	r2, [r3, #204]
 1945 0e76 4FF08841 		mov	r1, #1140850688
 1946 0e7a 089B     		ldr	r3, [sp, #32]
 1947 0e7c 1343     		orrs	r3, r3, r2
 1948 0e7e C1F8CC30 		str	r3, [r1, #204]
 1949 0e82 17E0     		b	.L89
 1950              	.L102:
 1951              		.align	2
 1952              	.L101:
 1953 0e84 00000000 		.word	can_enabled
 1954              	.L88:
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1955              		.loc 2 1485 28
 1956 0e88 4FF08843 		mov	r3, #1140850688
 1957 0e8c D3F8AC20 		ldr	r2, [r3, #172]
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1958              		.loc 2 1485 31
 1959 0e90 089B     		ldr	r3, [sp, #32]
 1960 0e92 DB43     		mvns	r3, r3
1485:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 1961              		.loc 2 1485 28
 1962 0e94 4FF08841 		mov	r1, #1140850688
 1963 0e98 1340     		ands	r3, r3, r2
 1964 0e9a C1F8AC30 		str	r3, [r1, #172]
1487:src-gen/sr5e1/clock.h **** #endif
 1965              		.loc 2 1487 28
 1966 0e9e 4FF08843 		mov	r3, #1140850688
 1967 0ea2 D3F8CC20 		ldr	r2, [r3, #204]
1487:src-gen/sr5e1/clock.h **** #endif
 1968              		.loc 2 1487 31
 1969 0ea6 089B     		ldr	r3, [sp, #32]
 1970 0ea8 DB43     		mvns	r3, r3
1487:src-gen/sr5e1/clock.h **** #endif
 1971              		.loc 2 1487 28
 1972 0eaa 4FF08841 		mov	r1, #1140850688
 1973 0eae 1340     		ands	r3, r3, r2
 1974 0eb0 C1F8CC30 		str	r3, [r1, #204]
 1975              	.L89:
1491:src-gen/sr5e1/clock.h **** }
 1976              		.loc 2 1491 15
 1977 0eb4 4FF08843 		mov	r3, #1140850688
 1978 0eb8 D3F88C30 		ldr	r3, [r3, #140]
 1979              	.LBE285:
 1980              	.LBE284:
 1981              		.loc 2 4197 1
 1982 0ebc 00BF     		nop
 1983 0ebe 4FF48073 		mov	r3, #256
 1984 0ec2 0A93     		str	r3, [sp, #40]
 1985              	.LBE283:
 1986              	.LBE282:
 1987              	.LBB286:
 1988              	.LBB287:
 1989              	.LBB288:
 1990              	.LBB289:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1991              		.loc 2 1504 19
 1992 0ec4 4FF08843 		mov	r3, #1140850688
 1993 0ec8 D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1994              		.loc 2 1504 22
 1995 0ecc 0A9B     		ldr	r3, [sp, #40]
 1996 0ece DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 1997              		.loc 2 1504 19
 1998 0ed0 4FF08841 		mov	r1, #1140850688
 1999 0ed4 1340     		ands	r3, r3, r2
 2000 0ed6 C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2001              		.loc 2 1505 24
 2002 0eda 4FF08843 		mov	r3, #1140850688
 2003 0ede D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2004              		.loc 2 1505 27
 2005 0ee2 0A9B     		ldr	r3, [sp, #40]
 2006 0ee4 DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2007              		.loc 2 1505 24
 2008 0ee6 4FF08841 		mov	r1, #1140850688
 2009 0eea 1340     		ands	r3, r3, r2
 2010 0eec C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 2011              		.loc 2 1507 24
 2012 0ef0 4FF08843 		mov	r3, #1140850688
 2013 0ef4 D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 2014              		.loc 2 1507 27
 2015 0ef8 0A9B     		ldr	r3, [sp, #40]
 2016 0efa DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 2017              		.loc 2 1507 24
 2018 0efc 4FF08841 		mov	r1, #1140850688
 2019 0f00 1340     		ands	r3, r3, r2
 2020 0f02 C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 2021              		.loc 2 1510 15
 2022 0f06 4FF08843 		mov	r3, #1140850688
 2023 0f0a D3F88C30 		ldr	r3, [r3, #140]
 2024              	.LBE289:
 2025              	.LBE288:
4027:src-gen/sr5e1/clock.h **** 
 2026              		.loc 2 4027 1
 2027 0f0e 00BF     		nop
 2028 0f10 4FF48063 		mov	r3, #1024
 2029 0f14 0B93     		str	r3, [sp, #44]
 2030              	.LBE287:
 2031              	.LBE286:
 2032              	.LBB290:
 2033              	.LBB291:
 2034              	.LBB292:
 2035              	.LBB293:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2036              		.loc 2 1504 19
 2037 0f16 4FF08843 		mov	r3, #1140850688
 2038 0f1a D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2039              		.loc 2 1504 22
 2040 0f1e 0B9B     		ldr	r3, [sp, #44]
 2041 0f20 DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2042              		.loc 2 1504 19
 2043 0f22 4FF08841 		mov	r1, #1140850688
 2044 0f26 1340     		ands	r3, r3, r2
 2045 0f28 C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2046              		.loc 2 1505 24
 2047 0f2c 4FF08843 		mov	r3, #1140850688
 2048 0f30 D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2049              		.loc 2 1505 27
 2050 0f34 0B9B     		ldr	r3, [sp, #44]
 2051 0f36 DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2052              		.loc 2 1505 24
 2053 0f38 4FF08841 		mov	r1, #1140850688
 2054 0f3c 1340     		ands	r3, r3, r2
 2055 0f3e C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 2056              		.loc 2 1507 24
 2057 0f42 4FF08843 		mov	r3, #1140850688
 2058 0f46 D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 2059              		.loc 2 1507 27
 2060 0f4a 0B9B     		ldr	r3, [sp, #44]
 2061 0f4c DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 2062              		.loc 2 1507 24
 2063 0f4e 4FF08841 		mov	r1, #1140850688
 2064 0f52 1340     		ands	r3, r3, r2
 2065 0f54 C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 2066              		.loc 2 1510 15
 2067 0f58 4FF08843 		mov	r3, #1140850688
 2068 0f5c D3F88C30 		ldr	r3, [r3, #140]
 2069              	.LBE293:
 2070              	.LBE292:
4072:src-gen/sr5e1/clock.h **** 
 2071              		.loc 2 4072 1
 2072 0f60 00BF     		nop
 2073 0f62 4FF48053 		mov	r3, #4096
 2074 0f66 0C93     		str	r3, [sp, #48]
 2075              	.LBE291:
 2076              	.LBE290:
 2077              	.LBB294:
 2078              	.LBB295:
 2079              	.LBB296:
 2080              	.LBB297:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2081              		.loc 2 1504 19
 2082 0f68 4FF08843 		mov	r3, #1140850688
 2083 0f6c D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2084              		.loc 2 1504 22
 2085 0f70 0C9B     		ldr	r3, [sp, #48]
 2086 0f72 DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2087              		.loc 2 1504 19
 2088 0f74 4FF08841 		mov	r1, #1140850688
 2089 0f78 1340     		ands	r3, r3, r2
 2090 0f7a C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2091              		.loc 2 1505 24
 2092 0f7e 4FF08843 		mov	r3, #1140850688
 2093 0f82 D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2094              		.loc 2 1505 27
 2095 0f86 0C9B     		ldr	r3, [sp, #48]
 2096 0f88 DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2097              		.loc 2 1505 24
 2098 0f8a 4FF08841 		mov	r1, #1140850688
 2099 0f8e 1340     		ands	r3, r3, r2
 2100 0f90 C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 2101              		.loc 2 1507 24
 2102 0f94 4FF08843 		mov	r3, #1140850688
 2103 0f98 D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 2104              		.loc 2 1507 27
 2105 0f9c 0C9B     		ldr	r3, [sp, #48]
 2106 0f9e DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 2107              		.loc 2 1507 24
 2108 0fa0 4FF08841 		mov	r1, #1140850688
 2109 0fa4 1340     		ands	r3, r3, r2
 2110 0fa6 C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 2111              		.loc 2 1510 15
 2112 0faa 4FF08843 		mov	r3, #1140850688
 2113 0fae D3F88C30 		ldr	r3, [r3, #140]
 2114              	.LBE297:
 2115              	.LBE296:
4117:src-gen/sr5e1/clock.h **** 
 2116              		.loc 2 4117 1
 2117 0fb2 00BF     		nop
 2118              	.L78:
 2119              	.LBE295:
 2120              	.LBE294:
 160:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     }
 2121              		.loc 1 160 21
 2122 0fb4 044B     		ldr	r3, .L103
 2123 0fb6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2124 0fb8 43F00803 		orr	r3, r3, #8
 2125 0fbc DAB2     		uxtb	r2, r3
 2126 0fbe 024B     		ldr	r3, .L103
 2127 0fc0 1A70     		strb	r2, [r3]
 2128              	.L94:
 2129              		.loc 1 162 1
 2130 0fc2 00BF     		nop
 2131 0fc4 36B0     		add	sp, sp, #216
 2132              		.cfi_def_cfa_offset 0
 2133              		@ sp needed
 2134 0fc6 7047     		bx	lr
 2135              	.L104:
 2136              		.align	2
 2137              	.L103:
 2138 0fc8 00000000 		.word	can_enabled
 2139              		.cfi_endproc
 2140              	.LFE458:
 2142              		.section	.text.can_dev_clock_disable,"ax",%progbits
 2143              		.align	1
 2144              		.p2align 4,,15
 2145              		.global	can_dev_clock_disable
 2146              		.syntax unified
 2147              		.thumb
 2148              		.thumb_func
 2150              	can_dev_clock_disable:
 2151              	.LFB459:
 163:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 164:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 165:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Disables CAN clock.
 166:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 167:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
 168:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 169:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
 170:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 171:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** void can_dev_clock_disable(can_driver_t *cdp) {
 2152              		.loc 1 171 47
 2153              		.cfi_startproc
 2154              		@ args = 0, pretend = 0, frame = 32
 2155              		@ frame_needed = 0, uses_anonymous_args = 0
 2156              		@ link register save eliminated.
 2157 0000 88B0     		sub	sp, sp, #32
 2158              		.cfi_def_cfa_offset 32
 2159 0002 0190     		str	r0, [sp, #4]
 172:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 173:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     /* Update the mask of enabled CAN instances and disable the clock of the
 174:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****        selected FDCAN instance.*/
 175:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     if (cdp == &DRV_CAN1) {
 2160              		.loc 1 175 8
 2161 0004 019B     		ldr	r3, [sp, #4]
 2162 0006 7D4A     		ldr	r2, .L117
 2163 0008 9342     		cmp	r3, r2
 2164 000a 2FD1     		bne	.L106
 176:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         can_enabled &= ~(1U << 0U);
 2165              		.loc 1 176 21
 2166 000c 7C4B     		ldr	r3, .L117+4
 2167 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2168 0010 23F00103 		bic	r3, r3, #1
 2169 0014 DAB2     		uxtb	r2, r3
 2170 0016 7A4B     		ldr	r3, .L117+4
 2171 0018 1A70     		strb	r2, [r3]
 2172 001a 4FF48073 		mov	r3, #256
 2173 001e 0793     		str	r3, [sp, #28]
 2174              	.LBB298:
 2175              	.LBB299:
 2176              	.LBB300:
 2177              	.LBB301:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2178              		.loc 2 1504 19
 2179 0020 4FF08843 		mov	r3, #1140850688
 2180 0024 D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2181              		.loc 2 1504 22
 2182 0028 079B     		ldr	r3, [sp, #28]
 2183 002a DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2184              		.loc 2 1504 19
 2185 002c 4FF08841 		mov	r1, #1140850688
 2186 0030 1340     		ands	r3, r3, r2
 2187 0032 C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2188              		.loc 2 1505 24
 2189 0036 4FF08843 		mov	r3, #1140850688
 2190 003a D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2191              		.loc 2 1505 27
 2192 003e 079B     		ldr	r3, [sp, #28]
 2193 0040 DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2194              		.loc 2 1505 24
 2195 0042 4FF08841 		mov	r1, #1140850688
 2196 0046 1340     		ands	r3, r3, r2
 2197 0048 C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 2198              		.loc 2 1507 24
 2199 004c 4FF08843 		mov	r3, #1140850688
 2200 0050 D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 2201              		.loc 2 1507 27
 2202 0054 079B     		ldr	r3, [sp, #28]
 2203 0056 DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 2204              		.loc 2 1507 24
 2205 0058 4FF08841 		mov	r1, #1140850688
 2206 005c 1340     		ands	r3, r3, r2
 2207 005e C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 2208              		.loc 2 1510 15
 2209 0062 4FF08843 		mov	r3, #1140850688
 2210 0066 D3F88C30 		ldr	r3, [r3, #140]
 2211              	.LBE301:
 2212              	.LBE300:
4027:src-gen/sr5e1/clock.h **** 
 2213              		.loc 2 4027 1
 2214 006a 97E0     		b	.L108
 2215              	.L106:
 2216              	.LBE299:
 2217              	.LBE298:
 177:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         clock_disable_FDCAN1();
 178:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN2) {
 2218              		.loc 1 178 15
 2219 006c 019B     		ldr	r3, [sp, #4]
 2220 006e 654A     		ldr	r2, .L117+8
 2221 0070 9342     		cmp	r3, r2
 2222 0072 2FD1     		bne	.L109
 179:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         can_enabled &= ~(1U << 1U);
 2223              		.loc 1 179 21
 2224 0074 624B     		ldr	r3, .L117+4
 2225 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2226 0078 23F00203 		bic	r3, r3, #2
 2227 007c DAB2     		uxtb	r2, r3
 2228 007e 604B     		ldr	r3, .L117+4
 2229 0080 1A70     		strb	r2, [r3]
 2230 0082 4FF48063 		mov	r3, #1024
 2231 0086 0693     		str	r3, [sp, #24]
 2232              	.LBB302:
 2233              	.LBB303:
 2234              	.LBB304:
 2235              	.LBB305:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2236              		.loc 2 1504 19
 2237 0088 4FF08843 		mov	r3, #1140850688
 2238 008c D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2239              		.loc 2 1504 22
 2240 0090 069B     		ldr	r3, [sp, #24]
 2241 0092 DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2242              		.loc 2 1504 19
 2243 0094 4FF08841 		mov	r1, #1140850688
 2244 0098 1340     		ands	r3, r3, r2
 2245 009a C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2246              		.loc 2 1505 24
 2247 009e 4FF08843 		mov	r3, #1140850688
 2248 00a2 D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2249              		.loc 2 1505 27
 2250 00a6 069B     		ldr	r3, [sp, #24]
 2251 00a8 DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2252              		.loc 2 1505 24
 2253 00aa 4FF08841 		mov	r1, #1140850688
 2254 00ae 1340     		ands	r3, r3, r2
 2255 00b0 C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 2256              		.loc 2 1507 24
 2257 00b4 4FF08843 		mov	r3, #1140850688
 2258 00b8 D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 2259              		.loc 2 1507 27
 2260 00bc 069B     		ldr	r3, [sp, #24]
 2261 00be DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 2262              		.loc 2 1507 24
 2263 00c0 4FF08841 		mov	r1, #1140850688
 2264 00c4 1340     		ands	r3, r3, r2
 2265 00c6 C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 2266              		.loc 2 1510 15
 2267 00ca 4FF08843 		mov	r3, #1140850688
 2268 00ce D3F88C30 		ldr	r3, [r3, #140]
 2269              	.LBE305:
 2270              	.LBE304:
4072:src-gen/sr5e1/clock.h **** 
 2271              		.loc 2 4072 1
 2272 00d2 63E0     		b	.L108
 2273              	.L109:
 2274              	.LBE303:
 2275              	.LBE302:
 180:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         clock_disable_FDCAN2();
 181:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN3) {
 2276              		.loc 1 181 15
 2277 00d4 019B     		ldr	r3, [sp, #4]
 2278 00d6 4C4A     		ldr	r2, .L117+12
 2279 00d8 9342     		cmp	r3, r2
 2280 00da 2FD1     		bne	.L111
 182:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         can_enabled &= ~(1U << 2U);
 2281              		.loc 1 182 21
 2282 00dc 484B     		ldr	r3, .L117+4
 2283 00de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2284 00e0 23F00403 		bic	r3, r3, #4
 2285 00e4 DAB2     		uxtb	r2, r3
 2286 00e6 464B     		ldr	r3, .L117+4
 2287 00e8 1A70     		strb	r2, [r3]
 2288 00ea 4FF48053 		mov	r3, #4096
 2289 00ee 0593     		str	r3, [sp, #20]
 2290              	.LBB306:
 2291              	.LBB307:
 2292              	.LBB308:
 2293              	.LBB309:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2294              		.loc 2 1504 19
 2295 00f0 4FF08843 		mov	r3, #1140850688
 2296 00f4 D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2297              		.loc 2 1504 22
 2298 00f8 059B     		ldr	r3, [sp, #20]
 2299 00fa DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2300              		.loc 2 1504 19
 2301 00fc 4FF08841 		mov	r1, #1140850688
 2302 0100 1340     		ands	r3, r3, r2
 2303 0102 C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2304              		.loc 2 1505 24
 2305 0106 4FF08843 		mov	r3, #1140850688
 2306 010a D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2307              		.loc 2 1505 27
 2308 010e 059B     		ldr	r3, [sp, #20]
 2309 0110 DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2310              		.loc 2 1505 24
 2311 0112 4FF08841 		mov	r1, #1140850688
 2312 0116 1340     		ands	r3, r3, r2
 2313 0118 C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 2314              		.loc 2 1507 24
 2315 011c 4FF08843 		mov	r3, #1140850688
 2316 0120 D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 2317              		.loc 2 1507 27
 2318 0124 059B     		ldr	r3, [sp, #20]
 2319 0126 DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 2320              		.loc 2 1507 24
 2321 0128 4FF08841 		mov	r1, #1140850688
 2322 012c 1340     		ands	r3, r3, r2
 2323 012e C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 2324              		.loc 2 1510 15
 2325 0132 4FF08843 		mov	r3, #1140850688
 2326 0136 D3F88C30 		ldr	r3, [r3, #140]
 2327              	.LBE309:
 2328              	.LBE308:
4117:src-gen/sr5e1/clock.h **** 
 2329              		.loc 2 4117 1
 2330 013a 2FE0     		b	.L108
 2331              	.L111:
 2332              	.LBE307:
 2333              	.LBE306:
 183:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         clock_disable_FDCAN3();
 184:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else {
 185:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         can_enabled &= ~(1U << 3U);
 2334              		.loc 1 185 21
 2335 013c 304B     		ldr	r3, .L117+4
 2336 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2337 0140 23F00803 		bic	r3, r3, #8
 2338 0144 DAB2     		uxtb	r2, r3
 2339 0146 2E4B     		ldr	r3, .L117+4
 2340 0148 1A70     		strb	r2, [r3]
 2341 014a 4FF48043 		mov	r3, #16384
 2342 014e 0493     		str	r3, [sp, #16]
 2343              	.LBB310:
 2344              	.LBB311:
 2345              	.LBB312:
 2346              	.LBB313:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2347              		.loc 2 1504 19
 2348 0150 4FF08843 		mov	r3, #1140850688
 2349 0154 D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2350              		.loc 2 1504 22
 2351 0158 049B     		ldr	r3, [sp, #16]
 2352 015a DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2353              		.loc 2 1504 19
 2354 015c 4FF08841 		mov	r1, #1140850688
 2355 0160 1340     		ands	r3, r3, r2
 2356 0162 C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2357              		.loc 2 1505 24
 2358 0166 4FF08843 		mov	r3, #1140850688
 2359 016a D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2360              		.loc 2 1505 27
 2361 016e 049B     		ldr	r3, [sp, #16]
 2362 0170 DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2363              		.loc 2 1505 24
 2364 0172 4FF08841 		mov	r1, #1140850688
 2365 0176 1340     		ands	r3, r3, r2
 2366 0178 C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 2367              		.loc 2 1507 24
 2368 017c 4FF08843 		mov	r3, #1140850688
 2369 0180 D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 2370              		.loc 2 1507 27
 2371 0184 049B     		ldr	r3, [sp, #16]
 2372 0186 DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 2373              		.loc 2 1507 24
 2374 0188 4FF08841 		mov	r1, #1140850688
 2375 018c 1340     		ands	r3, r3, r2
 2376 018e C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 2377              		.loc 2 1510 15
 2378 0192 4FF08843 		mov	r3, #1140850688
 2379 0196 D3F88C30 		ldr	r3, [r3, #140]
 2380              	.LBE313:
 2381              	.LBE312:
4162:src-gen/sr5e1/clock.h **** 
 2382              		.loc 2 4162 1
 2383 019a 00BF     		nop
 2384              	.L108:
 2385              	.LBE311:
 2386              	.LBE310:
 186:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         clock_disable_FDCAN4();
 187:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     }
 188:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 189:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     /* Disable the clock of the FDCANs Message RAM only if no other FDCAN
 190:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****        instance is enabled.*/
 191:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     if(can_enabled == 0U) {
 2387              		.loc 1 191 20
 2388 019c 184B     		ldr	r3, .L117+4
 2389 019e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2390              		.loc 1 191 7
 2391 01a0 002B     		cmp	r3, #0
 2392 01a2 28D1     		bne	.L116
 2393 01a4 4FF48033 		mov	r3, #65536
 2394 01a8 0393     		str	r3, [sp, #12]
 2395              	.LBB314:
 2396              	.LBB315:
 2397              	.LBB316:
 2398              	.LBB317:
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2399              		.loc 2 1504 19
 2400 01aa 4FF08843 		mov	r3, #1140850688
 2401 01ae D3F88C20 		ldr	r2, [r3, #140]
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2402              		.loc 2 1504 22
 2403 01b2 039B     		ldr	r3, [sp, #12]
 2404 01b4 DB43     		mvns	r3, r3
1504:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
 2405              		.loc 2 1504 19
 2406 01b6 4FF08841 		mov	r1, #1140850688
 2407 01ba 1340     		ands	r3, r3, r2
 2408 01bc C1F88C30 		str	r3, [r1, #140]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2409              		.loc 2 1505 24
 2410 01c0 4FF08843 		mov	r3, #1140850688
 2411 01c4 D3F8AC20 		ldr	r2, [r3, #172]
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2412              		.loc 2 1505 27
 2413 01c8 039B     		ldr	r3, [sp, #12]
 2414 01ca DB43     		mvns	r3, r3
1505:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 2415              		.loc 2 1505 24
 2416 01cc 4FF08841 		mov	r1, #1140850688
 2417 01d0 1340     		ands	r3, r3, r2
 2418 01d2 C1F8AC30 		str	r3, [r1, #172]
1507:src-gen/sr5e1/clock.h **** #endif
 2419              		.loc 2 1507 24
 2420 01d6 4FF08843 		mov	r3, #1140850688
 2421 01da D3F8CC20 		ldr	r2, [r3, #204]
1507:src-gen/sr5e1/clock.h **** #endif
 2422              		.loc 2 1507 27
 2423 01de 039B     		ldr	r3, [sp, #12]
 2424 01e0 DB43     		mvns	r3, r3
1507:src-gen/sr5e1/clock.h **** #endif
 2425              		.loc 2 1507 24
 2426 01e2 4FF08841 		mov	r1, #1140850688
 2427 01e6 1340     		ands	r3, r3, r2
 2428 01e8 C1F8CC30 		str	r3, [r1, #204]
1510:src-gen/sr5e1/clock.h **** }
 2429              		.loc 2 1510 15
 2430 01ec 4FF08843 		mov	r3, #1140850688
 2431 01f0 D3F88C30 		ldr	r3, [r3, #140]
 2432              	.LBE317:
 2433              	.LBE316:
4198:src-gen/sr5e1/clock.h **** 
4199:src-gen/sr5e1/clock.h **** /**
4200:src-gen/sr5e1/clock.h ****  * @brief   Disables FDCAN MRAM clock
4201:src-gen/sr5e1/clock.h ****  *
4202:src-gen/sr5e1/clock.h ****  * @api
4203:src-gen/sr5e1/clock.h ****  */
4204:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_FDCAN_MRAM(void) {
4205:src-gen/sr5e1/clock.h **** 
4206:src-gen/sr5e1/clock.h ****     clock_disable_APB2H(RCC_APB2HENR_FDCAN_MRAM);
4207:src-gen/sr5e1/clock.h **** }
 2434              		.loc 2 4207 1
 2435 01f4 00BF     		nop
 2436              	.L116:
 2437              	.LBE315:
 2438              	.LBE314:
 192:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         clock_disable_FDCAN_MRAM();
 193:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     }
 194:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 2439              		.loc 1 194 1
 2440 01f6 00BF     		nop
 2441 01f8 08B0     		add	sp, sp, #32
 2442              		.cfi_def_cfa_offset 0
 2443              		@ sp needed
 2444 01fa 7047     		bx	lr
 2445              	.L118:
 2446              		.align	2
 2447              	.L117:
 2448 01fc 00000000 		.word	DRV_CAN1
 2449 0200 00000000 		.word	can_enabled
 2450 0204 00000000 		.word	DRV_CAN2
 2451 0208 00000000 		.word	DRV_CAN3
 2452              		.cfi_endproc
 2453              	.LFE459:
 2455              		.section	.text.can_dev_get_dma_tx_trigger,"ax",%progbits
 2456              		.align	1
 2457              		.p2align 4,,15
 2458              		.global	can_dev_get_dma_tx_trigger
 2459              		.syntax unified
 2460              		.thumb
 2461              		.thumb_func
 2463              	can_dev_get_dma_tx_trigger:
 2464              	.LFB460:
 195:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 196:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 197:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Returns CAN DMA TX trigger.
 198:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 199:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
 200:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @return              DMA TX trigger.
 201:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 202:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
 203:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 204:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** uint32_t can_dev_get_dma_tx_trigger(can_driver_t *cdp) {
 2465              		.loc 1 204 56
 2466              		.cfi_startproc
 2467              		@ args = 0, pretend = 0, frame = 16
 2468              		@ frame_needed = 0, uses_anonymous_args = 0
 2469              		@ link register save eliminated.
 2470 0000 84B0     		sub	sp, sp, #16
 2471              		.cfi_def_cfa_offset 16
 2472 0002 0190     		str	r0, [sp, #4]
 205:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 206:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     uint32_t dma_tx_trigger;
 207:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 208:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     if (cdp == &DRV_CAN1) {
 2473              		.loc 1 208 8
 2474 0004 019B     		ldr	r3, [sp, #4]
 2475 0006 0D4A     		ldr	r2, .L125
 2476 0008 9342     		cmp	r3, r2
 2477 000a 02D1     		bne	.L120
 209:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         dma_tx_trigger = DMAMUX1_CAN_SUB_1_DMU_1_TX;
 2478              		.loc 1 209 24
 2479 000c 8223     		movs	r3, #130
 2480 000e 0393     		str	r3, [sp, #12]
 2481 0010 0FE0     		b	.L121
 2482              	.L120:
 210:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN2) {
 2483              		.loc 1 210 15
 2484 0012 019B     		ldr	r3, [sp, #4]
 2485 0014 0A4A     		ldr	r2, .L125+4
 2486 0016 9342     		cmp	r3, r2
 2487 0018 02D1     		bne	.L122
 211:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         dma_tx_trigger = DMAMUX1_CAN_SUB_1_DMU_2_TX;
 2488              		.loc 1 211 24
 2489 001a 8623     		movs	r3, #134
 2490 001c 0393     		str	r3, [sp, #12]
 2491 001e 08E0     		b	.L121
 2492              	.L122:
 212:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN3) {
 2493              		.loc 1 212 15
 2494 0020 019B     		ldr	r3, [sp, #4]
 2495 0022 084A     		ldr	r2, .L125+8
 2496 0024 9342     		cmp	r3, r2
 2497 0026 02D1     		bne	.L123
 213:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         dma_tx_trigger = DMAMUX1_CAN_SUB_1_DMU_3_TX;
 2498              		.loc 1 213 24
 2499 0028 8A23     		movs	r3, #138
 2500 002a 0393     		str	r3, [sp, #12]
 2501 002c 01E0     		b	.L121
 2502              	.L123:
 214:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else {
 215:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         dma_tx_trigger = DMAMUX1_CAN_SUB_1_DMU_4_TX;
 2503              		.loc 1 215 24
 2504 002e 8E23     		movs	r3, #142
 2505 0030 0393     		str	r3, [sp, #12]
 2506              	.L121:
 216:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     }
 217:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 218:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     return dma_tx_trigger;
 2507              		.loc 1 218 12
 2508 0032 039B     		ldr	r3, [sp, #12]
 219:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 2509              		.loc 1 219 1
 2510 0034 1846     		mov	r0, r3
 2511 0036 04B0     		add	sp, sp, #16
 2512              		.cfi_def_cfa_offset 0
 2513              		@ sp needed
 2514 0038 7047     		bx	lr
 2515              	.L126:
 2516 003a 00BF     		.align	2
 2517              	.L125:
 2518 003c 00000000 		.word	DRV_CAN1
 2519 0040 00000000 		.word	DRV_CAN2
 2520 0044 00000000 		.word	DRV_CAN3
 2521              		.cfi_endproc
 2522              	.LFE460:
 2524              		.section	.text.can_dev_get_dma_rx0_trigger,"ax",%progbits
 2525              		.align	1
 2526              		.p2align 4,,15
 2527              		.global	can_dev_get_dma_rx0_trigger
 2528              		.syntax unified
 2529              		.thumb
 2530              		.thumb_func
 2532              	can_dev_get_dma_rx0_trigger:
 2533              	.LFB461:
 220:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 221:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 222:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Returns CAN DMA RX0 trigger.
 223:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 224:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
 225:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @return              DMA RX0 trigger.
 226:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 227:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
 228:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 229:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** uint32_t can_dev_get_dma_rx0_trigger(can_driver_t *cdp) {
 2534              		.loc 1 229 57
 2535              		.cfi_startproc
 2536              		@ args = 0, pretend = 0, frame = 16
 2537              		@ frame_needed = 0, uses_anonymous_args = 0
 2538              		@ link register save eliminated.
 2539 0000 84B0     		sub	sp, sp, #16
 2540              		.cfi_def_cfa_offset 16
 2541 0002 0190     		str	r0, [sp, #4]
 230:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 231:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     uint32_t dma_rx0_trigger;
 232:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 233:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     if (cdp == &DRV_CAN1) {
 2542              		.loc 1 233 8
 2543 0004 019B     		ldr	r3, [sp, #4]
 2544 0006 0D4A     		ldr	r2, .L133
 2545 0008 9342     		cmp	r3, r2
 2546 000a 02D1     		bne	.L128
 234:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         dma_rx0_trigger = DMAMUX1_CAN_SUB_1_DMU_1_RX0;
 2547              		.loc 1 234 25
 2548 000c 8423     		movs	r3, #132
 2549 000e 0393     		str	r3, [sp, #12]
 2550 0010 0FE0     		b	.L129
 2551              	.L128:
 235:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN2) {
 2552              		.loc 1 235 15
 2553 0012 019B     		ldr	r3, [sp, #4]
 2554 0014 0A4A     		ldr	r2, .L133+4
 2555 0016 9342     		cmp	r3, r2
 2556 0018 02D1     		bne	.L130
 236:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         dma_rx0_trigger = DMAMUX1_CAN_SUB_1_DMU_2_RX0;
 2557              		.loc 1 236 25
 2558 001a 8823     		movs	r3, #136
 2559 001c 0393     		str	r3, [sp, #12]
 2560 001e 08E0     		b	.L129
 2561              	.L130:
 237:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN3) {
 2562              		.loc 1 237 15
 2563 0020 019B     		ldr	r3, [sp, #4]
 2564 0022 084A     		ldr	r2, .L133+8
 2565 0024 9342     		cmp	r3, r2
 2566 0026 02D1     		bne	.L131
 238:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         dma_rx0_trigger = DMAMUX1_CAN_SUB_1_DMU_3_RX0;
 2567              		.loc 1 238 25
 2568 0028 8C23     		movs	r3, #140
 2569 002a 0393     		str	r3, [sp, #12]
 2570 002c 01E0     		b	.L129
 2571              	.L131:
 239:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else {
 240:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         dma_rx0_trigger = DMAMUX1_CAN_SUB_1_DMU_4_RX0;
 2572              		.loc 1 240 25
 2573 002e 9023     		movs	r3, #144
 2574 0030 0393     		str	r3, [sp, #12]
 2575              	.L129:
 241:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     }
 242:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 243:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     return dma_rx0_trigger;
 2576              		.loc 1 243 12
 2577 0032 039B     		ldr	r3, [sp, #12]
 244:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 2578              		.loc 1 244 1
 2579 0034 1846     		mov	r0, r3
 2580 0036 04B0     		add	sp, sp, #16
 2581              		.cfi_def_cfa_offset 0
 2582              		@ sp needed
 2583 0038 7047     		bx	lr
 2584              	.L134:
 2585 003a 00BF     		.align	2
 2586              	.L133:
 2587 003c 00000000 		.word	DRV_CAN1
 2588 0040 00000000 		.word	DRV_CAN2
 2589 0044 00000000 		.word	DRV_CAN3
 2590              		.cfi_endproc
 2591              	.LFE461:
 2593              		.section	.text.can_dev_get_dma_rx1_trigger,"ax",%progbits
 2594              		.align	1
 2595              		.p2align 4,,15
 2596              		.global	can_dev_get_dma_rx1_trigger
 2597              		.syntax unified
 2598              		.thumb
 2599              		.thumb_func
 2601              	can_dev_get_dma_rx1_trigger:
 2602              	.LFB462:
 245:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 246:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 247:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Returns CAN DMA RX1 trigger.
 248:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 249:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
 250:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @return              DMA RX1 trigger.
 251:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 252:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
 253:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 254:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** uint32_t can_dev_get_dma_rx1_trigger(can_driver_t *cdp) {
 2603              		.loc 1 254 57
 2604              		.cfi_startproc
 2605              		@ args = 0, pretend = 0, frame = 16
 2606              		@ frame_needed = 0, uses_anonymous_args = 0
 2607              		@ link register save eliminated.
 2608 0000 84B0     		sub	sp, sp, #16
 2609              		.cfi_def_cfa_offset 16
 2610 0002 0190     		str	r0, [sp, #4]
 255:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 256:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     uint32_t dma_rx1_trigger;
 257:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 258:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     if (cdp == &DRV_CAN1) {
 2611              		.loc 1 258 8
 2612 0004 019B     		ldr	r3, [sp, #4]
 2613 0006 0D4A     		ldr	r2, .L141
 2614 0008 9342     		cmp	r3, r2
 2615 000a 02D1     		bne	.L136
 259:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         dma_rx1_trigger = DMAMUX1_CAN_SUB_1_DMU_1_RX1;
 2616              		.loc 1 259 25
 2617 000c 8523     		movs	r3, #133
 2618 000e 0393     		str	r3, [sp, #12]
 2619 0010 0FE0     		b	.L137
 2620              	.L136:
 260:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN2) {
 2621              		.loc 1 260 15
 2622 0012 019B     		ldr	r3, [sp, #4]
 2623 0014 0A4A     		ldr	r2, .L141+4
 2624 0016 9342     		cmp	r3, r2
 2625 0018 02D1     		bne	.L138
 261:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         dma_rx1_trigger = DMAMUX1_CAN_SUB_1_DMU_2_RX1;
 2626              		.loc 1 261 25
 2627 001a 8923     		movs	r3, #137
 2628 001c 0393     		str	r3, [sp, #12]
 2629 001e 08E0     		b	.L137
 2630              	.L138:
 262:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN3) {
 2631              		.loc 1 262 15
 2632 0020 019B     		ldr	r3, [sp, #4]
 2633 0022 084A     		ldr	r2, .L141+8
 2634 0024 9342     		cmp	r3, r2
 2635 0026 02D1     		bne	.L139
 263:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         dma_rx1_trigger = DMAMUX1_CAN_SUB_1_DMU_3_RX1;
 2636              		.loc 1 263 25
 2637 0028 8D23     		movs	r3, #141
 2638 002a 0393     		str	r3, [sp, #12]
 2639 002c 01E0     		b	.L137
 2640              	.L139:
 264:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else {
 265:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         dma_rx1_trigger = DMAMUX1_CAN_SUB_1_DMU_4_RX1;
 2641              		.loc 1 265 25
 2642 002e 9123     		movs	r3, #145
 2643 0030 0393     		str	r3, [sp, #12]
 2644              	.L137:
 266:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     }
 267:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 268:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     return dma_rx1_trigger;
 2645              		.loc 1 268 12
 2646 0032 039B     		ldr	r3, [sp, #12]
 269:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 2647              		.loc 1 269 1
 2648 0034 1846     		mov	r0, r3
 2649 0036 04B0     		add	sp, sp, #16
 2650              		.cfi_def_cfa_offset 0
 2651              		@ sp needed
 2652 0038 7047     		bx	lr
 2653              	.L142:
 2654 003a 00BF     		.align	2
 2655              	.L141:
 2656 003c 00000000 		.word	DRV_CAN1
 2657 0040 00000000 		.word	DRV_CAN2
 2658 0044 00000000 		.word	DRV_CAN3
 2659              		.cfi_endproc
 2660              	.LFE462:
 2662              		.section	.text.can_dev_get_line0_vector,"ax",%progbits
 2663              		.align	1
 2664              		.p2align 4,,15
 2665              		.global	can_dev_get_line0_vector
 2666              		.syntax unified
 2667              		.thumb
 2668              		.thumb_func
 2670              	can_dev_get_line0_vector:
 2671              	.LFB463:
 270:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 271:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 272:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Returns CAN LINE0 interrupt vector.
 273:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 274:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
 275:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @return              CAN line0 interrupt vector
 276:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 277:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
 278:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 279:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQn_Type can_dev_get_line0_vector(can_driver_t *cdp) {
 2672              		.loc 1 279 55
 2673              		.cfi_startproc
 2674              		@ args = 0, pretend = 0, frame = 16
 2675              		@ frame_needed = 0, uses_anonymous_args = 0
 2676              		@ link register save eliminated.
 2677 0000 84B0     		sub	sp, sp, #16
 2678              		.cfi_def_cfa_offset 16
 2679 0002 0190     		str	r0, [sp, #4]
 280:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 281:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQn_Type vector;
 282:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 283:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     if (cdp == &DRV_CAN1) {
 2680              		.loc 1 283 8
 2681 0004 019B     		ldr	r3, [sp, #4]
 2682 0006 0F4A     		ldr	r2, .L149
 2683 0008 9342     		cmp	r3, r2
 2684 000a 03D1     		bne	.L144
 284:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         vector = IRQ_CAN1_LINE0_VECTOR;
 2685              		.loc 1 284 16
 2686 000c 5423     		movs	r3, #84
 2687 000e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 2688 0012 12E0     		b	.L145
 2689              	.L144:
 285:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN2) {
 2690              		.loc 1 285 15
 2691 0014 019B     		ldr	r3, [sp, #4]
 2692 0016 0C4A     		ldr	r2, .L149+4
 2693 0018 9342     		cmp	r3, r2
 2694 001a 03D1     		bne	.L146
 286:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         vector = IRQ_CAN2_LINE0_VECTOR;
 2695              		.loc 1 286 16
 2696 001c 5723     		movs	r3, #87
 2697 001e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 2698 0022 0AE0     		b	.L145
 2699              	.L146:
 287:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN3) {
 2700              		.loc 1 287 15
 2701 0024 019B     		ldr	r3, [sp, #4]
 2702 0026 094A     		ldr	r2, .L149+8
 2703 0028 9342     		cmp	r3, r2
 2704 002a 03D1     		bne	.L147
 288:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         vector = IRQ_CAN3_LINE0_VECTOR;
 2705              		.loc 1 288 16
 2706 002c 5A23     		movs	r3, #90
 2707 002e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 2708 0032 02E0     		b	.L145
 2709              	.L147:
 289:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else {
 290:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         vector = IRQ_CAN4_LINE0_VECTOR;
 2710              		.loc 1 290 16
 2711 0034 5D23     		movs	r3, #93
 2712 0036 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 2713              	.L145:
 291:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     }
 292:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 293:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     return vector;
 2714              		.loc 1 293 12
 2715 003a BDF90E30 		ldrsh	r3, [sp, #14]
 294:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 2716              		.loc 1 294 1
 2717 003e 1846     		mov	r0, r3
 2718 0040 04B0     		add	sp, sp, #16
 2719              		.cfi_def_cfa_offset 0
 2720              		@ sp needed
 2721 0042 7047     		bx	lr
 2722              	.L150:
 2723              		.align	2
 2724              	.L149:
 2725 0044 00000000 		.word	DRV_CAN1
 2726 0048 00000000 		.word	DRV_CAN2
 2727 004c 00000000 		.word	DRV_CAN3
 2728              		.cfi_endproc
 2729              	.LFE463:
 2731              		.section	.text.can_dev_get_line1_vector,"ax",%progbits
 2732              		.align	1
 2733              		.p2align 4,,15
 2734              		.global	can_dev_get_line1_vector
 2735              		.syntax unified
 2736              		.thumb
 2737              		.thumb_func
 2739              	can_dev_get_line1_vector:
 2740              	.LFB464:
 295:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 296:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 297:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Returns CAN LINE1 interrupt vector.
 298:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 299:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
 300:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @return              CAN line1 interrupt vector
 301:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 302:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
 303:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 304:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQn_Type can_dev_get_line1_vector(can_driver_t *cdp) {
 2741              		.loc 1 304 55
 2742              		.cfi_startproc
 2743              		@ args = 0, pretend = 0, frame = 16
 2744              		@ frame_needed = 0, uses_anonymous_args = 0
 2745              		@ link register save eliminated.
 2746 0000 84B0     		sub	sp, sp, #16
 2747              		.cfi_def_cfa_offset 16
 2748 0002 0190     		str	r0, [sp, #4]
 305:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 306:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQn_Type vector;
 307:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 308:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     if (cdp == &DRV_CAN1) {
 2749              		.loc 1 308 8
 2750 0004 019B     		ldr	r3, [sp, #4]
 2751 0006 0F4A     		ldr	r2, .L157
 2752 0008 9342     		cmp	r3, r2
 2753 000a 03D1     		bne	.L152
 309:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         vector = IRQ_CAN1_LINE1_VECTOR;
 2754              		.loc 1 309 16
 2755 000c 5523     		movs	r3, #85
 2756 000e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 2757 0012 12E0     		b	.L153
 2758              	.L152:
 310:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN2) {
 2759              		.loc 1 310 15
 2760 0014 019B     		ldr	r3, [sp, #4]
 2761 0016 0C4A     		ldr	r2, .L157+4
 2762 0018 9342     		cmp	r3, r2
 2763 001a 03D1     		bne	.L154
 311:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         vector = IRQ_CAN2_LINE1_VECTOR;
 2764              		.loc 1 311 16
 2765 001c 5823     		movs	r3, #88
 2766 001e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 2767 0022 0AE0     		b	.L153
 2768              	.L154:
 312:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN3) {
 2769              		.loc 1 312 15
 2770 0024 019B     		ldr	r3, [sp, #4]
 2771 0026 094A     		ldr	r2, .L157+8
 2772 0028 9342     		cmp	r3, r2
 2773 002a 03D1     		bne	.L155
 313:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         vector = IRQ_CAN3_LINE1_VECTOR;
 2774              		.loc 1 313 16
 2775 002c 5B23     		movs	r3, #91
 2776 002e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 2777 0032 02E0     		b	.L153
 2778              	.L155:
 314:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else {
 315:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         vector = IRQ_CAN4_LINE1_VECTOR;
 2779              		.loc 1 315 16
 2780 0034 5E23     		movs	r3, #94
 2781 0036 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 2782              	.L153:
 316:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     }
 317:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 318:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     return vector;
 2783              		.loc 1 318 12
 2784 003a BDF90E30 		ldrsh	r3, [sp, #14]
 319:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 2785              		.loc 1 319 1
 2786 003e 1846     		mov	r0, r3
 2787 0040 04B0     		add	sp, sp, #16
 2788              		.cfi_def_cfa_offset 0
 2789              		@ sp needed
 2790 0042 7047     		bx	lr
 2791              	.L158:
 2792              		.align	2
 2793              	.L157:
 2794 0044 00000000 		.word	DRV_CAN1
 2795 0048 00000000 		.word	DRV_CAN2
 2796 004c 00000000 		.word	DRV_CAN3
 2797              		.cfi_endproc
 2798              	.LFE464:
 2800              		.section	.text.can_dev_get_dmu_vector,"ax",%progbits
 2801              		.align	1
 2802              		.p2align 4,,15
 2803              		.global	can_dev_get_dmu_vector
 2804              		.syntax unified
 2805              		.thumb
 2806              		.thumb_func
 2808              	can_dev_get_dmu_vector:
 2809              	.LFB465:
 320:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 321:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 322:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Returns CAN DMU interrupt vector.
 323:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 324:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
 325:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @return              CAN line1 interrupt vector
 326:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 327:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
 328:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 329:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQn_Type can_dev_get_dmu_vector(can_driver_t *cdp) {
 2810              		.loc 1 329 53
 2811              		.cfi_startproc
 2812              		@ args = 0, pretend = 0, frame = 16
 2813              		@ frame_needed = 0, uses_anonymous_args = 0
 2814              		@ link register save eliminated.
 2815 0000 84B0     		sub	sp, sp, #16
 2816              		.cfi_def_cfa_offset 16
 2817 0002 0190     		str	r0, [sp, #4]
 330:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 331:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQn_Type vector;
 332:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 333:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     if (cdp == &DRV_CAN1) {
 2818              		.loc 1 333 8
 2819 0004 019B     		ldr	r3, [sp, #4]
 2820 0006 0F4A     		ldr	r2, .L165
 2821 0008 9342     		cmp	r3, r2
 2822 000a 03D1     		bne	.L160
 334:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         vector = IRQ_CAN1_DMU_VECTOR;
 2823              		.loc 1 334 16
 2824 000c 5623     		movs	r3, #86
 2825 000e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 2826 0012 12E0     		b	.L161
 2827              	.L160:
 335:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN2) {
 2828              		.loc 1 335 15
 2829 0014 019B     		ldr	r3, [sp, #4]
 2830 0016 0C4A     		ldr	r2, .L165+4
 2831 0018 9342     		cmp	r3, r2
 2832 001a 03D1     		bne	.L162
 336:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         vector = IRQ_CAN2_DMU_VECTOR;
 2833              		.loc 1 336 16
 2834 001c 5923     		movs	r3, #89
 2835 001e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 2836 0022 0AE0     		b	.L161
 2837              	.L162:
 337:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN3) {
 2838              		.loc 1 337 15
 2839 0024 019B     		ldr	r3, [sp, #4]
 2840 0026 094A     		ldr	r2, .L165+8
 2841 0028 9342     		cmp	r3, r2
 2842 002a 03D1     		bne	.L163
 338:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         vector = IRQ_CAN3_DMU_VECTOR;
 2843              		.loc 1 338 16
 2844 002c 5C23     		movs	r3, #92
 2845 002e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 2846 0032 02E0     		b	.L161
 2847              	.L163:
 339:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else {
 340:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         vector = IRQ_CAN4_DMU_VECTOR;
 2848              		.loc 1 340 16
 2849 0034 5F23     		movs	r3, #95
 2850 0036 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 2851              	.L161:
 341:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     }
 342:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 343:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     return vector;
 2852              		.loc 1 343 12
 2853 003a BDF90E30 		ldrsh	r3, [sp, #14]
 344:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 2854              		.loc 1 344 1
 2855 003e 1846     		mov	r0, r3
 2856 0040 04B0     		add	sp, sp, #16
 2857              		.cfi_def_cfa_offset 0
 2858              		@ sp needed
 2859 0042 7047     		bx	lr
 2860              	.L166:
 2861              		.align	2
 2862              	.L165:
 2863 0044 00000000 		.word	DRV_CAN1
 2864 0048 00000000 		.word	DRV_CAN2
 2865 004c 00000000 		.word	DRV_CAN3
 2866              		.cfi_endproc
 2867              	.LFE465:
 2869              		.section	.text.can_dev_get_msg_ram_address,"ax",%progbits
 2870              		.align	1
 2871              		.p2align 4,,15
 2872              		.global	can_dev_get_msg_ram_address
 2873              		.syntax unified
 2874              		.thumb
 2875              		.thumb_func
 2877              	can_dev_get_msg_ram_address:
 2878              	.LFB466:
 345:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 346:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 347:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Returns submodule shared RAM start address.
 348:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 349:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
 350:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @return              ssubmodule shared RAM start address.
 351:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 352:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
 353:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 354:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** uint32_t can_dev_get_msg_ram_address(can_driver_t *cdp) {
 2879              		.loc 1 354 57
 2880              		.cfi_startproc
 2881              		@ args = 0, pretend = 0, frame = 8
 2882              		@ frame_needed = 0, uses_anonymous_args = 0
 2883              		@ link register save eliminated.
 2884 0000 82B0     		sub	sp, sp, #8
 2885              		.cfi_def_cfa_offset 8
 2886 0002 0190     		str	r0, [sp, #4]
 355:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 356:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     (void)cdp;
 357:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     return (uint32_t)(SRAMCAN_BASE);
 2887              		.loc 1 357 12
 2888 0004 014B     		ldr	r3, .L169
 358:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 2889              		.loc 1 358 1
 2890 0006 1846     		mov	r0, r3
 2891 0008 02B0     		add	sp, sp, #8
 2892              		.cfi_def_cfa_offset 0
 2893              		@ sp needed
 2894 000a 7047     		bx	lr
 2895              	.L170:
 2896              		.align	2
 2897              	.L169:
 2898 000c 00C00042 		.word	1107345408
 2899              		.cfi_endproc
 2900              	.LFE466:
 2902              		.section	.text.can_dev_get_msg_ram_size,"ax",%progbits
 2903              		.align	1
 2904              		.p2align 4,,15
 2905              		.global	can_dev_get_msg_ram_size
 2906              		.syntax unified
 2907              		.thumb
 2908              		.thumb_func
 2910              	can_dev_get_msg_ram_size:
 2911              	.LFB467:
 359:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 360:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 361:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Returns submodule shared RAM size.
 362:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 363:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
 364:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @return              ssubmodule shared RAM size.
 365:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 366:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
 367:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 368:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** uint32_t can_dev_get_msg_ram_size(can_driver_t *cdp) {
 2912              		.loc 1 368 54
 2913              		.cfi_startproc
 2914              		@ args = 0, pretend = 0, frame = 8
 2915              		@ frame_needed = 0, uses_anonymous_args = 0
 2916              		@ link register save eliminated.
 2917 0000 82B0     		sub	sp, sp, #8
 2918              		.cfi_def_cfa_offset 8
 2919 0002 0190     		str	r0, [sp, #4]
 369:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 370:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     (void)cdp;
 371:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     return (uint32_t)(CAN_SUB_SRAM_SIZE);
 2920              		.loc 1 371 12
 2921 0004 4FF48043 		mov	r3, #16384
 372:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 2922              		.loc 1 372 1
 2923 0008 1846     		mov	r0, r3
 2924 000a 02B0     		add	sp, sp, #8
 2925              		.cfi_def_cfa_offset 0
 2926              		@ sp needed
 2927 000c 7047     		bx	lr
 2928              		.cfi_endproc
 2929              	.LFE467:
 2931 000e 00BF     		.section	.text.can_dev_get_ram_start,"ax",%progbits
 2932              		.align	1
 2933              		.p2align 4,,15
 2934              		.global	can_dev_get_ram_start
 2935              		.syntax unified
 2936              		.thumb
 2937              		.thumb_func
 2939              	can_dev_get_ram_start:
 2940              	.LFB468:
 373:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 374:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 375:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Returns CAN shared RAM base address reserved to CAN instance.
 376:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @note    By default the submodule shared RAM is divided between all CAN
 377:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *          instances within the submodule.
 378:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 379:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
 380:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @return              shared RAM base address reserved to CAN driver.
 381:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 382:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
 383:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 384:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** uint32_t can_dev_get_ram_start(can_driver_t *cdp) {
 2941              		.loc 1 384 51
 2942              		.cfi_startproc
 2943              		@ args = 0, pretend = 0, frame = 16
 2944              		@ frame_needed = 0, uses_anonymous_args = 0
 2945 0000 00B5     		push	{lr}
 2946              		.cfi_def_cfa_offset 4
 2947              		.cfi_offset 14, -4
 2948 0002 85B0     		sub	sp, sp, #20
 2949              		.cfi_def_cfa_offset 24
 2950 0004 0190     		str	r0, [sp, #4]
 385:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 386:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     uint32_t ram_address = can_dev_get_msg_ram_address(cdp);
 2951              		.loc 1 386 28
 2952 0006 0198     		ldr	r0, [sp, #4]
 2953 0008 FFF7FEFF 		bl	can_dev_get_msg_ram_address
 2954 000c 0390     		str	r0, [sp, #12]
 387:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     uint32_t ram_size    = can_dev_get_msg_ram_size(cdp) / 4U;
 2955              		.loc 1 387 28
 2956 000e 0198     		ldr	r0, [sp, #4]
 2957 0010 FFF7FEFF 		bl	can_dev_get_msg_ram_size
 2958 0014 0346     		mov	r3, r0
 2959              		.loc 1 387 14
 2960 0016 9B08     		lsrs	r3, r3, #2
 2961 0018 0293     		str	r3, [sp, #8]
 388:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 389:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     if (cdp == &DRV_CAN1) {
 2962              		.loc 1 389 8
 2963 001a 019B     		ldr	r3, [sp, #4]
 2964 001c 0F4A     		ldr	r2, .L178
 2965 001e 9342     		cmp	r3, r2
 2966 0020 01D1     		bne	.L174
 390:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         return ram_address;
 2967              		.loc 1 390 16
 2968 0022 039B     		ldr	r3, [sp, #12]
 2969 0024 16E0     		b	.L175
 2970              	.L174:
 391:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN2) {
 2971              		.loc 1 391 15
 2972 0026 019B     		ldr	r3, [sp, #4]
 2973 0028 0D4A     		ldr	r2, .L178+4
 2974 002a 9342     		cmp	r3, r2
 2975 002c 03D1     		bne	.L176
 392:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         return ram_address + ram_size;
 2976              		.loc 1 392 28
 2977 002e 039A     		ldr	r2, [sp, #12]
 2978 0030 029B     		ldr	r3, [sp, #8]
 2979 0032 1344     		add	r3, r3, r2
 2980 0034 0EE0     		b	.L175
 2981              	.L176:
 393:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else if (cdp == &DRV_CAN3) {
 2982              		.loc 1 393 15
 2983 0036 019B     		ldr	r3, [sp, #4]
 2984 0038 0A4A     		ldr	r2, .L178+8
 2985 003a 9342     		cmp	r3, r2
 2986 003c 04D1     		bne	.L177
 394:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         return ram_address + 2U * ram_size;
 2987              		.loc 1 394 33
 2988 003e 029B     		ldr	r3, [sp, #8]
 2989 0040 5A00     		lsls	r2, r3, #1
 2990              		.loc 1 394 28
 2991 0042 039B     		ldr	r3, [sp, #12]
 2992 0044 1344     		add	r3, r3, r2
 2993 0046 05E0     		b	.L175
 2994              	.L177:
 395:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     } else {
 396:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****         return ram_address + 3U * ram_size;
 2995              		.loc 1 396 33
 2996 0048 029A     		ldr	r2, [sp, #8]
 2997 004a 1346     		mov	r3, r2
 2998 004c 5B00     		lsls	r3, r3, #1
 2999 004e 1A44     		add	r2, r2, r3
 3000              		.loc 1 396 28
 3001 0050 039B     		ldr	r3, [sp, #12]
 3002 0052 1344     		add	r3, r3, r2
 3003              	.L175:
 397:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     }
 398:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3004              		.loc 1 398 1
 3005 0054 1846     		mov	r0, r3
 3006 0056 05B0     		add	sp, sp, #20
 3007              		.cfi_def_cfa_offset 4
 3008              		@ sp needed
 3009 0058 5DF804FB 		ldr	pc, [sp], #4
 3010              	.L179:
 3011              		.align	2
 3012              	.L178:
 3013 005c 00000000 		.word	DRV_CAN1
 3014 0060 00000000 		.word	DRV_CAN2
 3015 0064 00000000 		.word	DRV_CAN3
 3016              		.cfi_endproc
 3017              	.LFE468:
 3019              		.section	.text.can_dev_get_ram_size,"ax",%progbits
 3020              		.align	1
 3021              		.p2align 4,,15
 3022              		.global	can_dev_get_ram_size
 3023              		.syntax unified
 3024              		.thumb
 3025              		.thumb_func
 3027              	can_dev_get_ram_size:
 3028              	.LFB469:
 399:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 400:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 401:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   Returns CAN shared RAM size reserved to CAN instance.
 402:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @note    By default the submodule shared RAM is divided between all CAN
 403:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *          instances within the submodule.
 404:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 405:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @param[in] cdp       pointer to a @p can_driver_t structure
 406:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @return              shared RAM base address reserved to CAN driver.
 407:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 408:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @notapi
 409:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 410:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** uint32_t can_dev_get_ram_size(can_driver_t *cdp) {
 3029              		.loc 1 410 50
 3030              		.cfi_startproc
 3031              		@ args = 0, pretend = 0, frame = 8
 3032              		@ frame_needed = 0, uses_anonymous_args = 0
 3033 0000 00B5     		push	{lr}
 3034              		.cfi_def_cfa_offset 4
 3035              		.cfi_offset 14, -4
 3036 0002 83B0     		sub	sp, sp, #12
 3037              		.cfi_def_cfa_offset 16
 3038 0004 0190     		str	r0, [sp, #4]
 411:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 412:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     (void)cdp;
 413:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     return (can_dev_get_msg_ram_size(cdp) / 4U);
 3039              		.loc 1 413 13
 3040 0006 0198     		ldr	r0, [sp, #4]
 3041 0008 FFF7FEFF 		bl	can_dev_get_msg_ram_size
 3042 000c 0346     		mov	r3, r0
 3043              		.loc 1 413 43
 3044 000e 9B08     		lsrs	r3, r3, #2
 414:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3045              		.loc 1 414 1
 3046 0010 1846     		mov	r0, r3
 3047 0012 03B0     		add	sp, sp, #12
 3048              		.cfi_def_cfa_offset 4
 3049              		@ sp needed
 3050 0014 5DF804FB 		ldr	pc, [sp], #4
 3051              		.cfi_endproc
 3052              	.LFE469:
 3054              		.section	.text.Vector190,"ax",%progbits
 3055              		.align	1
 3056              		.p2align 4,,15
 3057              		.global	Vector190
 3058              		.syntax unified
 3059              		.thumb
 3060              		.thumb_func
 3062              	Vector190:
 3063              	.LFB470:
 415:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 416:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 417:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   FDCAN1 interrupt handler for Line 0.
 418:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 419:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @isr
 420:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 421:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQ_HANDLER(IRQ_CAN1_LINE0_HANDLER)
 422:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** {
 3064              		.loc 1 422 1
 3065              		.cfi_startproc
 3066              		@ args = 0, pretend = 0, frame = 0
 3067              		@ frame_needed = 0, uses_anonymous_args = 0
 3068 0000 08B5     		push	{r3, lr}
 3069              		.cfi_def_cfa_offset 8
 3070              		.cfi_offset 3, -8
 3071              		.cfi_offset 14, -4
 423:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_PROLOGUE();
 424:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 425:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     __can_serve_interrupt(&DRV_CAN1, CAN_IRQ_LINE0);
 3072              		.loc 1 425 5
 3073 0002 0021     		movs	r1, #0
 3074 0004 0248     		ldr	r0, .L183
 3075 0006 FFF7FEFF 		bl	__can_serve_interrupt
 426:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 427:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_EPILOGUE();
 428:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3076              		.loc 1 428 1
 3077 000a 00BF     		nop
 3078 000c 08BD     		pop	{r3, pc}
 3079              	.L184:
 3080 000e 00BF     		.align	2
 3081              	.L183:
 3082 0010 00000000 		.word	DRV_CAN1
 3083              		.cfi_endproc
 3084              	.LFE470:
 3086              		.section	.text.Vector194,"ax",%progbits
 3087              		.align	1
 3088              		.p2align 4,,15
 3089              		.global	Vector194
 3090              		.syntax unified
 3091              		.thumb
 3092              		.thumb_func
 3094              	Vector194:
 3095              	.LFB471:
 429:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 430:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 431:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   FDCAN1 interrupt handler for Line 1.
 432:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 433:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @isr
 434:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 435:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQ_HANDLER(IRQ_CAN1_LINE1_HANDLER)
 436:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** {
 3096              		.loc 1 436 1
 3097              		.cfi_startproc
 3098              		@ args = 0, pretend = 0, frame = 0
 3099              		@ frame_needed = 0, uses_anonymous_args = 0
 3100 0000 08B5     		push	{r3, lr}
 3101              		.cfi_def_cfa_offset 8
 3102              		.cfi_offset 3, -8
 3103              		.cfi_offset 14, -4
 437:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_PROLOGUE();
 438:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 439:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     __can_serve_interrupt(&DRV_CAN1, CAN_IRQ_LINE1);
 3104              		.loc 1 439 5
 3105 0002 0121     		movs	r1, #1
 3106 0004 0248     		ldr	r0, .L186
 3107 0006 FFF7FEFF 		bl	__can_serve_interrupt
 440:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 441:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_EPILOGUE();
 442:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3108              		.loc 1 442 1
 3109 000a 00BF     		nop
 3110 000c 08BD     		pop	{r3, pc}
 3111              	.L187:
 3112 000e 00BF     		.align	2
 3113              	.L186:
 3114 0010 00000000 		.word	DRV_CAN1
 3115              		.cfi_endproc
 3116              	.LFE471:
 3118              		.section	.text.Vector198,"ax",%progbits
 3119              		.align	1
 3120              		.p2align 4,,15
 3121              		.global	Vector198
 3122              		.syntax unified
 3123              		.thumb
 3124              		.thumb_func
 3126              	Vector198:
 3127              	.LFB472:
 443:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 444:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 445:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   FDCAN1 interrupt handler for DMU.
 446:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 447:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @isr
 448:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 449:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQ_HANDLER(IRQ_CAN1_DMU_HANDLER)
 450:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** {
 3128              		.loc 1 450 1
 3129              		.cfi_startproc
 3130              		@ args = 0, pretend = 0, frame = 0
 3131              		@ frame_needed = 0, uses_anonymous_args = 0
 3132 0000 08B5     		push	{r3, lr}
 3133              		.cfi_def_cfa_offset 8
 3134              		.cfi_offset 3, -8
 3135              		.cfi_offset 14, -4
 451:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_PROLOGUE();
 452:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 453:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     __can_serve_dmu_interrupt(&DRV_CAN1);
 3136              		.loc 1 453 5
 3137 0002 0248     		ldr	r0, .L189
 3138 0004 FFF7FEFF 		bl	__can_serve_dmu_interrupt
 454:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 455:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_EPILOGUE();
 456:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3139              		.loc 1 456 1
 3140 0008 00BF     		nop
 3141 000a 08BD     		pop	{r3, pc}
 3142              	.L190:
 3143              		.align	2
 3144              	.L189:
 3145 000c 00000000 		.word	DRV_CAN1
 3146              		.cfi_endproc
 3147              	.LFE472:
 3149              		.section	.text.Vector19C,"ax",%progbits
 3150              		.align	1
 3151              		.p2align 4,,15
 3152              		.global	Vector19C
 3153              		.syntax unified
 3154              		.thumb
 3155              		.thumb_func
 3157              	Vector19C:
 3158              	.LFB473:
 457:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 458:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 459:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   FDCAN2 interrupt handler for Line 0.
 460:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 461:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @isr
 462:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 463:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQ_HANDLER(IRQ_CAN2_LINE0_HANDLER)
 464:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** {
 3159              		.loc 1 464 1
 3160              		.cfi_startproc
 3161              		@ args = 0, pretend = 0, frame = 0
 3162              		@ frame_needed = 0, uses_anonymous_args = 0
 3163 0000 08B5     		push	{r3, lr}
 3164              		.cfi_def_cfa_offset 8
 3165              		.cfi_offset 3, -8
 3166              		.cfi_offset 14, -4
 465:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_PROLOGUE();
 466:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 467:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     __can_serve_interrupt(&DRV_CAN2, CAN_IRQ_LINE0);
 3167              		.loc 1 467 5
 3168 0002 0021     		movs	r1, #0
 3169 0004 0248     		ldr	r0, .L192
 3170 0006 FFF7FEFF 		bl	__can_serve_interrupt
 468:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 469:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_EPILOGUE();
 470:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3171              		.loc 1 470 1
 3172 000a 00BF     		nop
 3173 000c 08BD     		pop	{r3, pc}
 3174              	.L193:
 3175 000e 00BF     		.align	2
 3176              	.L192:
 3177 0010 00000000 		.word	DRV_CAN2
 3178              		.cfi_endproc
 3179              	.LFE473:
 3181              		.section	.text.Vector1A0,"ax",%progbits
 3182              		.align	1
 3183              		.p2align 4,,15
 3184              		.global	Vector1A0
 3185              		.syntax unified
 3186              		.thumb
 3187              		.thumb_func
 3189              	Vector1A0:
 3190              	.LFB474:
 471:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 472:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 473:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   FDCAN2 interrupt handler for Line 1.
 474:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 475:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @isr
 476:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 477:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQ_HANDLER(IRQ_CAN2_LINE1_HANDLER)
 478:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** {
 3191              		.loc 1 478 1
 3192              		.cfi_startproc
 3193              		@ args = 0, pretend = 0, frame = 0
 3194              		@ frame_needed = 0, uses_anonymous_args = 0
 3195 0000 08B5     		push	{r3, lr}
 3196              		.cfi_def_cfa_offset 8
 3197              		.cfi_offset 3, -8
 3198              		.cfi_offset 14, -4
 479:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_PROLOGUE();
 480:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 481:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     __can_serve_interrupt(&DRV_CAN2, CAN_IRQ_LINE1);
 3199              		.loc 1 481 5
 3200 0002 0121     		movs	r1, #1
 3201 0004 0248     		ldr	r0, .L195
 3202 0006 FFF7FEFF 		bl	__can_serve_interrupt
 482:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 483:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_EPILOGUE();
 484:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3203              		.loc 1 484 1
 3204 000a 00BF     		nop
 3205 000c 08BD     		pop	{r3, pc}
 3206              	.L196:
 3207 000e 00BF     		.align	2
 3208              	.L195:
 3209 0010 00000000 		.word	DRV_CAN2
 3210              		.cfi_endproc
 3211              	.LFE474:
 3213              		.section	.text.Vector1A4,"ax",%progbits
 3214              		.align	1
 3215              		.p2align 4,,15
 3216              		.global	Vector1A4
 3217              		.syntax unified
 3218              		.thumb
 3219              		.thumb_func
 3221              	Vector1A4:
 3222              	.LFB475:
 485:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 486:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 487:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   FDCAN2 interrupt handler for DMU.
 488:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 489:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @isr
 490:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 491:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQ_HANDLER(IRQ_CAN2_DMU_HANDLER)
 492:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** {
 3223              		.loc 1 492 1
 3224              		.cfi_startproc
 3225              		@ args = 0, pretend = 0, frame = 0
 3226              		@ frame_needed = 0, uses_anonymous_args = 0
 3227 0000 08B5     		push	{r3, lr}
 3228              		.cfi_def_cfa_offset 8
 3229              		.cfi_offset 3, -8
 3230              		.cfi_offset 14, -4
 493:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_PROLOGUE();
 494:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 495:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     __can_serve_dmu_interrupt(&DRV_CAN2);
 3231              		.loc 1 495 5
 3232 0002 0248     		ldr	r0, .L198
 3233 0004 FFF7FEFF 		bl	__can_serve_dmu_interrupt
 496:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 497:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_EPILOGUE();
 498:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3234              		.loc 1 498 1
 3235 0008 00BF     		nop
 3236 000a 08BD     		pop	{r3, pc}
 3237              	.L199:
 3238              		.align	2
 3239              	.L198:
 3240 000c 00000000 		.word	DRV_CAN2
 3241              		.cfi_endproc
 3242              	.LFE475:
 3244              		.section	.text.Vector1A8,"ax",%progbits
 3245              		.align	1
 3246              		.p2align 4,,15
 3247              		.global	Vector1A8
 3248              		.syntax unified
 3249              		.thumb
 3250              		.thumb_func
 3252              	Vector1A8:
 3253              	.LFB476:
 499:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 500:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 501:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   FDCAN3 interrupt handler for Line 0.
 502:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 503:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @isr
 504:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 505:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQ_HANDLER(IRQ_CAN3_LINE0_HANDLER)
 506:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** {
 3254              		.loc 1 506 1
 3255              		.cfi_startproc
 3256              		@ args = 0, pretend = 0, frame = 0
 3257              		@ frame_needed = 0, uses_anonymous_args = 0
 3258 0000 08B5     		push	{r3, lr}
 3259              		.cfi_def_cfa_offset 8
 3260              		.cfi_offset 3, -8
 3261              		.cfi_offset 14, -4
 507:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_PROLOGUE();
 508:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 509:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     __can_serve_interrupt(&DRV_CAN3, CAN_IRQ_LINE0);
 3262              		.loc 1 509 5
 3263 0002 0021     		movs	r1, #0
 3264 0004 0248     		ldr	r0, .L201
 3265 0006 FFF7FEFF 		bl	__can_serve_interrupt
 510:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 511:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_EPILOGUE();
 512:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3266              		.loc 1 512 1
 3267 000a 00BF     		nop
 3268 000c 08BD     		pop	{r3, pc}
 3269              	.L202:
 3270 000e 00BF     		.align	2
 3271              	.L201:
 3272 0010 00000000 		.word	DRV_CAN3
 3273              		.cfi_endproc
 3274              	.LFE476:
 3276              		.section	.text.Vector1AC,"ax",%progbits
 3277              		.align	1
 3278              		.p2align 4,,15
 3279              		.global	Vector1AC
 3280              		.syntax unified
 3281              		.thumb
 3282              		.thumb_func
 3284              	Vector1AC:
 3285              	.LFB477:
 513:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 514:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 515:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   FDCAN3 interrupt handler for Line 1.
 516:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 517:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @isr
 518:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 519:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQ_HANDLER(IRQ_CAN3_LINE1_HANDLER)
 520:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** {
 3286              		.loc 1 520 1
 3287              		.cfi_startproc
 3288              		@ args = 0, pretend = 0, frame = 0
 3289              		@ frame_needed = 0, uses_anonymous_args = 0
 3290 0000 08B5     		push	{r3, lr}
 3291              		.cfi_def_cfa_offset 8
 3292              		.cfi_offset 3, -8
 3293              		.cfi_offset 14, -4
 521:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_PROLOGUE();
 522:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 523:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     __can_serve_interrupt(&DRV_CAN3, CAN_IRQ_LINE1);
 3294              		.loc 1 523 5
 3295 0002 0121     		movs	r1, #1
 3296 0004 0248     		ldr	r0, .L204
 3297 0006 FFF7FEFF 		bl	__can_serve_interrupt
 524:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 525:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_EPILOGUE();
 526:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3298              		.loc 1 526 1
 3299 000a 00BF     		nop
 3300 000c 08BD     		pop	{r3, pc}
 3301              	.L205:
 3302 000e 00BF     		.align	2
 3303              	.L204:
 3304 0010 00000000 		.word	DRV_CAN3
 3305              		.cfi_endproc
 3306              	.LFE477:
 3308              		.section	.text.Vector1B0,"ax",%progbits
 3309              		.align	1
 3310              		.p2align 4,,15
 3311              		.global	Vector1B0
 3312              		.syntax unified
 3313              		.thumb
 3314              		.thumb_func
 3316              	Vector1B0:
 3317              	.LFB478:
 527:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 528:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 529:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   FDCAN3 interrupt handler for DMU.
 530:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 531:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @isr
 532:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 533:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQ_HANDLER(IRQ_CAN3_DMU_HANDLER)
 534:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** {
 3318              		.loc 1 534 1
 3319              		.cfi_startproc
 3320              		@ args = 0, pretend = 0, frame = 0
 3321              		@ frame_needed = 0, uses_anonymous_args = 0
 3322 0000 08B5     		push	{r3, lr}
 3323              		.cfi_def_cfa_offset 8
 3324              		.cfi_offset 3, -8
 3325              		.cfi_offset 14, -4
 535:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_PROLOGUE();
 536:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 537:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     __can_serve_dmu_interrupt(&DRV_CAN3);
 3326              		.loc 1 537 5
 3327 0002 0248     		ldr	r0, .L207
 3328 0004 FFF7FEFF 		bl	__can_serve_dmu_interrupt
 538:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 539:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_EPILOGUE();
 540:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3329              		.loc 1 540 1
 3330 0008 00BF     		nop
 3331 000a 08BD     		pop	{r3, pc}
 3332              	.L208:
 3333              		.align	2
 3334              	.L207:
 3335 000c 00000000 		.word	DRV_CAN3
 3336              		.cfi_endproc
 3337              	.LFE478:
 3339              		.section	.text.Vector1B4,"ax",%progbits
 3340              		.align	1
 3341              		.p2align 4,,15
 3342              		.global	Vector1B4
 3343              		.syntax unified
 3344              		.thumb
 3345              		.thumb_func
 3347              	Vector1B4:
 3348              	.LFB479:
 541:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 542:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 543:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   FDCAN4 interrupt handler for Line 0.
 544:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 545:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @isr
 546:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 547:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQ_HANDLER(IRQ_CAN4_LINE0_HANDLER)
 548:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** {
 3349              		.loc 1 548 1
 3350              		.cfi_startproc
 3351              		@ args = 0, pretend = 0, frame = 0
 3352              		@ frame_needed = 0, uses_anonymous_args = 0
 3353 0000 08B5     		push	{r3, lr}
 3354              		.cfi_def_cfa_offset 8
 3355              		.cfi_offset 3, -8
 3356              		.cfi_offset 14, -4
 549:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_PROLOGUE();
 550:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 551:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     __can_serve_interrupt(&DRV_CAN4, CAN_IRQ_LINE0);
 3357              		.loc 1 551 5
 3358 0002 0021     		movs	r1, #0
 3359 0004 0248     		ldr	r0, .L210
 3360 0006 FFF7FEFF 		bl	__can_serve_interrupt
 552:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 553:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_EPILOGUE();
 554:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3361              		.loc 1 554 1
 3362 000a 00BF     		nop
 3363 000c 08BD     		pop	{r3, pc}
 3364              	.L211:
 3365 000e 00BF     		.align	2
 3366              	.L210:
 3367 0010 00000000 		.word	DRV_CAN4
 3368              		.cfi_endproc
 3369              	.LFE479:
 3371              		.section	.text.Vector1B8,"ax",%progbits
 3372              		.align	1
 3373              		.p2align 4,,15
 3374              		.global	Vector1B8
 3375              		.syntax unified
 3376              		.thumb
 3377              		.thumb_func
 3379              	Vector1B8:
 3380              	.LFB480:
 555:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 556:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 557:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   FDCAN4 interrupt handler for Line 1.
 558:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 559:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @isr
 560:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 561:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQ_HANDLER(IRQ_CAN4_LINE1_HANDLER)
 562:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** {
 3381              		.loc 1 562 1
 3382              		.cfi_startproc
 3383              		@ args = 0, pretend = 0, frame = 0
 3384              		@ frame_needed = 0, uses_anonymous_args = 0
 3385 0000 08B5     		push	{r3, lr}
 3386              		.cfi_def_cfa_offset 8
 3387              		.cfi_offset 3, -8
 3388              		.cfi_offset 14, -4
 563:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_PROLOGUE();
 564:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 565:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     __can_serve_interrupt(&DRV_CAN4, CAN_IRQ_LINE1);
 3389              		.loc 1 565 5
 3390 0002 0121     		movs	r1, #1
 3391 0004 0248     		ldr	r0, .L213
 3392 0006 FFF7FEFF 		bl	__can_serve_interrupt
 566:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 567:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_EPILOGUE();
 568:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3393              		.loc 1 568 1
 3394 000a 00BF     		nop
 3395 000c 08BD     		pop	{r3, pc}
 3396              	.L214:
 3397 000e 00BF     		.align	2
 3398              	.L213:
 3399 0010 00000000 		.word	DRV_CAN4
 3400              		.cfi_endproc
 3401              	.LFE480:
 3403              		.section	.text.Vector1BC,"ax",%progbits
 3404              		.align	1
 3405              		.p2align 4,,15
 3406              		.global	Vector1BC
 3407              		.syntax unified
 3408              		.thumb
 3409              		.thumb_func
 3411              	Vector1BC:
 3412              	.LFB481:
 569:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 570:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** /**
 571:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @brief   FDCAN4 interrupt handler for DMU.
 572:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  *
 573:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  * @isr
 574:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****  */
 575:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** IRQ_HANDLER(IRQ_CAN4_DMU_HANDLER)
 576:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** {
 3413              		.loc 1 576 1
 3414              		.cfi_startproc
 3415              		@ args = 0, pretend = 0, frame = 0
 3416              		@ frame_needed = 0, uses_anonymous_args = 0
 3417 0000 08B5     		push	{r3, lr}
 3418              		.cfi_def_cfa_offset 8
 3419              		.cfi_offset 3, -8
 3420              		.cfi_offset 14, -4
 577:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_PROLOGUE();
 578:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 579:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     __can_serve_dmu_interrupt(&DRV_CAN4);
 3421              		.loc 1 579 5
 3422 0002 0248     		ldr	r0, .L216
 3423 0004 FFF7FEFF 		bl	__can_serve_dmu_interrupt
 580:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** 
 581:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c ****     IRQ_EPILOGUE();
 582:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/src/sr5e1\can_dev.c **** }
 3424              		.loc 1 582 1
 3425 0008 00BF     		nop
 3426 000a 08BD     		pop	{r3, pc}
 3427              	.L217:
 3428              		.align	2
 3429              	.L216:
 3430 000c 00000000 		.word	DRV_CAN4
 3431              		.cfi_endproc
 3432              	.LFE481:
 3434              		.text
 3435              	.Letext0:
 3436              		.file 3 "c:\\stellarstudio-7.0\\sdks\\tools-1.4.0\\toolchain\\arm\\mingw64_nt\\10.3-2021.10\\arm-n
 3437              		.file 4 "c:\\stellarstudio-7.0\\sdks\\tools-1.4.0\\toolchain\\arm\\mingw64_nt\\10.3-2021.10\\arm-n
 3438              		.file 5 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/include/can.h"
 3439              		.file 6 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/include/can_private
 3440              		.file 7 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/CAN/include/sr5e1/can_i
 3441              		.file 8 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/sr5e1xx.h"
 3442              		.file 9 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_DMA.
 3443              		.file 10 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_DMA
 3444              		.file 11 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_FDC
 3445              		.file 12 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_RCC
 3446              		.file 13 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/System/DMA/include/dma.h"
DEFINED SYMBOLS
                            *ABS*:00000000 can_dev.c
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:21     .bss.can_enabled:00000000 can_enabled
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:22     .bss.can_enabled:00000000 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:24     .text.can_dev_get_reg_ptr:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:31     .text.can_dev_get_reg_ptr:00000000 can_dev_get_reg_ptr
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:87     .text.can_dev_get_reg_ptr:0000003c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:98     .text.can_dev_get_clock:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:105    .text.can_dev_get_clock:00000000 can_dev_get_clock
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:126    .text.can_dev_get_clock:0000000c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:131    .text.can_dev_clock_enable:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:138    .text.can_dev_clock_enable:00000000 can_dev_clock_enable
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:467    .text.can_dev_clock_enable:000002b4 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:471    .text.can_dev_clock_enable:000002bc $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:964    .text.can_dev_clock_enable:000006a8 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:968    .text.can_dev_clock_enable:000006b0 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:1461   .text.can_dev_clock_enable:00000a9c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:1465   .text.can_dev_clock_enable:00000aa4 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:1953   .text.can_dev_clock_enable:00000e84 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:1956   .text.can_dev_clock_enable:00000e88 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2138   .text.can_dev_clock_enable:00000fc8 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2143   .text.can_dev_clock_disable:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2150   .text.can_dev_clock_disable:00000000 can_dev_clock_disable
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2448   .text.can_dev_clock_disable:000001fc $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2456   .text.can_dev_get_dma_tx_trigger:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2463   .text.can_dev_get_dma_tx_trigger:00000000 can_dev_get_dma_tx_trigger
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2518   .text.can_dev_get_dma_tx_trigger:0000003c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2525   .text.can_dev_get_dma_rx0_trigger:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2532   .text.can_dev_get_dma_rx0_trigger:00000000 can_dev_get_dma_rx0_trigger
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2587   .text.can_dev_get_dma_rx0_trigger:0000003c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2594   .text.can_dev_get_dma_rx1_trigger:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2601   .text.can_dev_get_dma_rx1_trigger:00000000 can_dev_get_dma_rx1_trigger
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2656   .text.can_dev_get_dma_rx1_trigger:0000003c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2663   .text.can_dev_get_line0_vector:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2670   .text.can_dev_get_line0_vector:00000000 can_dev_get_line0_vector
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2725   .text.can_dev_get_line0_vector:00000044 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2732   .text.can_dev_get_line1_vector:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2739   .text.can_dev_get_line1_vector:00000000 can_dev_get_line1_vector
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2794   .text.can_dev_get_line1_vector:00000044 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2801   .text.can_dev_get_dmu_vector:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2808   .text.can_dev_get_dmu_vector:00000000 can_dev_get_dmu_vector
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2863   .text.can_dev_get_dmu_vector:00000044 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2870   .text.can_dev_get_msg_ram_address:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2877   .text.can_dev_get_msg_ram_address:00000000 can_dev_get_msg_ram_address
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2898   .text.can_dev_get_msg_ram_address:0000000c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2903   .text.can_dev_get_msg_ram_size:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2910   .text.can_dev_get_msg_ram_size:00000000 can_dev_get_msg_ram_size
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2932   .text.can_dev_get_ram_start:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:2939   .text.can_dev_get_ram_start:00000000 can_dev_get_ram_start
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3013   .text.can_dev_get_ram_start:0000005c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3020   .text.can_dev_get_ram_size:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3027   .text.can_dev_get_ram_size:00000000 can_dev_get_ram_size
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3055   .text.Vector190:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3062   .text.Vector190:00000000 Vector190
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3082   .text.Vector190:00000010 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3087   .text.Vector194:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3094   .text.Vector194:00000000 Vector194
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3114   .text.Vector194:00000010 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3119   .text.Vector198:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3126   .text.Vector198:00000000 Vector198
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3145   .text.Vector198:0000000c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3150   .text.Vector19C:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3157   .text.Vector19C:00000000 Vector19C
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3177   .text.Vector19C:00000010 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3182   .text.Vector1A0:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3189   .text.Vector1A0:00000000 Vector1A0
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3209   .text.Vector1A0:00000010 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3214   .text.Vector1A4:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3221   .text.Vector1A4:00000000 Vector1A4
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3240   .text.Vector1A4:0000000c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3245   .text.Vector1A8:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3252   .text.Vector1A8:00000000 Vector1A8
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3272   .text.Vector1A8:00000010 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3277   .text.Vector1AC:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3284   .text.Vector1AC:00000000 Vector1AC
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3304   .text.Vector1AC:00000010 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3309   .text.Vector1B0:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3316   .text.Vector1B0:00000000 Vector1B0
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3335   .text.Vector1B0:0000000c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3340   .text.Vector1B4:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3347   .text.Vector1B4:00000000 Vector1B4
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3367   .text.Vector1B4:00000010 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3372   .text.Vector1B8:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3379   .text.Vector1B8:00000000 Vector1B8
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3399   .text.Vector1B8:00000010 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3404   .text.Vector1BC:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3411   .text.Vector1BC:00000000 Vector1BC
C:\Users\EVERYO~1\AppData\Local\Temp\ccgOYWzH.s:3430   .text.Vector1BC:0000000c $d
                           .group:00000000 wm4.0.1ea29c7543256e0887205fa7f8c557c8
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.typedefs.h.36.07fe3956b4e751037cfee70edcd0b397
                           .group:00000000 wm4.can.h.37.6901a551e1b2006127df96b1feba9cd8
                           .group:00000000 wm4.dmamux.h.25.337aea179f6dbcc87c52aae26d38f76e
                           .group:00000000 wm4.clock_cfg.h.24.0aed3cee9ecce947225a304181294191
                           .group:00000000 wm4.sr5e1xx.h.22.e5c808533cc52ed19fb0830cd7d98924
                           .group:00000000 wm4.cmsis_version.h.32.0f826810625204eca22a19868bdc7586
                           .group:00000000 wm4.core_cm7.h.66.8ab2de36917d6fcae18019067fda13e0
                           .group:00000000 wm4.cmsis_gcc.h.26.498d0ad17a45fc9ef20fdc01caf02259
                           .group:00000000 wm4.core_cm7.h.174.43edb295ecdaadad738f48ba6011ffad
                           .group:00000000 wm4.mpu_armv7.h.32.83326921a797fa9d6f70449916b4b839
                           .group:00000000 wm4.cachel1_armv7.h.32.abd77761a989e008b0c60891114a33c7
                           .group:00000000 wm4.SR5E1_ADC.h.14.21608e6aff125ba995dd767d6d8dc311
                           .group:00000000 wm4.SR5E1_CEM.h.14.01fe5742c8f1ae35b1f3af05932f702e
                           .group:00000000 wm4.SR5E1_CMU.h.14.2617b38b159abe38028862394531e06d
                           .group:00000000 wm4.SR5E1_COMP.h.14.4b6fdfe4f5f7fd9bedf3a99b98bdf4cd
                           .group:00000000 wm4.SR5E1_CORDIC.h.14.354fbf7c9eaf6963d38eaa25cf28ffe8
                           .group:00000000 wm4.SR5E1_CRC.h.14.c64d0f7767671ddb92e9ead0a1162100
                           .group:00000000 wm4.SR5E1_DAC.h.14.8c26a0ff04b0cfeb55306cc3f22187b8
                           .group:00000000 wm4.SR5E1_DBGMCU.h.14.427df893d53a8044654f017ba01c25ed
                           .group:00000000 wm4.SR5E1_DMA.h.14.a7f9a92f844b40a86965798c2e64240b
                           .group:00000000 wm4.SR5E1_DMAMUX.h.14.471b3b4dfd4d41515f1df49493698866
                           .group:00000000 wm4.SR5E1_EXTI.h.14.a325ea3fe89cd84894660551c33241ea
                           .group:00000000 wm4.SR5E1_FCCU.h.14.0ebf0f0f36e079d28613ad2c80e17e23
                           .group:00000000 wm4.SR5E1_FDCAN.h.14.ac57101fad5dbc798bfb93f34c899de7
                           .group:00000000 wm4.SR5E1_FLASH_REG_ITF.h.14.d23d1d44923f9b20b8c8fdb51d66aefd
                           .group:00000000 wm4.SR5E1_GPIO.h.14.1c84071e130d7c64b62470ab0e18a1f1
                           .group:00000000 wm4.SR5E1_HRTIM.h.24.03932387d2522e6bd5c772a4edaf2f5d
                           .group:00000000 wm4.SR5E1_HSEM.h.14.cbe70eee519f01b16452c3f8c99d8df1
                           .group:00000000 wm4.SR5E1_I2C.h.14.350ba3e0f4fd57828457efa80135c36c
                           .group:00000000 wm4.SR5E1_IMA.h.14.62b7088985ab2b7ce9b030a02daa1f7d
                           .group:00000000 wm4.SR5E1_IWDG.h.14.20b7c5f05cf7ae94464c360d7af3660d
                           .group:00000000 wm4.SR5E1_MEMU.h.14.04bad7ae4c52ce334a4fc900aad2ae5b
                           .group:00000000 wm4.SR5E1_NVM_CTRL.h.14.5f442617f0628d4f16258f211c614ef9
                           .group:00000000 wm4.SR5E1_PLLDIG.h.14.bd87a8e6917eee17dae2f312c8e5fa53
                           .group:00000000 wm4.SR5E1_PMC_DIG.h.14.54173b566c6656344766ec4ef46c9281
                           .group:00000000 wm4.SR5E1_RCC.h.14.56734803c71534de286e793a53649740
                           .group:00000000 wm4.SR5E1_RTC.h.14.47037cbc7d8175dbf2be1dc0bb955e3f
                           .group:00000000 wm4.SR5E1_SD_ADC.h.14.552b97d0b8f3c1fd4df6d8964b2f1a80
                           .group:00000000 wm4.SR5E1_SMPU.h.14.8ce5bb6d5d7c579cd725f492f46e9085
                           .group:00000000 wm4.SR5E1_SPI.h.14.42d52112e540f85ade4d9135f8b87d72
                           .group:00000000 wm4.SR5E1_SSCM.h.14.8e6a2ad0ce5fca422fc3d69939b6125b
                           .group:00000000 wm4.SR5E1_SYSCFG.h.14.02b969490118ce4069914b5e94f7ca65
                           .group:00000000 wm4.SR5E1_TDM.h.14.a40ed7928cad243a57fd233fccf01ad2
                           .group:00000000 wm4.SR5E1_TIM.h.14.f17572f4c16f3f152b8164ad25c34f5b
                           .group:00000000 wm4.SR5E1_UART.h.14.eec3ab82b02b3bdb3de500483675b83f
                           .group:00000000 wm4.SR5E1_WWDG.h.14.59b45efc70e442cc6ef03702aad4ad88
                           .group:00000000 wm4.irq_numbers.h.38.6294b95aed1bf7b3a2cda0eed8ce8f57
                           .group:00000000 wm4.regs.h.23.2ac145b4f57126d16daed5fbd86d99c6
                           .group:00000000 wm4.clock.h.37.80236c5607fdd9eb9275e5111a4191c3
                           .group:00000000 wm4.irq.h.37.78714f25754c8b09d1428599101f6cc7
                           .group:00000000 wm4.dma.h.40.f77dd217a06ceba13a3cfdd4102a73c1

UNDEFINED SYMBOLS
DRV_CAN1
DRV_CAN2
DRV_CAN3
__can_serve_interrupt
__can_serve_dmu_interrupt
DRV_CAN4
