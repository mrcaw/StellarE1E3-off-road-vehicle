   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"spi_dev.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.spi_dev_get_reg_ptr,"ax",%progbits
  19              		.align	1
  20              		.p2align 4,,15
  21              		.global	spi_dev_get_reg_ptr
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	spi_dev_get_reg_ptr:
  27              	.LFB481:
  28              		.file 1 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1/spi_dev.c
   1:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /****************************************************************************
   2:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
   3:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * Copyright (c) 2022 STMicroelectronics - All Rights Reserved
   4:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
   5:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * License terms: STMicroelectronics Proprietary in accordance with licensing
   6:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * terms SLA0098 at www.st.com.
   7:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
   8:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * THIS SOFTWARE IS DISTRIBUTED "AS IS," AND ALL WARRANTIES ARE DISCLAIMED,
   9:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * INCLUDING MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  10:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
  11:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *****************************************************************************/
  12:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /**
  13:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @file    spi_dev.c
  14:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @brief   SPI specific device source file.
  15:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
  16:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @addtogroup DRIVERS
  17:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @addtogroup COMMS
  18:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @ingroup DRIVERS
  19:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @addtogroup SPI
  20:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @ingroup COMMS
  21:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @{
  22:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  */
  23:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  24:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** #include <spi.h>
  25:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** #include <spi_private.h>
  26:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** #include <dma.h>
  27:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** #include <clock.h>
  28:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** #include <irq.h>
  29:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** #include <platform.h>
  30:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  31:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  32:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /* Module local definitions.                                                 */
  33:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  34:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  35:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  36:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /* Module exported variables.                                                */
  37:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  38:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  39:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  40:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /* Module local types.                                                       */
  41:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  42:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  43:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  44:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /* Module local variables.                                                   */
  45:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  46:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  47:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  48:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /* Local function prototypes                                                 */
  49:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  50:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  51:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  52:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /* Module local functions.                                                   */
  53:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  54:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  55:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  56:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /* Module exported functions.                                                */
  57:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /*===========================================================================*/
  58:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  59:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /**
  60:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @brief   Returns pointer to the SPI register block.
  61:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
  62:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @param[in] sdp       pointer to a @p spi_driver_t structure
  63:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @return              pointer to the SPI register block.
  64:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
  65:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @notapi
  66:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  */
  67:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** SPI_TypeDef *spi_dev_get_reg_ptr(spi_driver_t *sdp) {
  29              		.loc 1 67 53
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 84B0     		sub	sp, sp, #16
  35              		.cfi_def_cfa_offset 16
  36 0002 0190     		str	r0, [sp, #4]
  68:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  69:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     SPI_TypeDef *spi;
  70:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  71:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     if (sdp == &DRV_SPI1) {
  37              		.loc 1 71 8
  38 0004 019B     		ldr	r3, [sp, #4]
  39 0006 0D4A     		ldr	r2, .L7
  40 0008 9342     		cmp	r3, r2
  41 000a 02D1     		bne	.L2
  72:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         spi = SPI1;
  42              		.loc 1 72 13
  43 000c 0C4B     		ldr	r3, .L7+4
  44 000e 0393     		str	r3, [sp, #12]
  45 0010 0FE0     		b	.L3
  46              	.L2:
  73:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI2) {
  47              		.loc 1 73 15
  48 0012 019B     		ldr	r3, [sp, #4]
  49 0014 0B4A     		ldr	r2, .L7+8
  50 0016 9342     		cmp	r3, r2
  51 0018 02D1     		bne	.L4
  74:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         spi = SPI2;
  52              		.loc 1 74 13
  53 001a 0B4B     		ldr	r3, .L7+12
  54 001c 0393     		str	r3, [sp, #12]
  55 001e 08E0     		b	.L3
  56              	.L4:
  75:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI3) {
  57              		.loc 1 75 15
  58 0020 019B     		ldr	r3, [sp, #4]
  59 0022 0A4A     		ldr	r2, .L7+16
  60 0024 9342     		cmp	r3, r2
  61 0026 02D1     		bne	.L5
  76:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         spi = SPI3;
  62              		.loc 1 76 13
  63 0028 094B     		ldr	r3, .L7+20
  64 002a 0393     		str	r3, [sp, #12]
  65 002c 01E0     		b	.L3
  66              	.L5:
  77:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else {
  78:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         spi = SPI4;
  67              		.loc 1 78 13
  68 002e 094B     		ldr	r3, .L7+24
  69 0030 0393     		str	r3, [sp, #12]
  70              	.L3:
  79:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     }
  80:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  81:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     return spi;
  71              		.loc 1 81 12
  72 0032 039B     		ldr	r3, [sp, #12]
  82:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** }
  73              		.loc 1 82 1
  74 0034 1846     		mov	r0, r3
  75 0036 04B0     		add	sp, sp, #16
  76              		.cfi_def_cfa_offset 0
  77              		@ sp needed
  78 0038 7047     		bx	lr
  79              	.L8:
  80 003a 00BF     		.align	2
  81              	.L7:
  82 003c 00000000 		.word	DRV_SPI1
  83 0040 005C0042 		.word	1107319808
  84 0044 00000000 		.word	DRV_SPI2
  85 0048 005C0040 		.word	1073765376
  86 004c 00000000 		.word	DRV_SPI3
  87 0050 00600040 		.word	1073766400
  88 0054 00600042 		.word	1107320832
  89              		.cfi_endproc
  90              	.LFE481:
  92              		.section	.text.spi_dev_get_clock,"ax",%progbits
  93              		.align	1
  94              		.p2align 4,,15
  95              		.global	spi_dev_get_clock
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
 100              	spi_dev_get_clock:
 101              	.LFB482:
  83:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  84:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /**
  85:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @brief   Returns value of SPI clock.
  86:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
  87:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @param[in] sdp       pointer to a @p spi_driver_t structure
  88:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @return              SPI clock.
  89:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
  90:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @notapi
  91:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  */
  92:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** uint32_t spi_dev_get_clock(spi_driver_t *sdp) {
 102              		.loc 1 92 47
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 16
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
 107 0000 84B0     		sub	sp, sp, #16
 108              		.cfi_def_cfa_offset 16
 109 0002 0190     		str	r0, [sp, #4]
  93:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  94:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     uint32_t clock;
  95:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
  96:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     if (sdp == &DRV_SPI1) {
 110              		.loc 1 96 8
 111 0004 019B     		ldr	r3, [sp, #4]
 112 0006 0D4A     		ldr	r2, .L15
 113 0008 9342     		cmp	r3, r2
 114 000a 02D1     		bne	.L10
  97:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         clock = CLOCK_SPI1CLK;
 115              		.loc 1 97 15
 116 000c 0C4B     		ldr	r3, .L15+4
 117 000e 0393     		str	r3, [sp, #12]
 118 0010 0FE0     		b	.L11
 119              	.L10:
  98:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI2) {
 120              		.loc 1 98 15
 121 0012 019B     		ldr	r3, [sp, #4]
 122 0014 0B4A     		ldr	r2, .L15+8
 123 0016 9342     		cmp	r3, r2
 124 0018 02D1     		bne	.L12
  99:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         clock = CLOCK_SPI2CLK;
 125              		.loc 1 99 15
 126 001a 0B4B     		ldr	r3, .L15+12
 127 001c 0393     		str	r3, [sp, #12]
 128 001e 08E0     		b	.L11
 129              	.L12:
 100:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI3) {
 130              		.loc 1 100 15
 131 0020 019B     		ldr	r3, [sp, #4]
 132 0022 0A4A     		ldr	r2, .L15+16
 133 0024 9342     		cmp	r3, r2
 134 0026 02D1     		bne	.L13
 101:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         clock = CLOCK_SPI3CLK;
 135              		.loc 1 101 15
 136 0028 074B     		ldr	r3, .L15+12
 137 002a 0393     		str	r3, [sp, #12]
 138 002c 01E0     		b	.L11
 139              	.L13:
 102:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else {
 103:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         clock = CLOCK_SPI4CLK;
 140              		.loc 1 103 15
 141 002e 044B     		ldr	r3, .L15+4
 142 0030 0393     		str	r3, [sp, #12]
 143              	.L11:
 104:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     }
 105:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 106:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     return clock;
 144              		.loc 1 106 12
 145 0032 039B     		ldr	r3, [sp, #12]
 107:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** }
 146              		.loc 1 107 1
 147 0034 1846     		mov	r0, r3
 148 0036 04B0     		add	sp, sp, #16
 149              		.cfi_def_cfa_offset 0
 150              		@ sp needed
 151 0038 7047     		bx	lr
 152              	.L16:
 153 003a 00BF     		.align	2
 154              	.L15:
 155 003c 00000000 		.word	DRV_SPI1
 156 0040 80D1F008 		.word	150000000
 157 0044 00000000 		.word	DRV_SPI2
 158 0048 C0687804 		.word	75000000
 159 004c 00000000 		.word	DRV_SPI3
 160              		.cfi_endproc
 161              	.LFE482:
 163              		.section	.text.spi_dev_clock_enable,"ax",%progbits
 164              		.align	1
 165              		.p2align 4,,15
 166              		.global	spi_dev_clock_enable
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 171              	spi_dev_clock_enable:
 172              	.LFB483:
 108:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 109:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /**
 110:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @brief   Enables SPI clock.
 111:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 112:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @param[in] sdp       pointer to a @p spi_driver_t structure
 113:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 114:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @notapi
 115:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  */
 116:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** void spi_dev_clock_enable(spi_driver_t *sdp) {
 173              		.loc 1 116 46
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 40
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              		@ link register save eliminated.
 178 0000 8AB0     		sub	sp, sp, #40
 179              		.cfi_def_cfa_offset 40
 180 0002 0190     		str	r0, [sp, #4]
 117:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 118:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     if (sdp == &DRV_SPI1) {
 181              		.loc 1 118 8
 182 0004 019B     		ldr	r3, [sp, #4]
 183 0006 974A     		ldr	r2, .L34
 184 0008 9342     		cmp	r3, r2
 185 000a 47D1     		bne	.L18
 186 000c 0123     		movs	r3, #1
 187 000e 8DF82730 		strb	r3, [sp, #39]
 188 0012 9DF82730 		ldrb	r3, [sp, #39]
 189 0016 8DF82630 		strb	r3, [sp, #38]
 190 001a 4FF40003 		mov	r3, #8388608
 191 001e 0893     		str	r3, [sp, #32]
 192              	.LBB50:
 193              	.LBB51:
 194              	.LBB52:
 195              	.LBB53:
 196              		.file 2 "src-gen/sr5e1/clock.h"
   1:src-gen/sr5e1/clock.h **** /****************************************************************************
   2:src-gen/sr5e1/clock.h ****  *
   3:src-gen/sr5e1/clock.h ****  * Copyright (c) 2022 STMicroelectronics - All Rights Reserved
   4:src-gen/sr5e1/clock.h ****  *
   5:src-gen/sr5e1/clock.h ****  * License terms: STMicroelectronics Proprietary in accordance with licensing
   6:src-gen/sr5e1/clock.h ****  * terms SLA0098 at www.st.com.
   7:src-gen/sr5e1/clock.h ****  *
   8:src-gen/sr5e1/clock.h ****  * THIS SOFTWARE IS DISTRIBUTED "AS IS," AND ALL WARRANTIES ARE DISCLAIMED,
   9:src-gen/sr5e1/clock.h ****  * INCLUDING MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  10:src-gen/sr5e1/clock.h ****  *
  11:src-gen/sr5e1/clock.h ****  *****************************************************************************/
  12:src-gen/sr5e1/clock.h **** /**
  13:src-gen/sr5e1/clock.h ****  * @file    clock.h
  14:src-gen/sr5e1/clock.h ****  * @brief   SR5E1 clock subsystem header file.
  15:src-gen/sr5e1/clock.h ****  *
  16:src-gen/sr5e1/clock.h ****  * @addtogroup PLATFORM
  17:src-gen/sr5e1/clock.h ****  * @addtogroup CLOCK
  18:src-gen/sr5e1/clock.h ****  * @ingroup PLATFORM
  19:src-gen/sr5e1/clock.h ****  * @{
  20:src-gen/sr5e1/clock.h ****  */
  21:src-gen/sr5e1/clock.h **** 
  22:src-gen/sr5e1/clock.h **** #ifndef _CLOCK_H_
  23:src-gen/sr5e1/clock.h **** #define _CLOCK_H_
  24:src-gen/sr5e1/clock.h **** 
  25:src-gen/sr5e1/clock.h **** #include <clock_cfg.h>
  26:src-gen/sr5e1/clock.h **** #include <platform.h>
  27:src-gen/sr5e1/clock.h **** #include <typedefs.h>
  28:src-gen/sr5e1/clock.h **** 
  29:src-gen/sr5e1/clock.h **** /*===========================================================================*/
  30:src-gen/sr5e1/clock.h **** /* Module constants.                                                         */
  31:src-gen/sr5e1/clock.h **** /*===========================================================================*/
  32:src-gen/sr5e1/clock.h **** 
  33:src-gen/sr5e1/clock.h **** /**
  34:src-gen/sr5e1/clock.h ****  * @name    RCC CFGR register
  35:src-gen/sr5e1/clock.h ****  * @{
  36:src-gen/sr5e1/clock.h ****  */
  37:src-gen/sr5e1/clock.h **** #define CLOCK_SW_MASK               (3UL << 0U)
  38:src-gen/sr5e1/clock.h **** #define CLOCK_SW_IRCOSC             (4UL << 0U) /* Internal 16 MHz   */
  39:src-gen/sr5e1/clock.h **** #define CLOCK_SW_XOSC               (5UL << 0U) /* External 4-40 MHz */
  40:src-gen/sr5e1/clock.h **** #define CLOCK_SW_PLL0PHI            (6UL << 0U)
  41:src-gen/sr5e1/clock.h **** #define CLOCK_SW_PLL1PHI            (7UL << 0U)
  42:src-gen/sr5e1/clock.h **** 
  43:src-gen/sr5e1/clock.h **** #define CLOCK_SYSPRE_MASK           (511UL << 8U)
  44:src-gen/sr5e1/clock.h **** #define CLOCK_SYSPRE_FIELD(n)       (((uint32_t)(n)) << 8U)
  45:src-gen/sr5e1/clock.h **** 
  46:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_MASK           (15UL << 20U)
  47:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_NOCLOCK        (0UL << 20U)
  48:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_LSI            (8UL << 20U)
  49:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_IRCOSC         (9UL << 20U)
  50:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_XOSC           (10UL << 20U)
  51:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_PLL0PHI        (11UL << 20U)
  52:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_PLL1PHI        (12UL << 20U)
  53:src-gen/sr5e1/clock.h **** 
  54:src-gen/sr5e1/clock.h **** #define CLOCK_MCOPRE_MASK           (63UL << 24U)
  55:src-gen/sr5e1/clock.h **** #define CLOCK_MCOPRE_FIELD(n)       (((uint32_t)(n)) << 24U)
  56:src-gen/sr5e1/clock.h **** /** @} */
  57:src-gen/sr5e1/clock.h **** 
  58:src-gen/sr5e1/clock.h **** /**
  59:src-gen/sr5e1/clock.h ****  * @name    RCC PLLCFGR register
  60:src-gen/sr5e1/clock.h ****  * @{
  61:src-gen/sr5e1/clock.h ****  */
  62:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_MASK          (3UL << 0U)
  63:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_NOCLOCK       (0UL << 0U)
  64:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_IRCOSC        (2UL << 0U)
  65:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_XOSC          (3UL << 0U)
  66:src-gen/sr5e1/clock.h **** 
  67:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_MASK          (3UL << 8U)
  68:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_NOCLOCK       (0UL << 8U)
  69:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_PLL0PHI1      (2UL << 8U)
  70:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_XOSC          (3UL << 8U)
  71:src-gen/sr5e1/clock.h **** /** @} */
  72:src-gen/sr5e1/clock.h **** 
  73:src-gen/sr5e1/clock.h **** /**
  74:src-gen/sr5e1/clock.h ****  * @name    RCC CCIPR1 register
  75:src-gen/sr5e1/clock.h ****  * @{
  76:src-gen/sr5e1/clock.h ****  */
  77:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_MASK          (7UL << 0U)
  78:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_NOCLOCK       (0UL << 0U)
  79:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_IRCOSC        (4UL << 0U)
  80:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_XOSC          (5UL << 0U)
  81:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_PLL0PHI       (6UL << 0U)
  82:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_LSI           (7UL << 0U)
  83:src-gen/sr5e1/clock.h **** 
  84:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_MASK           (7UL << 4U)
  85:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_NOCLOCK        (0UL << 4U)
  86:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_IRCOSC         (4UL << 4U)
  87:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_XOSC           (5UL << 4U)
  88:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_PLL0PHI        (6UL << 4U)
  89:src-gen/sr5e1/clock.h **** 
  90:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_MASK           (7UL << 8U)
  91:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_NOCLOCK        (0UL << 8U)
  92:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_IRCOSC         (4UL << 8U)
  93:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_XOSC           (5UL << 8U)
  94:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_PLL0PHI        (6UL << 8U)
  95:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_I2S_CKIN       (7UL << 8U)
  96:src-gen/sr5e1/clock.h **** 
  97:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_MASK         (7UL << 12U)
  98:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_NOCLOCK      (0UL << 12U)
  99:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_XOSC         (4UL << 12U)
 100:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_PLL0PHI      (5UL << 12U)
 101:src-gen/sr5e1/clock.h **** 
 102:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_MASK           (7UL << 16U)
 103:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_NOCLOCK        (0UL << 16U)
 104:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_XOSC           (4UL << 16U)
 105:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_PLL0PHI        (5UL << 16U)
 106:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_PLL1PHI        (6UL << 16U)
 107:src-gen/sr5e1/clock.h **** 
 108:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_MASK         (7UL << 20U)
 109:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_NOCLOCK      (0UL << 20U)
 110:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_XOSC         (4UL << 20U)
 111:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_PLL0PHI      (5UL << 20U)
 112:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_PLL1PHI      (6UL << 20U)
 113:src-gen/sr5e1/clock.h **** /** @} */
 114:src-gen/sr5e1/clock.h **** 
 115:src-gen/sr5e1/clock.h **** /**
 116:src-gen/sr5e1/clock.h ****  * @name    RCC CCIPR2 register
 117:src-gen/sr5e1/clock.h ****  * @{
 118:src-gen/sr5e1/clock.h ****  */
 119:src-gen/sr5e1/clock.h **** #define CLOCK_UARTPRE_MASK          (31U << 0U)
 120:src-gen/sr5e1/clock.h **** #define CLOCK_UARTPRE_FIELD(n)      (((uint32_t)(n)) << 0U)
 121:src-gen/sr5e1/clock.h **** 
 122:src-gen/sr5e1/clock.h **** #define CLOCK_I2CPRE_MASK           (31U << 5U)
 123:src-gen/sr5e1/clock.h **** #define CLOCK_I2CPRE_FIELD(n)       (((uint32_t)(n)) << 5U)
 124:src-gen/sr5e1/clock.h **** 
 125:src-gen/sr5e1/clock.h **** #define CLOCK_SPIPRE_MASK           (31U << 10U)
 126:src-gen/sr5e1/clock.h **** #define CLOCK_SPIPRE_FIELD(n)       (((uint32_t)(n)) << 10U)
 127:src-gen/sr5e1/clock.h **** 
 128:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANPRE_MASK         (31U << 15U)
 129:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANPRE_FIELD(n)     (((uint32_t)(n)) << 15U)
 130:src-gen/sr5e1/clock.h **** 
 131:src-gen/sr5e1/clock.h **** #define CLOCK_ADCPRE_MASK           (63U << 20U)
 132:src-gen/sr5e1/clock.h **** #define CLOCK_ADCPRE_FIELD(n)       (((uint32_t)(n)) << 20U)
 133:src-gen/sr5e1/clock.h **** 
 134:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCPRE_MASK         (63U << 26U)
 135:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCPRE_FIELD(n)     (((uint32_t)(n)) << 26U)
 136:src-gen/sr5e1/clock.h **** /** @} */
 137:src-gen/sr5e1/clock.h **** 
 138:src-gen/sr5e1/clock.h **** /**
 139:src-gen/sr5e1/clock.h ****  * @name    RCC LSCFGR register
 140:src-gen/sr5e1/clock.h ****  * @{
 141:src-gen/sr5e1/clock.h ****  */
 142:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_MASK           (3UL << 9U)
 143:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_NOCLOCK        (0UL << 9U)
 144:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_LSI            (2UL << 9U)  /* LSI after LSIPRE prescaler division */
 145:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_XOSC           (3UL << 9U)  /* XOSC divided by 32 */
 146:src-gen/sr5e1/clock.h **** 
 147:src-gen/sr5e1/clock.h **** #define CLOCK_LSIPRE_MASK           (31UL << 0U)
 148:src-gen/sr5e1/clock.h **** #define CLOCK_LSIPRE_FIELD(n)       (((uint32_t)(n)) << 0U)
 149:src-gen/sr5e1/clock.h **** /** @} */
 150:src-gen/sr5e1/clock.h **** 
 151:src-gen/sr5e1/clock.h **** /**
 152:src-gen/sr5e1/clock.h ****  * @name    PLLDIG PLL0DV register
 153:src-gen/sr5e1/clock.h ****  * @{
 154:src-gen/sr5e1/clock.h ****  */
 155:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0MFD_MASK          (127UL << 0U)
 156:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0MFD_FIELD(n)      (((uint32_t)(n)) << 0U)
 157:src-gen/sr5e1/clock.h **** 
 158:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PREDIV_MASK       (7UL << 12U)
 159:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PREDIV_FIELD(n)   (((uint32_t)(n)) << 12U)
 160:src-gen/sr5e1/clock.h **** 
 161:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI_MASK       (63UL << 16U)
 162:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI_FIELD(n)   (((uint32_t)(n)) << 16U)
 163:src-gen/sr5e1/clock.h **** 
 164:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI1_MASK      (15UL << 27U)
 165:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI1_FIELD(n)  (((uint32_t)(n)) << 27U)
 166:src-gen/sr5e1/clock.h **** /** @} */
 167:src-gen/sr5e1/clock.h **** 
 168:src-gen/sr5e1/clock.h **** /**
 169:src-gen/sr5e1/clock.h ****  * @name    PLLDIG PLL1DV register
 170:src-gen/sr5e1/clock.h ****  * @{
 171:src-gen/sr5e1/clock.h ****  */
 172:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1MFD_MASK          (127UL << 0U)
 173:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1MFD_FIELD(n)      (((uint32_t)(n)) << 0U)
 174:src-gen/sr5e1/clock.h **** 
 175:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1RFDPHI_MASK       (63U << 16U)
 176:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1RFDPHI_FIELD(n)   (((uint32_t)(n)) << 16U)
 177:src-gen/sr5e1/clock.h **** /** @} */
 178:src-gen/sr5e1/clock.h **** 
 179:src-gen/sr5e1/clock.h **** /**
 180:src-gen/sr5e1/clock.h ****  * @name    NVMPC PFCR1 register
 181:src-gen/sr5e1/clock.h ****  * @{
 182:src-gen/sr5e1/clock.h ****  */
 183:src-gen/sr5e1/clock.h **** 
 184:src-gen/sr5e1/clock.h **** #define CLOCK_NVMCCBFEN_MASK        (1UL << 0U)
 185:src-gen/sr5e1/clock.h **** #define CLOCK_NVMCCBFEN_FIELD(n)    (((uint32_t)(n)) << 0U)
 186:src-gen/sr5e1/clock.h **** 
 187:src-gen/sr5e1/clock.h **** #define CLOCK_NVMDCBFEN_MASK        (1UL << 1U)
 188:src-gen/sr5e1/clock.h **** #define CLOCK_NVMDCBFEN_FIELD(n)    ((n) << 1U)
 189:src-gen/sr5e1/clock.h **** 
 190:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_MASK          (1FUL << 8U)
 191:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_FIELD(n)      (((uint32_t)(n)) << 8U)
 192:src-gen/sr5e1/clock.h **** 
 193:src-gen/sr5e1/clock.h **** #define CLOCK_NVMAPC_MASK           (7UL << 13U)
 194:src-gen/sr5e1/clock.h **** #define CLOCK_NVMAPC_FIELD(n)       (((uint32_t)(n)) << 13U)
 195:src-gen/sr5e1/clock.h **** /** @} */
 196:src-gen/sr5e1/clock.h **** 
 197:src-gen/sr5e1/clock.h **** /**
 198:src-gen/sr5e1/clock.h ****  * @name    Internal oscillators
 199:src-gen/sr5e1/clock.h ****  * @{
 200:src-gen/sr5e1/clock.h ****  */
 201:src-gen/sr5e1/clock.h **** #define CLOCK_IRCOSCCLK             16000000UL
 202:src-gen/sr5e1/clock.h **** #define CLOCK_LSICLK                1000000UL
 203:src-gen/sr5e1/clock.h **** /** @} */
 204:src-gen/sr5e1/clock.h **** 
 205:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 206:src-gen/sr5e1/clock.h **** /* Module pre-compile time settings.                                         */
 207:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 208:src-gen/sr5e1/clock.h **** 
 209:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 210:src-gen/sr5e1/clock.h **** /* Derived constants and error checks.                                       */
 211:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 212:src-gen/sr5e1/clock.h **** 
 213:src-gen/sr5e1/clock.h **** /* Configuration file checks.*/
 214:src-gen/sr5e1/clock.h **** #if !defined(SR5E1xxx_CLOCKCONF)
 215:src-gen/sr5e1/clock.h **** #error "SR5E1xxx_CLOCKCONF not defined in clock_cfg.h"
 216:src-gen/sr5e1/clock.h **** #endif
 217:src-gen/sr5e1/clock.h **** 
 218:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SMP_MODE) || defined(__DOXYGEN__)
 219:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SMP_MODE not defined in clock_cfg.h"
 220:src-gen/sr5e1/clock.h **** #endif
 221:src-gen/sr5e1/clock.h **** 
 222:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_XOSC_ENABLED) || defined(__DOXYGEN__)
 223:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSC_ENABLED not defined in clock_cfg.h"
 224:src-gen/sr5e1/clock.h **** #endif
 225:src-gen/sr5e1/clock.h **** 
 226:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_LSI_ENABLED) || defined(__DOXYGEN__)
 227:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_LSI_ENABLED not defined in clock_cfg.h"
 228:src-gen/sr5e1/clock.h **** #endif
 229:src-gen/sr5e1/clock.h **** 
 230:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_XOSCCLK)
 231:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSCCLK not defined in clock_cfg.h"
 232:src-gen/sr5e1/clock.h **** #endif
 233:src-gen/sr5e1/clock.h **** 
 234:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_XOSC_BYPASS)
 235:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSC_BYPASS not defined in clock_cfg.h"
 236:src-gen/sr5e1/clock.h **** #endif
 237:src-gen/sr5e1/clock.h **** 
 238:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0SRC) || defined(__DOXYGEN__)
 239:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0SRC not defined in clock_cfg.h"
 240:src-gen/sr5e1/clock.h **** #endif
 241:src-gen/sr5e1/clock.h **** 
 242:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0MFD_VALUE) || defined(__DOXYGEN__)
 243:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0MFD_VALUE not defined in clock_cfg.h"
 244:src-gen/sr5e1/clock.h **** #endif
 245:src-gen/sr5e1/clock.h **** 
 246:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0PREDIV_VALUE) || defined(__DOXYGEN__)
 247:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0PREDIV_VALUE not defined in clock_cfg.h"
 248:src-gen/sr5e1/clock.h **** #endif
 249:src-gen/sr5e1/clock.h **** 
 250:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0RFDPHI_VALUE) || defined(__DOXYGEN__)
 251:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0RFDPHI_VALUE not defined in clock_cfg.h"
 252:src-gen/sr5e1/clock.h **** #endif
 253:src-gen/sr5e1/clock.h **** 
 254:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0RFDPHI1_VALUE) || defined(__DOXYGEN__)
 255:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0RFDPHI1_VALUE not defined in clock_cfg.h"
 256:src-gen/sr5e1/clock.h **** #endif
 257:src-gen/sr5e1/clock.h **** 
 258:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL1SRC) || defined(__DOXYGEN__)
 259:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL1SRC not defined in clock_cfg.h"
 260:src-gen/sr5e1/clock.h **** #endif
 261:src-gen/sr5e1/clock.h **** 
 262:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL1MFD_VALUE) || defined(__DOXYGEN__)
 263:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL1MFD_VALUE not defined in clock_cfg.h"
 264:src-gen/sr5e1/clock.h **** #endif
 265:src-gen/sr5e1/clock.h **** 
 266:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL1RFDPHI_VALUE) || defined(__DOXYGEN__)
 267:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL1RFDPHI_VALUE not defined in clock_cfg.h"
 268:src-gen/sr5e1/clock.h **** #endif
 269:src-gen/sr5e1/clock.h **** 
 270:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SW) || defined(__DOXYGEN__)
 271:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW not defined in clock_cfg.h"
 272:src-gen/sr5e1/clock.h **** #endif
 273:src-gen/sr5e1/clock.h **** 
 274:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SYSPRE_VALUE) || defined(__DOXYGEN__)
 275:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SYSPRE_VALUE not defined in clock_cfg.h"
 276:src-gen/sr5e1/clock.h **** #endif
 277:src-gen/sr5e1/clock.h **** 
 278:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_UARTSEL) || defined(__DOXYGEN__)
 279:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTSEL not defined in clock_cfg.h"
 280:src-gen/sr5e1/clock.h **** #endif
 281:src-gen/sr5e1/clock.h **** 
 282:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_I2CSEL) || defined(__DOXYGEN__)
 283:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2CSEL not defined in clock_cfg.h"
 284:src-gen/sr5e1/clock.h **** #endif
 285:src-gen/sr5e1/clock.h **** 
 286:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SPISEL) || defined(__DOXYGEN__)
 287:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SPISEL not defined in clock_cfg.h"
 288:src-gen/sr5e1/clock.h **** #endif
 289:src-gen/sr5e1/clock.h **** 
 290:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_FDCANSEL) || defined(__DOXYGEN__)
 291:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_FDCANSEL not defined in clock_cfg.h"
 292:src-gen/sr5e1/clock.h **** #endif
 293:src-gen/sr5e1/clock.h **** 
 294:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_ADCSEL) || defined(__DOXYGEN__)
 295:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_ADCSEL not defined in clock_cfg.h"
 296:src-gen/sr5e1/clock.h **** #endif
 297:src-gen/sr5e1/clock.h **** 
 298:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SDADCSEL) || defined(__DOXYGEN__)
 299:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SDADCSEL not defined in clock_cfg.h"
 300:src-gen/sr5e1/clock.h **** #endif
 301:src-gen/sr5e1/clock.h **** 
 302:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_MCOSEL) || defined(__DOXYGEN__)
 303:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOSEL not defined in clock_cfg.h"
 304:src-gen/sr5e1/clock.h **** #endif
 305:src-gen/sr5e1/clock.h **** 
 306:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_RTCSEL) || defined(__DOXYGEN__)
 307:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_RTCSEL not defined in clock_cfg.h"
 308:src-gen/sr5e1/clock.h **** #endif
 309:src-gen/sr5e1/clock.h **** 
 310:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_UARTPRE_VALUE) || defined(__DOXYGEN__)
 311:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTPRE_VALUE not defined in clock_cfg.h"
 312:src-gen/sr5e1/clock.h **** #endif
 313:src-gen/sr5e1/clock.h **** 
 314:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_I2CPRE_VALUE) || defined(__DOXYGEN__)
 315:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2CPRE_VALUE not defined in clock_cfg.h"
 316:src-gen/sr5e1/clock.h **** #endif
 317:src-gen/sr5e1/clock.h **** 
 318:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SPIPRE_VALUE) || defined(__DOXYGEN__)
 319:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SPIPRE_VALUE not defined in clock_cfg.h"
 320:src-gen/sr5e1/clock.h **** #endif
 321:src-gen/sr5e1/clock.h **** 
 322:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_FDCANPRE_VALUE) || defined(__DOXYGEN__)
 323:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_FDCANPRE_VALUE not defined in clock_cfg.h"
 324:src-gen/sr5e1/clock.h **** #endif
 325:src-gen/sr5e1/clock.h **** 
 326:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_ADCPRE_VALUE) || defined(__DOXYGEN__)
 327:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_ADCPRE_VALUE not defined in clock_cfg.h"
 328:src-gen/sr5e1/clock.h **** #endif
 329:src-gen/sr5e1/clock.h **** 
 330:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SDADCPRE_VALUE) || defined(__DOXYGEN__)
 331:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SDADCPRE_VALUE not defined in clock_cfg.h"
 332:src-gen/sr5e1/clock.h **** #endif
 333:src-gen/sr5e1/clock.h **** 
 334:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_MCOPRE_VALUE) || defined(__DOXYGEN__)
 335:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOPRE_VALUE not defined in clock_cfg.h"
 336:src-gen/sr5e1/clock.h **** #endif
 337:src-gen/sr5e1/clock.h **** 
 338:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_LSIPRE_VALUE) || defined(__DOXYGEN__)
 339:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_LSIPRE_VALUE not defined in clock_cfg.h"
 340:src-gen/sr5e1/clock.h **** #endif
 341:src-gen/sr5e1/clock.h **** 
 342:src-gen/sr5e1/clock.h **** /* If SPISEL = I2S_CKIN, the value of I2S clock on the CKIN pin must be
 343:src-gen/sr5e1/clock.h ****    specified in the clock configuration file.*/
 344:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SPISEL == CLOCK_SPISEL_I2S_CKIN)
 345:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_I2S_CKIN) || defined(__DOXYGEN__)
 346:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2S_CKIN not defined in clock_cfg.h"
 347:src-gen/sr5e1/clock.h **** #endif
 348:src-gen/sr5e1/clock.h **** #endif
 349:src-gen/sr5e1/clock.h **** 
 350:src-gen/sr5e1/clock.h **** /* Clock Limits */
 351:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK_MAX            300000000UL
 352:src-gen/sr5e1/clock.h **** 
 353:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_MAX           40000000UL
 354:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_BYP_MAX       100000000UL
 355:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_MIN           4000000UL
 356:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_BYP_MIN       4000000UL
 357:src-gen/sr5e1/clock.h **** 
 358:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN_MAX            56000000UL
 359:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN_MIN            8000000UL
 360:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD_MAX           20000000UL
 361:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD_MIN           8000000UL
 362:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0VCO_MAX           1400000000UL
 363:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0VCO_MIN           600000000UL
 364:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI_MAX           700000000UL
 365:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI_MIN           4762000UL
 366:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI1_MAX          175000000UL
 367:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI1_MIN          20000000UL
 368:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN_MAX            87500000UL
 369:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN_MIN            37500000UL
 370:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1VCO_MAX           1400000000UL
 371:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1VCO_MIN           600000000UL
 372:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1PHI_MAX           700000000UL
 373:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1PHI_MIN           4762000UL
 374:src-gen/sr5e1/clock.h **** 
 375:src-gen/sr5e1/clock.h **** #define CLOCK_UARTCLK_MAX           100000000UL
 376:src-gen/sr5e1/clock.h **** #define CLOCK_I2CCLK_MAX            100000000UL
 377:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK_MS_SPI1_4_MAX  50000000UL
 378:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK_MS_SPI2_3_MAX  37500000UL
 379:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK_SL_MAX         50000000UL
 380:src-gen/sr5e1/clock.h **** #define CLOCK_I2SCLK_MAX            100000000UL
 381:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANCLK_MAX          80000000UL
 382:src-gen/sr5e1/clock.h **** #define CLOCK_ADCCLK_MAX            40000000UL
 383:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCCLK_MAX          16000000UL
 384:src-gen/sr5e1/clock.h **** 
 385:src-gen/sr5e1/clock.h **** /*Checks on XOSC.*/
 386:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_XOSC_ENABLED
 387:src-gen/sr5e1/clock.h **** 
 388:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_XOSCCLK == 0U
 389:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSCCLK is zero in clock_cfg.h"
 390:src-gen/sr5e1/clock.h **** #else /* CLOCK_CFG_XOSCCLK != 0 */
 391:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_XOSC_BYPASS
 392:src-gen/sr5e1/clock.h **** 
 393:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_XOSCCLK < CLOCK_XOSCCLK_BYP_MIN) ||                          \
 394:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_XOSCCLK > CLOCK_XOSCCLK_BYP_MAX)
 395:src-gen/sr5e1/clock.h **** #error "out of limits  CLOCK_XOSCCLK value"
 396:src-gen/sr5e1/clock.h **** #endif
 397:src-gen/sr5e1/clock.h **** 
 398:src-gen/sr5e1/clock.h **** #else /* !CLOCK_CFG_XOSC_BYPASS */
 399:src-gen/sr5e1/clock.h **** 
 400:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_XOSCCLK < CLOCK_XOSCCLK_MIN) ||                              \
 401:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_XOSCCLK > CLOCK_XOSCCLK_MAX)
 402:src-gen/sr5e1/clock.h **** #error "out of limits  CLOCK_XOSCCLK value"
 403:src-gen/sr5e1/clock.h **** #endif
 404:src-gen/sr5e1/clock.h **** 
 405:src-gen/sr5e1/clock.h **** #endif /* !CLOCK_CFG_XOSC_BYPASS */
 406:src-gen/sr5e1/clock.h **** #endif /* CLOCK_CFG_XOSCCLK != 0 */
 407:src-gen/sr5e1/clock.h **** 
 408:src-gen/sr5e1/clock.h **** #else /* !CLOCK_CFG_XOSC_ENABLED */
 409:src-gen/sr5e1/clock.h **** 
 410:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SW == CLOCK_SW_XOSC
 411:src-gen/sr5e1/clock.h **** #error "CLOCK_SW requires XOSC"
 412:src-gen/sr5e1/clock.h **** #endif
 413:src-gen/sr5e1/clock.h **** 
 414:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL0PHI) &&                                   \
 415:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)
 416:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW or CLOCK_CFG_PLL0SRC require XOSC"
 417:src-gen/sr5e1/clock.h **** #endif
 418:src-gen/sr5e1/clock.h **** 
 419:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI) &&                                   \
 420:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)
 421:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW or CLOCK_CFG_PLL1SRC require XOSC"
 422:src-gen/sr5e1/clock.h **** #endif
 423:src-gen/sr5e1/clock.h **** 
 424:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI) &&                                   \
 425:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_PLL0PHI1) &&                        \
 426:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)
 427:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW or CLOCK_CFG_PLL1SRC require XOSC"
 428:src-gen/sr5e1/clock.h **** #endif
 429:src-gen/sr5e1/clock.h **** 
 430:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_XOSC) ||                              \
 431:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL0PHI) &&                          \
 432:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)) ||                          \
 433:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL1PHI) &&                          \
 434:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)) 
 435:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOSEL requires XOSC"
 436:src-gen/sr5e1/clock.h **** #endif
 437:src-gen/sr5e1/clock.h **** 
 438:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_XOSC) ||                            \
 439:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_PLL0PHI) &&                        \
 440:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 441:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTSEL requires XOSC"
 442:src-gen/sr5e1/clock.h **** #endif
 443:src-gen/sr5e1/clock.h **** 
 444:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_XOSC) ||                              \
 445:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_PLL0PHI) &&                          \
 446:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 447:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2CSEL requires XOSC"
 448:src-gen/sr5e1/clock.h **** #endif
 449:src-gen/sr5e1/clock.h **** 
 450:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SPISEL == CLOCK_SPISEL_XOSC) ||                              \
 451:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_SPISEL == CLOCK_SPISEL_PLL0PHI) &&                          \
 452:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 453:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SPISEL requires XOSC"
 454:src-gen/sr5e1/clock.h **** #endif
 455:src-gen/sr5e1/clock.h **** 
 456:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_XOSC) ||                          \
 457:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_PLL0PHI) &&                      \
 458:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 459:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_FDCANSEL requires XOSC"
 460:src-gen/sr5e1/clock.h **** #endif
 461:src-gen/sr5e1/clock.h **** 
 462:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_XOSC) ||                              \
 463:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL0PHI) &&                          \
 464:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)) ||                          \
 465:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL1PHI) &&                          \
 466:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)) 
 467:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_ADCSEL requires XOSC"
 468:src-gen/sr5e1/clock.h **** #endif
 469:src-gen/sr5e1/clock.h **** 
 470:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_XOSC) ||                          \
 471:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL0PHI) &&                      \
 472:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)) ||                          \
 473:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL1PHI) &&                      \
 474:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)) 
 475:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SDADCSEL requires XOSC"
 476:src-gen/sr5e1/clock.h **** #endif
 477:src-gen/sr5e1/clock.h **** 
 478:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_XOSC
 479:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_RTCSEL requires XOSC"
 480:src-gen/sr5e1/clock.h **** #endif
 481:src-gen/sr5e1/clock.h **** 
 482:src-gen/sr5e1/clock.h **** #endif /* CLOCK_CFG_XOSC_ENABLED */
 483:src-gen/sr5e1/clock.h **** 
 484:src-gen/sr5e1/clock.h **** /*
 485:src-gen/sr5e1/clock.h ****  * LSI related checks.
 486:src-gen/sr5e1/clock.h ****  */
 487:src-gen/sr5e1/clock.h **** #if !CLOCK_CFG_LSI_ENABLED
 488:src-gen/sr5e1/clock.h **** 
 489:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_LSI
 490:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTSEL requires LSI"
 491:src-gen/sr5e1/clock.h **** #endif
 492:src-gen/sr5e1/clock.h **** 
 493:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_LSI
 494:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOSEL requires LSI"
 495:src-gen/sr5e1/clock.h **** #endif
 496:src-gen/sr5e1/clock.h **** 
 497:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_LSI
 498:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_RTCSEL requires LSI"
 499:src-gen/sr5e1/clock.h **** #endif
 500:src-gen/sr5e1/clock.h **** 
 501:src-gen/sr5e1/clock.h **** #endif /* !CLOCK_CFG_LSI_ENABLED */
 502:src-gen/sr5e1/clock.h **** 
 503:src-gen/sr5e1/clock.h **** /* PLL0 enable check.*/
 504:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL0PHI) ||                                   \
 505:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_PLL0PHI1) ||                        \
 506:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL0PHI) ||                           \
 507:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_PLL0PHI) ||                         \
 508:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_PLL0PHI) ||                           \
 509:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_SPISEL == CLOCK_SPISEL_PLL0PHI) ||                           \
 510:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_PLL0PHI) ||                       \
 511:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL0PHI) ||                           \
 512:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL0PHI)
 513:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL0         TRUE
 514:src-gen/sr5e1/clock.h **** #else
 515:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL0         FALSE
 516:src-gen/sr5e1/clock.h **** #endif
 517:src-gen/sr5e1/clock.h **** 
 518:src-gen/sr5e1/clock.h **** /* PLL0 fields.*/
 519:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0MFD_VALUE >= 8U) && (CLOCK_CFG_PLL0MFD_VALUE <= 127U))
 520:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0MFD_VALUE value in clock_cfg.h"
 521:src-gen/sr5e1/clock.h **** #endif
 522:src-gen/sr5e1/clock.h **** 
 523:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0PREDIV_VALUE >= 0U) && (CLOCK_CFG_PLL0PREDIV_VALUE <= 7U))
 524:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0PREDIV_VALUE value in clock_cfg.h"
 525:src-gen/sr5e1/clock.h **** #endif
 526:src-gen/sr5e1/clock.h **** 
 527:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0RFDPHI_VALUE >= 1U) && (CLOCK_CFG_PLL0RFDPHI_VALUE <= 63U))
 528:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0RFDPHI_VALUE value in clock_cfg.h"
 529:src-gen/sr5e1/clock.h **** #endif
 530:src-gen/sr5e1/clock.h **** 
 531:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0RFDPHI1_VALUE >= 4U) && (CLOCK_CFG_PLL0RFDPHI1_VALUE <= 15U))
 532:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0RFDPHI1_VALUE value in clock_cfg.h"
 533:src-gen/sr5e1/clock.h **** #endif
 534:src-gen/sr5e1/clock.h **** 
 535:src-gen/sr5e1/clock.h **** /* PLL0 input clock.*/
 536:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC) || defined(__DOXYGEN__)
 537:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN                CLOCK_CFG_XOSCCLK
 538:src-gen/sr5e1/clock.h **** 
 539:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_IRCOSC
 540:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN                CLOCK_IRCOSCCLK
 541:src-gen/sr5e1/clock.h **** 
 542:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_NOCLOCK
 543:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN                0U
 544:src-gen/sr5e1/clock.h **** 
 545:src-gen/sr5e1/clock.h **** #else
 546:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0SRC value in clock_cfg.h"
 547:src-gen/sr5e1/clock.h **** #endif
 548:src-gen/sr5e1/clock.h **** 
 549:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL0IN == 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE)
 550:src-gen/sr5e1/clock.h **** #error "no PLL input clock"
 551:src-gen/sr5e1/clock.h **** #endif
 552:src-gen/sr5e1/clock.h **** 
 553:src-gen/sr5e1/clock.h **** #if ((CLOCK_PLL0IN != 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE)) &&              \
 554:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0IN < CLOCK_PLL0IN_MIN) || (CLOCK_PLL0IN > CLOCK_PLL0IN_MAX))
 555:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0IN value"
 556:src-gen/sr5e1/clock.h **** #endif
 557:src-gen/sr5e1/clock.h **** 
 558:src-gen/sr5e1/clock.h **** /* PLL0 PFD clock.*/
 559:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_PLL0PREDIV_VALUE == 0U)
 560:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD               0U
 561:src-gen/sr5e1/clock.h **** #else
 562:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD                                                       \
 563:src-gen/sr5e1/clock.h ****   (CLOCK_PLL0IN / CLOCK_CFG_PLL0PREDIV_VALUE)
 564:src-gen/sr5e1/clock.h **** #endif
 565:src-gen/sr5e1/clock.h **** 
 566:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL0PFD != 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE) &&               \
 567:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0PFD < CLOCK_PLL0PFD_MIN) || (CLOCK_PLL0PFD > CLOCK_PLL0PFD_MAX))
 568:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0PFD value"
 569:src-gen/sr5e1/clock.h **** #endif
 570:src-gen/sr5e1/clock.h **** 
 571:src-gen/sr5e1/clock.h **** /* PLL0 VCO clock.*/
 572:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0VCO                                                       \
 573:src-gen/sr5e1/clock.h ****   (2U * CLOCK_CFG_PLL0MFD_VALUE * CLOCK_PLL0PFD)
 574:src-gen/sr5e1/clock.h **** 
 575:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL0VCO != 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE) &&               \
 576:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0VCO < CLOCK_PLL0VCO_MIN) || (CLOCK_PLL0VCO > CLOCK_PLL0VCO_MAX))
 577:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0VCO value"
 578:src-gen/sr5e1/clock.h **** #endif
 579:src-gen/sr5e1/clock.h **** 
 580:src-gen/sr5e1/clock.h **** /* PLL0 output clocks.*/
 581:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI                                                       \
 582:src-gen/sr5e1/clock.h ****   ((CLOCK_PLL0VCO / CLOCK_CFG_PLL0RFDPHI_VALUE) / 2U)
 583:src-gen/sr5e1/clock.h **** 
 584:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL0 == TRUE) &&                                        \
 585:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0PHI < CLOCK_PLL0PHI_MIN) || (CLOCK_PLL0PHI > CLOCK_PLL0PHI_MAX))
 586:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0PHI value"
 587:src-gen/sr5e1/clock.h **** #endif
 588:src-gen/sr5e1/clock.h **** 
 589:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI1                                                      \
 590:src-gen/sr5e1/clock.h ****   ((CLOCK_PLL0VCO / CLOCK_CFG_PLL0RFDPHI1_VALUE) / 2U)
 591:src-gen/sr5e1/clock.h **** 
 592:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL0 == TRUE) &&                                        \
 593:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0PHI1 < CLOCK_PLL0PHI1_MIN) || (CLOCK_PLL0PHI1 > CLOCK_PLL0PHI1_MAX))
 594:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0PHI1 value"
 595:src-gen/sr5e1/clock.h **** #endif
 596:src-gen/sr5e1/clock.h **** 
 597:src-gen/sr5e1/clock.h **** /* PLL1 enable check.*/
 598:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI) ||                                   \
 599:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL1PHI) ||                           \
 600:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL1PHI) ||                           \
 601:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL1PHI)
 602:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL1         TRUE
 603:src-gen/sr5e1/clock.h **** #else
 604:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL1         FALSE
 605:src-gen/sr5e1/clock.h **** #endif
 606:src-gen/sr5e1/clock.h **** 
 607:src-gen/sr5e1/clock.h **** /* PLL1 fields.*/
 608:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL1MFD_VALUE >= 16U) && (CLOCK_CFG_PLL1MFD_VALUE <= 34U))
 609:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL1MFD_VALUE value in clock_cfg.h"
 610:src-gen/sr5e1/clock.h **** #endif
 611:src-gen/sr5e1/clock.h **** 
 612:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL1RFDPHI_VALUE >= 1U) && (CLOCK_CFG_PLL1RFDPHI_VALUE <= 63U))
 613:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL1RFDPHI_VALUE value in clock_cfg.h"
 614:src-gen/sr5e1/clock.h **** #endif
 615:src-gen/sr5e1/clock.h **** 
 616:src-gen/sr5e1/clock.h **** /* PLL1 input clock.*/
 617:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_PLL0PHI1) || defined(__DOXYGEN__)
 618:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN                CLOCK_PLL0PHI1
 619:src-gen/sr5e1/clock.h **** 
 620:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC
 621:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN                CLOCK_CFG_XOSCCLK
 622:src-gen/sr5e1/clock.h **** 
 623:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_NOCLOCK
 624:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN                0U
 625:src-gen/sr5e1/clock.h **** 
 626:src-gen/sr5e1/clock.h **** #else
 627:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL1SRC value in clock_cfg.h"
 628:src-gen/sr5e1/clock.h **** #endif
 629:src-gen/sr5e1/clock.h **** 
 630:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL1IN == 0U && CLOCK_ACTIVATE_PLL1 == TRUE)
 631:src-gen/sr5e1/clock.h **** #error "no PLL input clock"
 632:src-gen/sr5e1/clock.h **** #endif
 633:src-gen/sr5e1/clock.h **** 
 634:src-gen/sr5e1/clock.h **** #if ((CLOCK_PLL1IN != 0U) && (CLOCK_ACTIVATE_PLL1 == TRUE)) &&              \
 635:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL1IN < CLOCK_PLL1IN_MIN) || (CLOCK_PLL1IN > CLOCK_PLL1IN_MAX))
 636:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL1IN value"
 637:src-gen/sr5e1/clock.h **** #endif
 638:src-gen/sr5e1/clock.h **** 
 639:src-gen/sr5e1/clock.h **** /* PLL1 VCO clock.*/
 640:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1VCO                                                       \
 641:src-gen/sr5e1/clock.h ****   (CLOCK_PLL1IN * CLOCK_CFG_PLL1MFD_VALUE)
 642:src-gen/sr5e1/clock.h **** 
 643:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL1 == TRUE) &&                                        \
 644:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL1VCO < CLOCK_PLL1VCO_MIN) || (CLOCK_PLL1VCO > CLOCK_PLL1VCO_MAX))
 645:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL1VCO value"
 646:src-gen/sr5e1/clock.h **** #endif
 647:src-gen/sr5e1/clock.h **** 
 648:src-gen/sr5e1/clock.h **** /* PLL1 output clock.*/
 649:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1PHI                                                       \
 650:src-gen/sr5e1/clock.h ****   ((CLOCK_PLL1VCO / CLOCK_CFG_PLL1RFDPHI_VALUE) / 2U)
 651:src-gen/sr5e1/clock.h **** 
 652:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL1 == TRUE) &&                                        \
 653:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL1PHI < CLOCK_PLL1PHI_MIN) || (CLOCK_PLL1PHI > CLOCK_PLL1PHI_MAX))
 654:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL1PHI value"
 655:src-gen/sr5e1/clock.h **** #endif
 656:src-gen/sr5e1/clock.h **** 
 657:src-gen/sr5e1/clock.h **** /* SYSCLK source.*/
 658:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_IRCOSC) || defined(__DOXYGEN__)
 659:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_IRCOSCCLK
 660:src-gen/sr5e1/clock.h **** 
 661:src-gen/sr5e1/clock.h **** #elif (CLOCK_CFG_SW == CLOCK_SW_XOSC)
 662:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_CFG_XOSCCLK
 663:src-gen/sr5e1/clock.h **** 
 664:src-gen/sr5e1/clock.h **** #elif (CLOCK_CFG_SW == CLOCK_SW_PLL0PHI)
 665:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_PLL0PHI
 666:src-gen/sr5e1/clock.h **** 
 667:src-gen/sr5e1/clock.h **** #elif (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI)
 668:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_PLL1PHI
 669:src-gen/sr5e1/clock.h **** 
 670:src-gen/sr5e1/clock.h **** #else
 671:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SW value in clock_cfg.h"
 672:src-gen/sr5e1/clock.h **** #endif
 673:src-gen/sr5e1/clock.h **** 
 674:src-gen/sr5e1/clock.h **** /* SYSCLK check.*/
 675:src-gen/sr5e1/clock.h **** #if CLOCK_SYSCLK > CLOCK_SYSCLK_MAX
 676:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_SYSCLK value"
 677:src-gen/sr5e1/clock.h **** #endif
 678:src-gen/sr5e1/clock.h **** 
 679:src-gen/sr5e1/clock.h **** /* SYSCLKDIV source.*/
 680:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_SYSPRE_VALUE >= 0U) && (CLOCK_CFG_SYSPRE_VALUE <= 511U))
 681:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLKDIV             (CLOCK_SYSCLK / (CLOCK_CFG_SYSPRE_VALUE + 1U))
 682:src-gen/sr5e1/clock.h **** #else
 683:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SYSPRE_VALUE value in clock_cfg.h"
 684:src-gen/sr5e1/clock.h **** #endif
 685:src-gen/sr5e1/clock.h **** 
 686:src-gen/sr5e1/clock.h **** /* APB1 frequency.*/
 687:src-gen/sr5e1/clock.h **** #define CLOCK_PCLK1                 (CLOCK_SYSCLKDIV / 4U)
 688:src-gen/sr5e1/clock.h **** 
 689:src-gen/sr5e1/clock.h **** /* APB2 frequency.*/
 690:src-gen/sr5e1/clock.h **** #define CLOCK_PCLK2                 (CLOCK_SYSCLKDIV / 2U)
 691:src-gen/sr5e1/clock.h **** 
 692:src-gen/sr5e1/clock.h **** /**
 693:src-gen/sr5e1/clock.h ****  * @brief   TIM clock.
 694:src-gen/sr5e1/clock.h ****  */
 695:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK1               (CLOCK_PCLK2 * 2U)
 696:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK2               (CLOCK_PCLK1 * 2U)
 697:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK3               (CLOCK_PCLK1 * 2U)
 698:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK4               (CLOCK_PCLK2 * 2U)
 699:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK5               (CLOCK_PCLK2 * 2U)
 700:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK6               (CLOCK_PCLK1 * 2U)
 701:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK7               (CLOCK_PCLK1 * 2U)
 702:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK8               (CLOCK_PCLK2 * 2U)
 703:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK15              (CLOCK_PCLK2 * 2U)
 704:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK16              (CLOCK_PCLK2 * 2U)
 705:src-gen/sr5e1/clock.h **** #define CLOCK_TIMTSCLK              (CLOCK_PCLK1 * 2U)
 706:src-gen/sr5e1/clock.h **** 
 707:src-gen/sr5e1/clock.h **** /**
 708:src-gen/sr5e1/clock.h ****  * @brief   MCO divider clock frequency.
 709:src-gen/sr5e1/clock.h ****  */
 710:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_NOCLOCK) || defined(__DOXYGEN__)
 711:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             0U
 712:src-gen/sr5e1/clock.h **** 
 713:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_LSI
 714:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_LSICLK
 715:src-gen/sr5e1/clock.h **** 
 716:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_IRCOSC
 717:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_IRCOSCCLK
 718:src-gen/sr5e1/clock.h **** 
 719:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_XOSC
 720:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_CFG_XOSCCLK
 721:src-gen/sr5e1/clock.h **** 
 722:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL0PHI
 723:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_PLL0PHI
 724:src-gen/sr5e1/clock.h **** 
 725:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL1PHI
 726:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_PLL1PHI
 727:src-gen/sr5e1/clock.h **** 
 728:src-gen/sr5e1/clock.h **** #else
 729:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_MCOSEL value in clock_cfg.h"
 730:src-gen/sr5e1/clock.h **** #endif
 731:src-gen/sr5e1/clock.h **** 
 732:src-gen/sr5e1/clock.h **** /**
 733:src-gen/sr5e1/clock.h ****  * @brief   MCO output pin clock frequency.
 734:src-gen/sr5e1/clock.h ****  */
 735:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_MCOPRE_VALUE == 0U)
 736:src-gen/sr5e1/clock.h **** #define CLOCK_MCOCLK                CLOCK_MCODIVCLK
 737:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_MCOPRE_VALUE > 0U) && (CLOCK_CFG_MCOPRE_VALUE <= 63U))
 738:src-gen/sr5e1/clock.h **** #define CLOCK_MCOCLK                (CLOCK_MCODIVCLK / (2U * CLOCK_CFG_MCOPRE_VALUE))
 739:src-gen/sr5e1/clock.h **** #else
 740:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_MCOPRE_VALUE value in clock_cfg.h"
 741:src-gen/sr5e1/clock.h **** #endif
 742:src-gen/sr5e1/clock.h **** 
 743:src-gen/sr5e1/clock.h **** /**
 744:src-gen/sr5e1/clock.h ****  * @brief   RTC clock.
 745:src-gen/sr5e1/clock.h ****  */
 746:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_LSIPRE_VALUE == 0U)
 747:src-gen/sr5e1/clock.h **** #define CLOCK_LSIDIVCLK             CLOCK_LSICLK
 748:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_LSIPRE_VALUE > 0U) && (CLOCK_CFG_LSIPRE_VALUE <= 31U))
 749:src-gen/sr5e1/clock.h **** #define CLOCK_LSIDIVCLK             (CLOCK_LSICLK / (2U * CLOCK_CFG_LSIPRE_VALUE))
 750:src-gen/sr5e1/clock.h **** #else
 751:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_LSIPRE_VALUE value in clock_cfg.h"
 752:src-gen/sr5e1/clock.h **** #endif
 753:src-gen/sr5e1/clock.h **** 
 754:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_NOCLOCK) || defined(__DOXYGEN__)
 755:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSELCLK             0U
 756:src-gen/sr5e1/clock.h **** 
 757:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_LSI
 758:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSELCLK             CLOCK_LSIDIVCLK
 759:src-gen/sr5e1/clock.h **** 
 760:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_XOSC
 761:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSELCLK             CLOCK_CFG_XOSCCLK
 762:src-gen/sr5e1/clock.h **** 
 763:src-gen/sr5e1/clock.h **** #else
 764:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_RTCSEL value in clock_cfg.h"
 765:src-gen/sr5e1/clock.h **** #endif
 766:src-gen/sr5e1/clock.h **** 
 767:src-gen/sr5e1/clock.h **** /**
 768:src-gen/sr5e1/clock.h ****  * @brief   UART clock.
 769:src-gen/sr5e1/clock.h ****  */
 770:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_NOCLOCK) || defined(__DOXYGEN__)
 771:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            0U
 772:src-gen/sr5e1/clock.h **** 
 773:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_IRCOSC
 774:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_IRCOSCCLK
 775:src-gen/sr5e1/clock.h **** 
 776:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_XOSC
 777:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_CFG_XOSCCLK
 778:src-gen/sr5e1/clock.h **** 
 779:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_PLL0PHI
 780:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_PLL0PHI
 781:src-gen/sr5e1/clock.h **** 
 782:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_LSI
 783:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_LSICLK
 784:src-gen/sr5e1/clock.h **** 
 785:src-gen/sr5e1/clock.h **** #else
 786:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_UARTSEL value in clock_cfg.h"
 787:src-gen/sr5e1/clock.h **** #endif
 788:src-gen/sr5e1/clock.h **** 
 789:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_UARTPRE_VALUE >= 0U) && (CLOCK_CFG_UARTPRE_VALUE <= 31U))
 790:src-gen/sr5e1/clock.h **** #define CLOCK_UARTCLK               (CLOCK_UARTSELCLK / (CLOCK_CFG_UARTPRE_VALUE + 1U))
 791:src-gen/sr5e1/clock.h **** #else
 792:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_UARTPRE_VALUE value in clock_cfg.h"
 793:src-gen/sr5e1/clock.h **** #endif
 794:src-gen/sr5e1/clock.h **** 
 795:src-gen/sr5e1/clock.h **** #if CLOCK_UARTCLK > CLOCK_UARTCLK_MAX
 796:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_UARTCLK value"
 797:src-gen/sr5e1/clock.h **** #endif
 798:src-gen/sr5e1/clock.h **** 
 799:src-gen/sr5e1/clock.h **** #define CLOCK_UART1CLK              CLOCK_UARTCLK
 800:src-gen/sr5e1/clock.h **** #define CLOCK_UART2CLK              CLOCK_UARTCLK
 801:src-gen/sr5e1/clock.h **** #define CLOCK_UART3CLK              CLOCK_UARTCLK
 802:src-gen/sr5e1/clock.h **** 
 803:src-gen/sr5e1/clock.h **** /**
 804:src-gen/sr5e1/clock.h ****  * @brief   I2C clock.
 805:src-gen/sr5e1/clock.h ****  */
 806:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_NOCLOCK) || defined(__DOXYGEN__)
 807:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             0U
 808:src-gen/sr5e1/clock.h **** 
 809:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_IRCOSC
 810:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             CLOCK_IRCOSCCLK
 811:src-gen/sr5e1/clock.h **** 
 812:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_XOSC
 813:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             CLOCK_CFG_XOSCCLK
 814:src-gen/sr5e1/clock.h **** 
 815:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_PLL0PHI
 816:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             CLOCK_PLL0PHI
 817:src-gen/sr5e1/clock.h **** 
 818:src-gen/sr5e1/clock.h **** #else
 819:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_I2CSEL value in clock_cfg.h"
 820:src-gen/sr5e1/clock.h **** #endif
 821:src-gen/sr5e1/clock.h **** 
 822:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_I2CPRE_VALUE >= 0U) && (CLOCK_CFG_I2CPRE_VALUE <= 31U))
 823:src-gen/sr5e1/clock.h **** #define CLOCK_I2CCLK                (CLOCK_I2CSELCLK / (CLOCK_CFG_I2CPRE_VALUE + 1U))
 824:src-gen/sr5e1/clock.h **** #else
 825:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_I2CPRE_VALUE value in clock_cfg.h"
 826:src-gen/sr5e1/clock.h **** #endif
 827:src-gen/sr5e1/clock.h **** 
 828:src-gen/sr5e1/clock.h **** #if CLOCK_I2CCLK > CLOCK_I2CCLK_MAX
 829:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_I2CCLK value"
 830:src-gen/sr5e1/clock.h **** #endif
 831:src-gen/sr5e1/clock.h **** 
 832:src-gen/sr5e1/clock.h **** /**
 833:src-gen/sr5e1/clock.h ****  * @brief   SPI/I2S clock.
 834:src-gen/sr5e1/clock.h ****  */
 835:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SPISEL == CLOCK_SPISEL_NOCLOCK) || defined(__DOXYGEN__)
 836:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             0U
 837:src-gen/sr5e1/clock.h **** 
 838:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_IRCOSC
 839:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_IRCOSCCLK
 840:src-gen/sr5e1/clock.h **** 
 841:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_XOSC
 842:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_CFG_XOSCCLK
 843:src-gen/sr5e1/clock.h **** 
 844:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_PLL0PHI
 845:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_PLL0PHI
 846:src-gen/sr5e1/clock.h **** 
 847:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_I2S_CKIN
 848:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_CFG_I2S_CKIN
 849:src-gen/sr5e1/clock.h **** 
 850:src-gen/sr5e1/clock.h **** #else
 851:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SPISEL value in clock_cfg.h"
 852:src-gen/sr5e1/clock.h **** #endif
 853:src-gen/sr5e1/clock.h **** 
 854:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_SPIPRE_VALUE >= 0U) && (CLOCK_CFG_SPIPRE_VALUE <= 31U))
 855:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK                (CLOCK_SPISELCLK / (CLOCK_CFG_SPIPRE_VALUE + 1U))
 856:src-gen/sr5e1/clock.h **** #else
 857:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SPIPRE_VALUE value in clock_cfg.h"
 858:src-gen/sr5e1/clock.h **** #endif
 859:src-gen/sr5e1/clock.h **** 
 860:src-gen/sr5e1/clock.h **** #define CLOCK_SPI1CLK               CLOCK_PCLK2
 861:src-gen/sr5e1/clock.h **** #define CLOCK_SPI2CLK               CLOCK_PCLK1
 862:src-gen/sr5e1/clock.h **** #define CLOCK_SPI3CLK               CLOCK_PCLK1
 863:src-gen/sr5e1/clock.h **** #define CLOCK_SPI4CLK               CLOCK_PCLK2
 864:src-gen/sr5e1/clock.h **** #define CLOCK_I2S2CLK               CLOCK_SPICLK
 865:src-gen/sr5e1/clock.h **** #define CLOCK_I2S3CLK               CLOCK_SPICLK
 866:src-gen/sr5e1/clock.h **** 
 867:src-gen/sr5e1/clock.h **** /**
 868:src-gen/sr5e1/clock.h ****  * @brief   FDCAN clock.
 869:src-gen/sr5e1/clock.h ****  */
 870:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_NOCLOCK) || defined(__DOXYGEN__)
 871:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSELCLK           0U
 872:src-gen/sr5e1/clock.h **** 
 873:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_XOSC
 874:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSELCLK           CLOCK_CFG_XOSCCLK
 875:src-gen/sr5e1/clock.h **** 
 876:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_PLL0PHI
 877:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSELCLK           CLOCK_PLL0PHI
 878:src-gen/sr5e1/clock.h **** 
 879:src-gen/sr5e1/clock.h **** #else
 880:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_FDCANSEL value in clock_cfg.h"
 881:src-gen/sr5e1/clock.h **** #endif
 882:src-gen/sr5e1/clock.h **** 
 883:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_FDCANPRE_VALUE >= 0U) && (CLOCK_CFG_FDCANPRE_VALUE <= 31U))
 884:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANCLK              (CLOCK_FDCANSELCLK / (CLOCK_CFG_FDCANPRE_VALUE + 1U))
 885:src-gen/sr5e1/clock.h **** #else
 886:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_FDCANPRE_VALUE value in clock_cfg.h"
 887:src-gen/sr5e1/clock.h **** #endif
 888:src-gen/sr5e1/clock.h **** 
 889:src-gen/sr5e1/clock.h **** #if CLOCK_FDCANCLK > CLOCK_FDCANCLK_MAX
 890:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_FDCANCLK value"
 891:src-gen/sr5e1/clock.h **** #endif
 892:src-gen/sr5e1/clock.h **** 
 893:src-gen/sr5e1/clock.h **** /**
 894:src-gen/sr5e1/clock.h ****  * @brief   ADC clock.
 895:src-gen/sr5e1/clock.h ****  */
 896:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_NOCLOCK) || defined(__DOXYGEN__)
 897:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             0U
 898:src-gen/sr5e1/clock.h **** 
 899:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_XOSC
 900:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             CLOCK_CFG_XOSCCLK
 901:src-gen/sr5e1/clock.h **** 
 902:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL0PHI
 903:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             CLOCK_PLL0PHI
 904:src-gen/sr5e1/clock.h **** 
 905:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL1PHI
 906:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             CLOCK_PLL1PHI
 907:src-gen/sr5e1/clock.h **** 
 908:src-gen/sr5e1/clock.h **** #else
 909:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_ADCSEL value in clock_cfg.h"
 910:src-gen/sr5e1/clock.h **** #endif
 911:src-gen/sr5e1/clock.h **** /* The range of values of ADCPRE must be verified */
 912:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_ADCPRE_VALUE == 0U)
 913:src-gen/sr5e1/clock.h **** #define CLOCK_ADCCLK                CLOCK_ADCSELCLK
 914:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_ADCPRE_VALUE > 0U) && (CLOCK_CFG_ADCPRE_VALUE <= 63U))
 915:src-gen/sr5e1/clock.h **** #define CLOCK_ADCCLK                (CLOCK_ADCSELCLK / (2U * CLOCK_CFG_ADCPRE_VALUE))
 916:src-gen/sr5e1/clock.h **** #else
 917:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_ADCPRE_VALUE value in clock_cfg.h"
 918:src-gen/sr5e1/clock.h **** #endif
 919:src-gen/sr5e1/clock.h **** 
 920:src-gen/sr5e1/clock.h **** #if CLOCK_ADCCLK > CLOCK_ADCCLK_MAX
 921:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_ADCCLK value"
 922:src-gen/sr5e1/clock.h **** #endif
 923:src-gen/sr5e1/clock.h **** 
 924:src-gen/sr5e1/clock.h **** #define CLOCK_ADC12CLK              CLOCK_ADCCLK
 925:src-gen/sr5e1/clock.h **** #define CLOCK_ADC345CLK             CLOCK_ADCCLK
 926:src-gen/sr5e1/clock.h **** 
 927:src-gen/sr5e1/clock.h **** /**
 928:src-gen/sr5e1/clock.h ****  * @brief   SDADC clock.
 929:src-gen/sr5e1/clock.h ****  */
 930:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_NOCLOCK) || defined(__DOXYGEN__)
 931:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           0U
 932:src-gen/sr5e1/clock.h **** 
 933:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_XOSC
 934:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           CLOCK_CFG_XOSCCLK
 935:src-gen/sr5e1/clock.h **** 
 936:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL0PHI
 937:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           CLOCK_PLL0PHI
 938:src-gen/sr5e1/clock.h **** 
 939:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL1PHI
 940:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           CLOCK_PLL1PHI
 941:src-gen/sr5e1/clock.h **** 
 942:src-gen/sr5e1/clock.h **** #else
 943:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SDADCSEL value in clock_cfg.h"
 944:src-gen/sr5e1/clock.h **** #endif
 945:src-gen/sr5e1/clock.h **** /* The range of values of SDADCPRE must be verified */
 946:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SDADCPRE_VALUE == 0U)
 947:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCCLK              CLOCK_SDADCSELCLK
 948:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_SDADCPRE_VALUE > 0U) && (CLOCK_CFG_SDADCPRE_VALUE <= 63U))
 949:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCCLK              (CLOCK_SDADCSELCLK / (2U * CLOCK_CFG_SDADCPRE_VALUE))
 950:src-gen/sr5e1/clock.h **** #else
 951:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SDADCPRE_VALUE value in clock_cfg.h"
 952:src-gen/sr5e1/clock.h **** #endif
 953:src-gen/sr5e1/clock.h **** 
 954:src-gen/sr5e1/clock.h **** #if CLOCK_SDADCCLK > CLOCK_SDADCCLK_MAX
 955:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_SDADCCLK value"
 956:src-gen/sr5e1/clock.h **** #endif
 957:src-gen/sr5e1/clock.h **** 
 958:src-gen/sr5e1/clock.h **** /* Flash wait state (APC = 0) settings.*/
 959:src-gen/sr5e1/clock.h **** #if (CLOCK_SYSCLKDIV <= 136000000UL) || defined(__DOXYGEN__)
 960:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         3U /* 0 < core frequency < 136MHz  */
 961:src-gen/sr5e1/clock.h **** 
 962:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 170000000UL)
 963:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         4U /* 136MHz < core_freq <= 170MHz */
 964:src-gen/sr5e1/clock.h **** 
 965:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 204000000UL)
 966:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         5U /* 170MHz < core_freq <= 204MHz */
 967:src-gen/sr5e1/clock.h **** 
 968:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 238000000UL)
 969:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         6U /* 204MHz < core_freq <= 238MHz */
 970:src-gen/sr5e1/clock.h **** 
 971:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 273000000UL)
 972:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         7U /* 238MHz < core_freq <= 273MHz */
 973:src-gen/sr5e1/clock.h **** 
 974:src-gen/sr5e1/clock.h **** #else
 975:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         8U /* 273MHz < core_freq <= 307MHz */
 976:src-gen/sr5e1/clock.h **** 
 977:src-gen/sr5e1/clock.h **** #endif
 978:src-gen/sr5e1/clock.h **** 
 979:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 980:src-gen/sr5e1/clock.h **** /* Module data structures and types.                                         */
 981:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 982:src-gen/sr5e1/clock.h **** 
 983:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 984:src-gen/sr5e1/clock.h **** /* Module macros.                                                            */
 985:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 986:src-gen/sr5e1/clock.h **** 
 987:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 988:src-gen/sr5e1/clock.h **** /* External declarations.                                                    */
 989:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 990:src-gen/sr5e1/clock.h **** 
 991:src-gen/sr5e1/clock.h **** /**
 992:src-gen/sr5e1/clock.h ****  * @brief   CMSIS system core clock variable.
 993:src-gen/sr5e1/clock.h ****  */
 994:src-gen/sr5e1/clock.h **** extern uint32_t SystemCoreClock;
 995:src-gen/sr5e1/clock.h **** 
 996:src-gen/sr5e1/clock.h **** #ifdef __cplusplus
 997:src-gen/sr5e1/clock.h **** extern "C" {
 998:src-gen/sr5e1/clock.h **** #endif
 999:src-gen/sr5e1/clock.h **** 
1000:src-gen/sr5e1/clock.h **** /**
1001:src-gen/sr5e1/clock.h ****  * @brief   Initializes clock
1002:src-gen/sr5e1/clock.h ****  *
1003:src-gen/sr5e1/clock.h ****  * @api
1004:src-gen/sr5e1/clock.h ****  */
1005:src-gen/sr5e1/clock.h **** void clock_init(void);
1006:src-gen/sr5e1/clock.h **** 
1007:src-gen/sr5e1/clock.h **** #ifdef __cplusplus
1008:src-gen/sr5e1/clock.h **** }
1009:src-gen/sr5e1/clock.h **** #endif
1010:src-gen/sr5e1/clock.h **** 
1011:src-gen/sr5e1/clock.h **** /*===========================================================================*/
1012:src-gen/sr5e1/clock.h **** /* Module inline functions.                                                  */
1013:src-gen/sr5e1/clock.h **** /*===========================================================================*/
1014:src-gen/sr5e1/clock.h **** 
1015:src-gen/sr5e1/clock.h **** /**
1016:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB1 peripherals clock [Low Word]
1017:src-gen/sr5e1/clock.h ****  *
1018:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1019:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1020:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1021:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1LENR after the update
1022:src-gen/sr5e1/clock.h ****  *
1023:src-gen/sr5e1/clock.h ****  * @api
1024:src-gen/sr5e1/clock.h ****  */
1025:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB1L(bool smode, uint32_t m) {
1026:src-gen/sr5e1/clock.h **** 
1027:src-gen/sr5e1/clock.h ****     RCC->AHB1LENR |= m;
1028:src-gen/sr5e1/clock.h ****     if (smode) {
1029:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1LSMENR |= m;
1030:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1031:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1LSMENR |= m;
1032:src-gen/sr5e1/clock.h **** #endif
1033:src-gen/sr5e1/clock.h ****     }
1034:src-gen/sr5e1/clock.h ****     else {
1035:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1LSMENR &= ~m;
1036:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1037:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1LSMENR &= ~m;
1038:src-gen/sr5e1/clock.h **** #endif
1039:src-gen/sr5e1/clock.h ****     }
1040:src-gen/sr5e1/clock.h **** 
1041:src-gen/sr5e1/clock.h ****     return RCC->AHB1LENR;
1042:src-gen/sr5e1/clock.h **** }
1043:src-gen/sr5e1/clock.h **** 
1044:src-gen/sr5e1/clock.h **** /**
1045:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB1 peripherals clock [Low Word]
1046:src-gen/sr5e1/clock.h ****  *
1047:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1048:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1LENR after the update
1049:src-gen/sr5e1/clock.h ****  *
1050:src-gen/sr5e1/clock.h ****  * @api
1051:src-gen/sr5e1/clock.h ****  */
1052:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB1L(uint32_t m) {
1053:src-gen/sr5e1/clock.h **** 
1054:src-gen/sr5e1/clock.h ****     RCC->AHB1LENR &= ~m;
1055:src-gen/sr5e1/clock.h ****     RCC->C1_AHB1LSMENR &= ~m;
1056:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1057:src-gen/sr5e1/clock.h ****     RCC->C2_AHB1LSMENR &= ~m;
1058:src-gen/sr5e1/clock.h **** #endif
1059:src-gen/sr5e1/clock.h **** 
1060:src-gen/sr5e1/clock.h ****     return RCC->AHB1LENR;
1061:src-gen/sr5e1/clock.h **** }
1062:src-gen/sr5e1/clock.h **** 
1063:src-gen/sr5e1/clock.h **** /**
1064:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB1 peripheral clock [Low Word] is enabled
1065:src-gen/sr5e1/clock.h ****  *
1066:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1067:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1068:src-gen/sr5e1/clock.h ****  *
1069:src-gen/sr5e1/clock.h ****  * @api
1070:src-gen/sr5e1/clock.h ****  */
1071:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB1L(uint32_t m) {
1072:src-gen/sr5e1/clock.h **** 
1073:src-gen/sr5e1/clock.h ****     return (((RCC->AHB1LENR & m) == m) ? true : false);
1074:src-gen/sr5e1/clock.h **** }
1075:src-gen/sr5e1/clock.h **** 
1076:src-gen/sr5e1/clock.h **** /**
1077:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB1 peripherals [Low Word]
1078:src-gen/sr5e1/clock.h ****  *
1079:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1080:src-gen/sr5e1/clock.h ****  *
1081:src-gen/sr5e1/clock.h ****  * @api
1082:src-gen/sr5e1/clock.h ****  */
1083:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB1L(uint32_t m) {
1084:src-gen/sr5e1/clock.h **** 
1085:src-gen/sr5e1/clock.h ****     RCC->AHB1LRSTR |= m;
1086:src-gen/sr5e1/clock.h ****     RCC->AHB1LRSTR &= ~m;
1087:src-gen/sr5e1/clock.h ****     (void)RCC->AHB1LRSTR;
1088:src-gen/sr5e1/clock.h **** }
1089:src-gen/sr5e1/clock.h **** 
1090:src-gen/sr5e1/clock.h **** /**
1091:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB1 peripherals clock [High Word]
1092:src-gen/sr5e1/clock.h ****  *
1093:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1094:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1095:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1096:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1HENR after the update
1097:src-gen/sr5e1/clock.h ****  *
1098:src-gen/sr5e1/clock.h ****  * @api
1099:src-gen/sr5e1/clock.h ****  */
1100:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB1H(bool smode, uint32_t m) {
1101:src-gen/sr5e1/clock.h **** 
1102:src-gen/sr5e1/clock.h ****     RCC->AHB1HENR |= m;
1103:src-gen/sr5e1/clock.h ****     if (smode) {
1104:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1HSMENR |= m;
1105:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1106:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1HSMENR |= m;
1107:src-gen/sr5e1/clock.h **** #endif
1108:src-gen/sr5e1/clock.h ****     }
1109:src-gen/sr5e1/clock.h ****     else {
1110:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1HSMENR &= ~m;
1111:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1112:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1HSMENR &= ~m;
1113:src-gen/sr5e1/clock.h **** #endif
1114:src-gen/sr5e1/clock.h ****     }
1115:src-gen/sr5e1/clock.h **** 
1116:src-gen/sr5e1/clock.h ****     return RCC->AHB1HENR;
1117:src-gen/sr5e1/clock.h **** }
1118:src-gen/sr5e1/clock.h **** 
1119:src-gen/sr5e1/clock.h **** /**
1120:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB1 peripherals clock [High Word]
1121:src-gen/sr5e1/clock.h ****  *
1122:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1123:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1HENR after the update
1124:src-gen/sr5e1/clock.h ****  *
1125:src-gen/sr5e1/clock.h ****  * @api
1126:src-gen/sr5e1/clock.h ****  */
1127:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB1H(uint32_t m) {
1128:src-gen/sr5e1/clock.h **** 
1129:src-gen/sr5e1/clock.h ****     RCC->AHB1HENR &= ~m;
1130:src-gen/sr5e1/clock.h ****     RCC->C1_AHB1HSMENR &= ~m;
1131:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1132:src-gen/sr5e1/clock.h ****     RCC->C2_AHB1HSMENR &= ~m;
1133:src-gen/sr5e1/clock.h **** #endif
1134:src-gen/sr5e1/clock.h **** 
1135:src-gen/sr5e1/clock.h ****     return RCC->AHB1HENR;
1136:src-gen/sr5e1/clock.h **** }
1137:src-gen/sr5e1/clock.h **** 
1138:src-gen/sr5e1/clock.h **** /**
1139:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB1 peripheral clock [High Word] is enabled
1140:src-gen/sr5e1/clock.h ****  *
1141:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1142:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1143:src-gen/sr5e1/clock.h ****  *
1144:src-gen/sr5e1/clock.h ****  * @api
1145:src-gen/sr5e1/clock.h ****  */
1146:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB1H(uint32_t m) {
1147:src-gen/sr5e1/clock.h **** 
1148:src-gen/sr5e1/clock.h ****     return (((RCC->AHB1HENR & m) == m) ? true : false);
1149:src-gen/sr5e1/clock.h **** }
1150:src-gen/sr5e1/clock.h **** 
1151:src-gen/sr5e1/clock.h **** /**
1152:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB1 peripherals [High Word]
1153:src-gen/sr5e1/clock.h ****  *
1154:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1155:src-gen/sr5e1/clock.h ****  *
1156:src-gen/sr5e1/clock.h ****  * @api
1157:src-gen/sr5e1/clock.h ****  */
1158:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB1H(uint32_t m) {
1159:src-gen/sr5e1/clock.h **** 
1160:src-gen/sr5e1/clock.h ****     RCC->AHB1HRSTR |= m;
1161:src-gen/sr5e1/clock.h ****     RCC->AHB1HRSTR &= ~m;
1162:src-gen/sr5e1/clock.h ****     (void)RCC->AHB1HRSTR;
1163:src-gen/sr5e1/clock.h **** }
1164:src-gen/sr5e1/clock.h **** 
1165:src-gen/sr5e1/clock.h **** /**
1166:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB2 peripherals clock [Low Word]
1167:src-gen/sr5e1/clock.h ****  *
1168:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1169:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1170:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1171:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2LENR after the update
1172:src-gen/sr5e1/clock.h ****  *
1173:src-gen/sr5e1/clock.h ****  * @api
1174:src-gen/sr5e1/clock.h ****  */
1175:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB2L(bool smode, uint32_t m) {
1176:src-gen/sr5e1/clock.h **** 
1177:src-gen/sr5e1/clock.h ****     RCC->AHB2LENR |= m;
1178:src-gen/sr5e1/clock.h ****     if (smode) {
1179:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2LSMENR |= m;
1180:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1181:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2LSMENR |= m;
1182:src-gen/sr5e1/clock.h **** #endif
1183:src-gen/sr5e1/clock.h ****     }
1184:src-gen/sr5e1/clock.h ****     else {
1185:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2LSMENR &= ~m;
1186:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1187:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2LSMENR &= ~m;
1188:src-gen/sr5e1/clock.h **** #endif
1189:src-gen/sr5e1/clock.h ****     }
1190:src-gen/sr5e1/clock.h **** 
1191:src-gen/sr5e1/clock.h ****     return RCC->AHB2LENR;
1192:src-gen/sr5e1/clock.h **** }
1193:src-gen/sr5e1/clock.h **** 
1194:src-gen/sr5e1/clock.h **** /**
1195:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB2 peripherals clock [Low Word]
1196:src-gen/sr5e1/clock.h ****  *
1197:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1198:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2LENR after the update
1199:src-gen/sr5e1/clock.h ****  *
1200:src-gen/sr5e1/clock.h ****  * @api
1201:src-gen/sr5e1/clock.h ****  */
1202:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB2L(uint32_t m) {
1203:src-gen/sr5e1/clock.h **** 
1204:src-gen/sr5e1/clock.h ****     RCC->AHB2LENR &= ~m;
1205:src-gen/sr5e1/clock.h ****     RCC->C1_AHB2LSMENR &= ~m;
1206:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1207:src-gen/sr5e1/clock.h ****     RCC->C2_AHB2LSMENR &= ~m;
1208:src-gen/sr5e1/clock.h **** #endif
1209:src-gen/sr5e1/clock.h **** 
1210:src-gen/sr5e1/clock.h ****     return RCC->AHB2LENR;
1211:src-gen/sr5e1/clock.h **** }
1212:src-gen/sr5e1/clock.h **** 
1213:src-gen/sr5e1/clock.h **** /**
1214:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB2 peripheral clock [Low Word] is enabled
1215:src-gen/sr5e1/clock.h ****  *
1216:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1217:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1218:src-gen/sr5e1/clock.h ****  *
1219:src-gen/sr5e1/clock.h ****  * @api
1220:src-gen/sr5e1/clock.h ****  */
1221:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB2L(uint32_t m) {
1222:src-gen/sr5e1/clock.h **** 
1223:src-gen/sr5e1/clock.h ****     return (((RCC->AHB2LENR & m) == m) ? true : false);
1224:src-gen/sr5e1/clock.h **** }
1225:src-gen/sr5e1/clock.h **** 
1226:src-gen/sr5e1/clock.h **** /**
1227:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB2 peripherals [Low Word]
1228:src-gen/sr5e1/clock.h ****  *
1229:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1230:src-gen/sr5e1/clock.h ****  *
1231:src-gen/sr5e1/clock.h ****  * @api
1232:src-gen/sr5e1/clock.h ****  */
1233:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB2L(uint32_t m) {
1234:src-gen/sr5e1/clock.h **** 
1235:src-gen/sr5e1/clock.h ****     RCC->AHB2LRSTR |= m;
1236:src-gen/sr5e1/clock.h ****     RCC->AHB2LRSTR &= ~m;
1237:src-gen/sr5e1/clock.h ****     (void)RCC->AHB2LRSTR;
1238:src-gen/sr5e1/clock.h **** }
1239:src-gen/sr5e1/clock.h **** 
1240:src-gen/sr5e1/clock.h **** /**
1241:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB2 peripherals clock [High Word]
1242:src-gen/sr5e1/clock.h ****  *
1243:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1244:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1245:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1246:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2HENR after the update
1247:src-gen/sr5e1/clock.h ****  *
1248:src-gen/sr5e1/clock.h ****  * @api
1249:src-gen/sr5e1/clock.h ****  */
1250:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB2H(bool smode, uint32_t m) {
1251:src-gen/sr5e1/clock.h **** 
1252:src-gen/sr5e1/clock.h ****     RCC->AHB2HENR |= m;
1253:src-gen/sr5e1/clock.h ****     if (smode) {
1254:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2HSMENR |= m;
1255:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1256:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2HSMENR |= m;
1257:src-gen/sr5e1/clock.h **** #endif
1258:src-gen/sr5e1/clock.h ****     }
1259:src-gen/sr5e1/clock.h ****     else {
1260:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2HSMENR &= ~m;
1261:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1262:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2HSMENR &= ~m;
1263:src-gen/sr5e1/clock.h **** #endif
1264:src-gen/sr5e1/clock.h ****     }
1265:src-gen/sr5e1/clock.h **** 
1266:src-gen/sr5e1/clock.h ****     return RCC->AHB2HENR;
1267:src-gen/sr5e1/clock.h **** }
1268:src-gen/sr5e1/clock.h **** 
1269:src-gen/sr5e1/clock.h **** /**
1270:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB2 peripherals clock [High Word]
1271:src-gen/sr5e1/clock.h ****  *
1272:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1273:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2HENR after the update
1274:src-gen/sr5e1/clock.h ****  *
1275:src-gen/sr5e1/clock.h ****  * @api
1276:src-gen/sr5e1/clock.h ****  */
1277:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB2H(uint32_t m) {
1278:src-gen/sr5e1/clock.h **** 
1279:src-gen/sr5e1/clock.h ****     RCC->AHB2HENR &= ~m;
1280:src-gen/sr5e1/clock.h ****     RCC->C1_AHB2HSMENR &= ~m;
1281:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1282:src-gen/sr5e1/clock.h ****     RCC->C2_AHB2HSMENR &= ~m;
1283:src-gen/sr5e1/clock.h **** #endif
1284:src-gen/sr5e1/clock.h **** 
1285:src-gen/sr5e1/clock.h ****     return RCC->AHB2HENR;
1286:src-gen/sr5e1/clock.h **** }
1287:src-gen/sr5e1/clock.h **** 
1288:src-gen/sr5e1/clock.h **** /**
1289:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB2 peripheral clock [High Word] is enabled
1290:src-gen/sr5e1/clock.h ****  *
1291:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1292:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1293:src-gen/sr5e1/clock.h ****  *
1294:src-gen/sr5e1/clock.h ****  * @api
1295:src-gen/sr5e1/clock.h ****  */
1296:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB2H(uint32_t m) {
1297:src-gen/sr5e1/clock.h **** 
1298:src-gen/sr5e1/clock.h ****     return (((RCC->AHB2HENR & m) == m) ? true : false);
1299:src-gen/sr5e1/clock.h **** }
1300:src-gen/sr5e1/clock.h **** 
1301:src-gen/sr5e1/clock.h **** /**
1302:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB2 peripherals [High Word]
1303:src-gen/sr5e1/clock.h ****  *
1304:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1305:src-gen/sr5e1/clock.h ****  *
1306:src-gen/sr5e1/clock.h ****  * @api
1307:src-gen/sr5e1/clock.h ****  */
1308:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB2H(uint32_t m) {
1309:src-gen/sr5e1/clock.h **** 
1310:src-gen/sr5e1/clock.h ****     RCC->AHB2HRSTR |= m;
1311:src-gen/sr5e1/clock.h ****     RCC->AHB2HRSTR &= ~m;
1312:src-gen/sr5e1/clock.h ****     (void)RCC->AHB2HRSTR;
1313:src-gen/sr5e1/clock.h **** }
1314:src-gen/sr5e1/clock.h **** 
1315:src-gen/sr5e1/clock.h **** /**
1316:src-gen/sr5e1/clock.h ****  * @brief   Enables APB1 peripherals clock [Low Word]
1317:src-gen/sr5e1/clock.h ****  *
1318:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1319:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1320:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1321:src-gen/sr5e1/clock.h ****  * @return              value of register APB1LENR after the update
1322:src-gen/sr5e1/clock.h ****  *
1323:src-gen/sr5e1/clock.h ****  * @api
1324:src-gen/sr5e1/clock.h ****  */
1325:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_APB1L(bool smode, uint32_t m) {
1326:src-gen/sr5e1/clock.h **** 
1327:src-gen/sr5e1/clock.h ****     RCC->APB1LENR |= m;
1328:src-gen/sr5e1/clock.h ****     if (smode) {
1329:src-gen/sr5e1/clock.h ****         RCC->C1_APB1LSMENR |= m;
1330:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1331:src-gen/sr5e1/clock.h ****         RCC->C2_APB1LSMENR |= m;
1332:src-gen/sr5e1/clock.h **** #endif
1333:src-gen/sr5e1/clock.h ****     }
1334:src-gen/sr5e1/clock.h ****     else {
1335:src-gen/sr5e1/clock.h ****         RCC->C1_APB1LSMENR &= ~m;
1336:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1337:src-gen/sr5e1/clock.h ****         RCC->C2_APB1LSMENR &= ~m;
1338:src-gen/sr5e1/clock.h **** #endif
1339:src-gen/sr5e1/clock.h ****     }
1340:src-gen/sr5e1/clock.h **** 
1341:src-gen/sr5e1/clock.h ****     return RCC->APB1LENR;
1342:src-gen/sr5e1/clock.h **** }
1343:src-gen/sr5e1/clock.h **** 
1344:src-gen/sr5e1/clock.h **** /**
1345:src-gen/sr5e1/clock.h ****  * @brief   Disables APB1 peripherals clock [Low Word]
1346:src-gen/sr5e1/clock.h ****  *
1347:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1348:src-gen/sr5e1/clock.h ****  * @return              value of register APB1LENR after the update
1349:src-gen/sr5e1/clock.h ****  *
1350:src-gen/sr5e1/clock.h ****  * @api
1351:src-gen/sr5e1/clock.h ****  */
1352:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_APB1L(uint32_t m) {
1353:src-gen/sr5e1/clock.h **** 
1354:src-gen/sr5e1/clock.h ****     RCC->APB1LENR &= ~m;
1355:src-gen/sr5e1/clock.h ****     RCC->C1_APB1LSMENR &= ~m;
1356:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1357:src-gen/sr5e1/clock.h ****     RCC->C2_APB1LSMENR &= ~m;
1358:src-gen/sr5e1/clock.h **** #endif
1359:src-gen/sr5e1/clock.h **** 
1360:src-gen/sr5e1/clock.h ****     return RCC->APB1LENR;
1361:src-gen/sr5e1/clock.h **** }
1362:src-gen/sr5e1/clock.h **** 
1363:src-gen/sr5e1/clock.h **** /**
1364:src-gen/sr5e1/clock.h ****  * @brief   Checks if APB1 peripheral clock [Low Word] is enabled
1365:src-gen/sr5e1/clock.h ****  *
1366:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1367:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1368:src-gen/sr5e1/clock.h ****  *
1369:src-gen/sr5e1/clock.h ****  * @api
1370:src-gen/sr5e1/clock.h ****  */
1371:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_APB1L(uint32_t m) {
1372:src-gen/sr5e1/clock.h **** 
1373:src-gen/sr5e1/clock.h ****     return (((RCC->APB1LENR & m) == m) ? true : false);
1374:src-gen/sr5e1/clock.h **** }
1375:src-gen/sr5e1/clock.h **** 
1376:src-gen/sr5e1/clock.h **** /**
1377:src-gen/sr5e1/clock.h ****  * @brief   Resets APB1 peripherals [Low Word]
1378:src-gen/sr5e1/clock.h ****  *
1379:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1380:src-gen/sr5e1/clock.h ****  *
1381:src-gen/sr5e1/clock.h ****  * @api
1382:src-gen/sr5e1/clock.h ****  */
1383:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_APB1L(uint32_t m) {
1384:src-gen/sr5e1/clock.h **** 
1385:src-gen/sr5e1/clock.h ****     RCC->APB1LRSTR |= m;
1386:src-gen/sr5e1/clock.h ****     RCC->APB1LRSTR &= ~m;
1387:src-gen/sr5e1/clock.h ****     (void)RCC->APB1LRSTR;
1388:src-gen/sr5e1/clock.h **** }
1389:src-gen/sr5e1/clock.h **** 
1390:src-gen/sr5e1/clock.h **** /**
1391:src-gen/sr5e1/clock.h ****  * @brief   Enables APB2 peripherals clock [Low Word]
1392:src-gen/sr5e1/clock.h ****  *
1393:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1394:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1395:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1396:src-gen/sr5e1/clock.h ****  * @return              value of register APB2LENR after the update
1397:src-gen/sr5e1/clock.h ****  *
1398:src-gen/sr5e1/clock.h ****  * @api
1399:src-gen/sr5e1/clock.h ****  */
1400:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_APB2L(bool smode, uint32_t m) {
1401:src-gen/sr5e1/clock.h **** 
1402:src-gen/sr5e1/clock.h ****     RCC->APB2LENR |= m;
 197              		.loc 2 1402 19
 198 0020 4FF08843 		mov	r3, #1140850688
 199 0024 D3F88820 		ldr	r2, [r3, #136]
 200 0028 4FF08841 		mov	r1, #1140850688
 201 002c 089B     		ldr	r3, [sp, #32]
 202 002e 1343     		orrs	r3, r3, r2
 203 0030 C1F88830 		str	r3, [r1, #136]
1403:src-gen/sr5e1/clock.h ****     if (smode) {
 204              		.loc 2 1403 8
 205 0034 9DF82630 		ldrb	r3, [sp, #38]	@ zero_extendqisi2
 206 0038 002B     		cmp	r3, #0
 207 003a 14D0     		beq	.L19
1404:src-gen/sr5e1/clock.h ****         RCC->C1_APB2LSMENR |= m;
 208              		.loc 2 1404 28
 209 003c 4FF08843 		mov	r3, #1140850688
 210 0040 D3F8A820 		ldr	r2, [r3, #168]
 211 0044 4FF08841 		mov	r1, #1140850688
 212 0048 089B     		ldr	r3, [sp, #32]
 213 004a 1343     		orrs	r3, r3, r2
 214 004c C1F8A830 		str	r3, [r1, #168]
1405:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1406:src-gen/sr5e1/clock.h ****         RCC->C2_APB2LSMENR |= m;
 215              		.loc 2 1406 28
 216 0050 4FF08843 		mov	r3, #1140850688
 217 0054 D3F8C820 		ldr	r2, [r3, #200]
 218 0058 4FF08841 		mov	r1, #1140850688
 219 005c 089B     		ldr	r3, [sp, #32]
 220 005e 1343     		orrs	r3, r3, r2
 221 0060 C1F8C830 		str	r3, [r1, #200]
 222 0064 15E0     		b	.L20
 223              	.L19:
1407:src-gen/sr5e1/clock.h **** #endif
1408:src-gen/sr5e1/clock.h ****     }
1409:src-gen/sr5e1/clock.h ****     else {
1410:src-gen/sr5e1/clock.h ****         RCC->C1_APB2LSMENR &= ~m;
 224              		.loc 2 1410 28
 225 0066 4FF08843 		mov	r3, #1140850688
 226 006a D3F8A820 		ldr	r2, [r3, #168]
 227              		.loc 2 1410 31
 228 006e 089B     		ldr	r3, [sp, #32]
 229 0070 DB43     		mvns	r3, r3
 230              		.loc 2 1410 28
 231 0072 4FF08841 		mov	r1, #1140850688
 232 0076 1340     		ands	r3, r3, r2
 233 0078 C1F8A830 		str	r3, [r1, #168]
1411:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1412:src-gen/sr5e1/clock.h ****         RCC->C2_APB2LSMENR &= ~m;
 234              		.loc 2 1412 28
 235 007c 4FF08843 		mov	r3, #1140850688
 236 0080 D3F8C820 		ldr	r2, [r3, #200]
 237              		.loc 2 1412 31
 238 0084 089B     		ldr	r3, [sp, #32]
 239 0086 DB43     		mvns	r3, r3
 240              		.loc 2 1412 28
 241 0088 4FF08841 		mov	r1, #1140850688
 242 008c 1340     		ands	r3, r3, r2
 243 008e C1F8C830 		str	r3, [r1, #200]
 244              	.L20:
1413:src-gen/sr5e1/clock.h **** #endif
1414:src-gen/sr5e1/clock.h ****     }
1415:src-gen/sr5e1/clock.h **** 
1416:src-gen/sr5e1/clock.h ****     return RCC->APB2LENR;
 245              		.loc 2 1416 15
 246 0092 4FF08843 		mov	r3, #1140850688
 247 0096 D3F88830 		ldr	r3, [r3, #136]
 248              	.LBE53:
 249              	.LBE52:
1417:src-gen/sr5e1/clock.h **** }
1418:src-gen/sr5e1/clock.h **** 
1419:src-gen/sr5e1/clock.h **** /**
1420:src-gen/sr5e1/clock.h ****  * @brief   Disables APB2 peripherals clock [Low Word]
1421:src-gen/sr5e1/clock.h ****  *
1422:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1423:src-gen/sr5e1/clock.h ****  * @return              value of register APB2LENR after the update
1424:src-gen/sr5e1/clock.h ****  *
1425:src-gen/sr5e1/clock.h ****  * @api
1426:src-gen/sr5e1/clock.h ****  */
1427:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_APB2L(uint32_t m) {
1428:src-gen/sr5e1/clock.h **** 
1429:src-gen/sr5e1/clock.h ****     RCC->APB2LENR &= ~m;
1430:src-gen/sr5e1/clock.h ****     RCC->C1_APB2LSMENR &= ~m;
1431:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1432:src-gen/sr5e1/clock.h ****     RCC->C2_APB2LSMENR &= ~m;
1433:src-gen/sr5e1/clock.h **** #endif
1434:src-gen/sr5e1/clock.h **** 
1435:src-gen/sr5e1/clock.h ****     return RCC->APB2LENR;
1436:src-gen/sr5e1/clock.h **** }
1437:src-gen/sr5e1/clock.h **** 
1438:src-gen/sr5e1/clock.h **** /**
1439:src-gen/sr5e1/clock.h ****  * @brief   Checks if APB2 peripheral clock [Low Word] is enabled
1440:src-gen/sr5e1/clock.h ****  *
1441:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1442:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1443:src-gen/sr5e1/clock.h ****  *
1444:src-gen/sr5e1/clock.h ****  * @api
1445:src-gen/sr5e1/clock.h ****  */
1446:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_APB2L(uint32_t m) {
1447:src-gen/sr5e1/clock.h **** 
1448:src-gen/sr5e1/clock.h ****     return (((RCC->APB2LENR & m) == m) ? true : false);
1449:src-gen/sr5e1/clock.h **** }
1450:src-gen/sr5e1/clock.h **** 
1451:src-gen/sr5e1/clock.h **** /**
1452:src-gen/sr5e1/clock.h ****  * @brief   Resets APB2 peripherals [Low Word]
1453:src-gen/sr5e1/clock.h ****  *
1454:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1455:src-gen/sr5e1/clock.h ****  *
1456:src-gen/sr5e1/clock.h ****  * @api
1457:src-gen/sr5e1/clock.h ****  */
1458:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_APB2L(uint32_t m) {
1459:src-gen/sr5e1/clock.h **** 
1460:src-gen/sr5e1/clock.h ****     RCC->APB2LRSTR |= m;
1461:src-gen/sr5e1/clock.h ****     RCC->APB2LRSTR &= ~m;
1462:src-gen/sr5e1/clock.h ****     (void)RCC->APB2LRSTR;
1463:src-gen/sr5e1/clock.h **** }
1464:src-gen/sr5e1/clock.h **** 
1465:src-gen/sr5e1/clock.h **** /**
1466:src-gen/sr5e1/clock.h ****  * @brief   Enables APB2 peripherals clock [High Word]
1467:src-gen/sr5e1/clock.h ****  *
1468:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1469:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1470:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1471:src-gen/sr5e1/clock.h ****  * @return              value of register APB2HENR after the update
1472:src-gen/sr5e1/clock.h ****  *
1473:src-gen/sr5e1/clock.h ****  * @api
1474:src-gen/sr5e1/clock.h ****  */
1475:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_APB2H(bool smode, uint32_t m) {
1476:src-gen/sr5e1/clock.h **** 
1477:src-gen/sr5e1/clock.h ****     RCC->APB2HENR |= m;
1478:src-gen/sr5e1/clock.h ****     if (smode) {
1479:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
1480:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1481:src-gen/sr5e1/clock.h ****         RCC->C2_APB2HSMENR |= m;
1482:src-gen/sr5e1/clock.h **** #endif
1483:src-gen/sr5e1/clock.h ****     }
1484:src-gen/sr5e1/clock.h ****     else {
1485:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR &= ~m;
1486:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1487:src-gen/sr5e1/clock.h ****         RCC->C2_APB2HSMENR &= ~m;
1488:src-gen/sr5e1/clock.h **** #endif
1489:src-gen/sr5e1/clock.h ****     }
1490:src-gen/sr5e1/clock.h **** 
1491:src-gen/sr5e1/clock.h ****     return RCC->APB2HENR;
1492:src-gen/sr5e1/clock.h **** }
1493:src-gen/sr5e1/clock.h **** 
1494:src-gen/sr5e1/clock.h **** /**
1495:src-gen/sr5e1/clock.h ****  * @brief   Disables APB2 peripherals clock [High Word]
1496:src-gen/sr5e1/clock.h ****  *
1497:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1498:src-gen/sr5e1/clock.h ****  * @return              value of register APB2HENR after the update
1499:src-gen/sr5e1/clock.h ****  *
1500:src-gen/sr5e1/clock.h ****  * @api
1501:src-gen/sr5e1/clock.h ****  */
1502:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_APB2H(uint32_t m) {
1503:src-gen/sr5e1/clock.h **** 
1504:src-gen/sr5e1/clock.h ****     RCC->APB2HENR &= ~m;
1505:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
1506:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1507:src-gen/sr5e1/clock.h ****     RCC->C2_APB2HSMENR &= ~m;
1508:src-gen/sr5e1/clock.h **** #endif
1509:src-gen/sr5e1/clock.h **** 
1510:src-gen/sr5e1/clock.h ****     return RCC->APB2HENR;
1511:src-gen/sr5e1/clock.h **** }
1512:src-gen/sr5e1/clock.h **** 
1513:src-gen/sr5e1/clock.h **** /**
1514:src-gen/sr5e1/clock.h ****  * @brief   Checks if APB2 peripheral clock [High Word] is enabled
1515:src-gen/sr5e1/clock.h ****  *
1516:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1517:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1518:src-gen/sr5e1/clock.h ****  *
1519:src-gen/sr5e1/clock.h ****  * @api
1520:src-gen/sr5e1/clock.h ****  */
1521:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_APB2H(uint32_t m) {
1522:src-gen/sr5e1/clock.h **** 
1523:src-gen/sr5e1/clock.h ****     return (((RCC->APB2HENR & m) == m) ? true : false);
1524:src-gen/sr5e1/clock.h **** }
1525:src-gen/sr5e1/clock.h **** 
1526:src-gen/sr5e1/clock.h **** /**
1527:src-gen/sr5e1/clock.h ****  * @brief   Resets APB2 peripherals [High Word]
1528:src-gen/sr5e1/clock.h ****  *
1529:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1530:src-gen/sr5e1/clock.h ****  *
1531:src-gen/sr5e1/clock.h ****  * @api
1532:src-gen/sr5e1/clock.h ****  */
1533:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_APB2H(uint32_t m) {
1534:src-gen/sr5e1/clock.h **** 
1535:src-gen/sr5e1/clock.h ****     RCC->APB2HRSTR |= m;
1536:src-gen/sr5e1/clock.h ****     RCC->APB2HRSTR &= ~m;
1537:src-gen/sr5e1/clock.h ****     (void)RCC->APB2HRSTR;
1538:src-gen/sr5e1/clock.h **** }
1539:src-gen/sr5e1/clock.h **** 
1540:src-gen/sr5e1/clock.h **** /**
1541:src-gen/sr5e1/clock.h ****  * @brief   Enables CMU clock
1542:src-gen/sr5e1/clock.h ****  *
1543:src-gen/sr5e1/clock.h ****  * @param[in] m         CMU clock to be enabled
1544:src-gen/sr5e1/clock.h ****  * @return              value of register CMUR after the update
1545:src-gen/sr5e1/clock.h ****  *
1546:src-gen/sr5e1/clock.h ****  * @api
1547:src-gen/sr5e1/clock.h ****  */
1548:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_CMU(uint32_t m) {
1549:src-gen/sr5e1/clock.h **** 
1550:src-gen/sr5e1/clock.h ****     RCC->CMUR |= m;
1551:src-gen/sr5e1/clock.h **** 
1552:src-gen/sr5e1/clock.h ****     return RCC->CMUR;
1553:src-gen/sr5e1/clock.h **** }
1554:src-gen/sr5e1/clock.h **** 
1555:src-gen/sr5e1/clock.h **** /**
1556:src-gen/sr5e1/clock.h ****  * @brief   Disables CMU clock
1557:src-gen/sr5e1/clock.h ****  *
1558:src-gen/sr5e1/clock.h ****  * @param[in] m         CMU clock to be disabled
1559:src-gen/sr5e1/clock.h ****  * @return              value of register CMUR after the update
1560:src-gen/sr5e1/clock.h ****  *
1561:src-gen/sr5e1/clock.h ****  * @api
1562:src-gen/sr5e1/clock.h ****  */
1563:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_CMU(uint32_t m) {
1564:src-gen/sr5e1/clock.h **** 
1565:src-gen/sr5e1/clock.h ****     RCC->CMUR &= ~m;
1566:src-gen/sr5e1/clock.h **** 
1567:src-gen/sr5e1/clock.h ****     return RCC->CMUR;
1568:src-gen/sr5e1/clock.h **** }
1569:src-gen/sr5e1/clock.h **** 
1570:src-gen/sr5e1/clock.h **** /**
1571:src-gen/sr5e1/clock.h ****  * @brief   Checks if CMU clock is enabled
1572:src-gen/sr5e1/clock.h ****  *
1573:src-gen/sr5e1/clock.h ****  * @param[in] m         CMU clock to be checked
1574:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1575:src-gen/sr5e1/clock.h ****  *
1576:src-gen/sr5e1/clock.h ****  * @api
1577:src-gen/sr5e1/clock.h ****  */
1578:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_CMU(uint32_t m) {
1579:src-gen/sr5e1/clock.h **** 
1580:src-gen/sr5e1/clock.h ****     return (((RCC->CMUR & m) == m) ? true : false);
1581:src-gen/sr5e1/clock.h **** }
1582:src-gen/sr5e1/clock.h **** 
1583:src-gen/sr5e1/clock.h **** /**
1584:src-gen/sr5e1/clock.h ****  * @brief   Resets CMU
1585:src-gen/sr5e1/clock.h ****  *
1586:src-gen/sr5e1/clock.h ****  * @param[in] m         CMU to reset
1587:src-gen/sr5e1/clock.h ****  *
1588:src-gen/sr5e1/clock.h ****  * @api
1589:src-gen/sr5e1/clock.h ****  */
1590:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_CMU(uint32_t m) {
1591:src-gen/sr5e1/clock.h **** 
1592:src-gen/sr5e1/clock.h ****     RCC->CMUR |= m;
1593:src-gen/sr5e1/clock.h ****     (void)RCC->CMUR;
1594:src-gen/sr5e1/clock.h **** }
1595:src-gen/sr5e1/clock.h **** 
1596:src-gen/sr5e1/clock.h **** /**
1597:src-gen/sr5e1/clock.h ****  * @brief   Enables DMA1 clock
1598:src-gen/sr5e1/clock.h ****  *
1599:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1600:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1601:src-gen/sr5e1/clock.h ****  *
1602:src-gen/sr5e1/clock.h ****  * @api
1603:src-gen/sr5e1/clock.h ****  */
1604:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DMA1(bool smode) {
1605:src-gen/sr5e1/clock.h **** 
1606:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_DMA1);
1607:src-gen/sr5e1/clock.h **** }
1608:src-gen/sr5e1/clock.h **** 
1609:src-gen/sr5e1/clock.h **** /**
1610:src-gen/sr5e1/clock.h ****  * @brief   Disables DMA1 clock
1611:src-gen/sr5e1/clock.h ****  *
1612:src-gen/sr5e1/clock.h ****  * @api
1613:src-gen/sr5e1/clock.h ****  */
1614:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DMA1(void) {
1615:src-gen/sr5e1/clock.h **** 
1616:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_DMA1);
1617:src-gen/sr5e1/clock.h **** }
1618:src-gen/sr5e1/clock.h **** 
1619:src-gen/sr5e1/clock.h **** /**
1620:src-gen/sr5e1/clock.h ****  * @brief   Checks if DMA1 clock is enabled
1621:src-gen/sr5e1/clock.h ****  *
1622:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1623:src-gen/sr5e1/clock.h ****  *
1624:src-gen/sr5e1/clock.h ****  * @api
1625:src-gen/sr5e1/clock.h ****  */
1626:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DMA1(void) {
1627:src-gen/sr5e1/clock.h **** 
1628:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_DMA1);
1629:src-gen/sr5e1/clock.h **** }
1630:src-gen/sr5e1/clock.h **** 
1631:src-gen/sr5e1/clock.h **** /**
1632:src-gen/sr5e1/clock.h ****  * @brief   Resets DMA1
1633:src-gen/sr5e1/clock.h ****  *
1634:src-gen/sr5e1/clock.h ****  * @api
1635:src-gen/sr5e1/clock.h ****  */
1636:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DMA1(void) {
1637:src-gen/sr5e1/clock.h **** 
1638:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_DMA1);
1639:src-gen/sr5e1/clock.h **** }
1640:src-gen/sr5e1/clock.h **** 
1641:src-gen/sr5e1/clock.h **** /**
1642:src-gen/sr5e1/clock.h ****  * @brief   Enables DMA2 clock
1643:src-gen/sr5e1/clock.h ****  *
1644:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1645:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1646:src-gen/sr5e1/clock.h ****  *
1647:src-gen/sr5e1/clock.h ****  * @api
1648:src-gen/sr5e1/clock.h ****  */
1649:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DMA2(bool smode) {
1650:src-gen/sr5e1/clock.h **** 
1651:src-gen/sr5e1/clock.h ****     clock_enable_AHB1L(smode, RCC_AHB1LENR_DMA2);
1652:src-gen/sr5e1/clock.h **** }
1653:src-gen/sr5e1/clock.h **** 
1654:src-gen/sr5e1/clock.h **** /**
1655:src-gen/sr5e1/clock.h ****  * @brief   Disables DMA2 clock
1656:src-gen/sr5e1/clock.h ****  *
1657:src-gen/sr5e1/clock.h ****  * @api
1658:src-gen/sr5e1/clock.h ****  */
1659:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DMA2(void) {
1660:src-gen/sr5e1/clock.h **** 
1661:src-gen/sr5e1/clock.h ****     clock_disable_AHB1L(RCC_AHB1LENR_DMA2);
1662:src-gen/sr5e1/clock.h **** }
1663:src-gen/sr5e1/clock.h **** 
1664:src-gen/sr5e1/clock.h **** /**
1665:src-gen/sr5e1/clock.h ****  * @brief   Checks if DMA2 clock is enabled
1666:src-gen/sr5e1/clock.h ****  *
1667:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1668:src-gen/sr5e1/clock.h ****  *
1669:src-gen/sr5e1/clock.h ****  * @api
1670:src-gen/sr5e1/clock.h ****  */
1671:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DMA2(void) {
1672:src-gen/sr5e1/clock.h **** 
1673:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1L(RCC_AHB1LENR_DMA2);
1674:src-gen/sr5e1/clock.h **** }
1675:src-gen/sr5e1/clock.h **** 
1676:src-gen/sr5e1/clock.h **** /**
1677:src-gen/sr5e1/clock.h ****  * @brief   Resets DMA2
1678:src-gen/sr5e1/clock.h ****  *
1679:src-gen/sr5e1/clock.h ****  * @api
1680:src-gen/sr5e1/clock.h ****  */
1681:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DMA2(void) {
1682:src-gen/sr5e1/clock.h **** 
1683:src-gen/sr5e1/clock.h ****     clock_reset_AHB1L(RCC_AHB1LRSTR_DMA2);
1684:src-gen/sr5e1/clock.h **** }
1685:src-gen/sr5e1/clock.h **** 
1686:src-gen/sr5e1/clock.h **** /**
1687:src-gen/sr5e1/clock.h ****  * @brief   Enables DMAMUX1 clock
1688:src-gen/sr5e1/clock.h ****  *
1689:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1690:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1691:src-gen/sr5e1/clock.h ****  *
1692:src-gen/sr5e1/clock.h ****  * @api
1693:src-gen/sr5e1/clock.h ****  */
1694:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DMAMUX1(bool smode) {
1695:src-gen/sr5e1/clock.h **** 
1696:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_DMAMUX1);
1697:src-gen/sr5e1/clock.h **** }
1698:src-gen/sr5e1/clock.h **** 
1699:src-gen/sr5e1/clock.h **** /**
1700:src-gen/sr5e1/clock.h ****  * @brief   Disables DMAMUX1 clock
1701:src-gen/sr5e1/clock.h ****  *
1702:src-gen/sr5e1/clock.h ****  * @api
1703:src-gen/sr5e1/clock.h ****  */
1704:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DMAMUX1(void) {
1705:src-gen/sr5e1/clock.h **** 
1706:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_DMAMUX1);
1707:src-gen/sr5e1/clock.h **** }
1708:src-gen/sr5e1/clock.h **** 
1709:src-gen/sr5e1/clock.h **** /**
1710:src-gen/sr5e1/clock.h ****  * @brief   Checks if DMAMUX1 clock is enabled
1711:src-gen/sr5e1/clock.h ****  *
1712:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1713:src-gen/sr5e1/clock.h ****  *
1714:src-gen/sr5e1/clock.h ****  * @api
1715:src-gen/sr5e1/clock.h ****  */
1716:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DMAMUX1(void) {
1717:src-gen/sr5e1/clock.h **** 
1718:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_DMAMUX1);
1719:src-gen/sr5e1/clock.h **** }
1720:src-gen/sr5e1/clock.h **** 
1721:src-gen/sr5e1/clock.h **** /**
1722:src-gen/sr5e1/clock.h ****  * @brief   Resets DMAMUX1
1723:src-gen/sr5e1/clock.h ****  *
1724:src-gen/sr5e1/clock.h ****  * @api
1725:src-gen/sr5e1/clock.h ****  */
1726:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DMAMUX1(void) {
1727:src-gen/sr5e1/clock.h **** 
1728:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_DMAMUX1);
1729:src-gen/sr5e1/clock.h **** }
1730:src-gen/sr5e1/clock.h **** 
1731:src-gen/sr5e1/clock.h **** /**
1732:src-gen/sr5e1/clock.h ****  * @brief   Enables CORDIC clock
1733:src-gen/sr5e1/clock.h ****  *
1734:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1735:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1736:src-gen/sr5e1/clock.h ****  *
1737:src-gen/sr5e1/clock.h ****  * @api
1738:src-gen/sr5e1/clock.h ****  */
1739:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_CORDIC(bool smode) {
1740:src-gen/sr5e1/clock.h **** 
1741:src-gen/sr5e1/clock.h ****     clock_enable_AHB1L(smode, RCC_AHB1LENR_CORDIC);
1742:src-gen/sr5e1/clock.h **** }
1743:src-gen/sr5e1/clock.h **** 
1744:src-gen/sr5e1/clock.h **** /**
1745:src-gen/sr5e1/clock.h ****  * @brief   Disables CORDIC clock
1746:src-gen/sr5e1/clock.h ****  *
1747:src-gen/sr5e1/clock.h ****  * @api
1748:src-gen/sr5e1/clock.h ****  */
1749:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_CORDIC(void) {
1750:src-gen/sr5e1/clock.h **** 
1751:src-gen/sr5e1/clock.h ****     clock_disable_AHB1L(RCC_AHB1LENR_CORDIC);
1752:src-gen/sr5e1/clock.h **** }
1753:src-gen/sr5e1/clock.h **** 
1754:src-gen/sr5e1/clock.h **** /**
1755:src-gen/sr5e1/clock.h ****  * @brief   Checks if CORDIC clock is enabled
1756:src-gen/sr5e1/clock.h ****  *
1757:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1758:src-gen/sr5e1/clock.h ****  *
1759:src-gen/sr5e1/clock.h ****  * @api
1760:src-gen/sr5e1/clock.h ****  */
1761:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_CORDIC(void) {
1762:src-gen/sr5e1/clock.h **** 
1763:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1L(RCC_AHB1LENR_CORDIC);
1764:src-gen/sr5e1/clock.h **** }
1765:src-gen/sr5e1/clock.h **** 
1766:src-gen/sr5e1/clock.h **** /**
1767:src-gen/sr5e1/clock.h ****  * @brief   Resets CORDIC
1768:src-gen/sr5e1/clock.h ****  *
1769:src-gen/sr5e1/clock.h ****  * @api
1770:src-gen/sr5e1/clock.h ****  */
1771:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_CORDIC(void) {
1772:src-gen/sr5e1/clock.h **** 
1773:src-gen/sr5e1/clock.h ****     clock_reset_AHB1L(RCC_AHB1LRSTR_CORDIC);
1774:src-gen/sr5e1/clock.h **** }
1775:src-gen/sr5e1/clock.h **** 
1776:src-gen/sr5e1/clock.h **** /**
1777:src-gen/sr5e1/clock.h ****  * @brief   Enables CRC clock
1778:src-gen/sr5e1/clock.h ****  *
1779:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1780:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1781:src-gen/sr5e1/clock.h ****  *
1782:src-gen/sr5e1/clock.h ****  * @api
1783:src-gen/sr5e1/clock.h ****  */
1784:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_CRC(bool smode) {
1785:src-gen/sr5e1/clock.h **** 
1786:src-gen/sr5e1/clock.h ****     clock_enable_AHB1L(smode, RCC_AHB1LENR_CRC);
1787:src-gen/sr5e1/clock.h **** }
1788:src-gen/sr5e1/clock.h **** 
1789:src-gen/sr5e1/clock.h **** /**
1790:src-gen/sr5e1/clock.h ****  * @brief   Disables CRC clock
1791:src-gen/sr5e1/clock.h ****  *
1792:src-gen/sr5e1/clock.h ****  * @api
1793:src-gen/sr5e1/clock.h ****  */
1794:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_CRC(void) {
1795:src-gen/sr5e1/clock.h **** 
1796:src-gen/sr5e1/clock.h ****     clock_disable_AHB1L(RCC_AHB1LENR_CRC);
1797:src-gen/sr5e1/clock.h **** }
1798:src-gen/sr5e1/clock.h **** 
1799:src-gen/sr5e1/clock.h **** /**
1800:src-gen/sr5e1/clock.h ****  * @brief   Checks if CRC clock is enabled
1801:src-gen/sr5e1/clock.h ****  *
1802:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1803:src-gen/sr5e1/clock.h ****  *
1804:src-gen/sr5e1/clock.h ****  * @api
1805:src-gen/sr5e1/clock.h ****  */
1806:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_CRC(void) {
1807:src-gen/sr5e1/clock.h **** 
1808:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1L(RCC_AHB1LENR_CRC);
1809:src-gen/sr5e1/clock.h **** }
1810:src-gen/sr5e1/clock.h **** 
1811:src-gen/sr5e1/clock.h **** /**
1812:src-gen/sr5e1/clock.h ****  * @brief   Resets CRC
1813:src-gen/sr5e1/clock.h ****  *
1814:src-gen/sr5e1/clock.h ****  * @api
1815:src-gen/sr5e1/clock.h ****  */
1816:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_CRC(void) {
1817:src-gen/sr5e1/clock.h **** 
1818:src-gen/sr5e1/clock.h ****     clock_reset_AHB1L(RCC_AHB1LRSTR_CRC);
1819:src-gen/sr5e1/clock.h **** }
1820:src-gen/sr5e1/clock.h **** 
1821:src-gen/sr5e1/clock.h **** /**
1822:src-gen/sr5e1/clock.h ****  * @brief   Enables HSEM clock
1823:src-gen/sr5e1/clock.h ****  *
1824:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1825:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1826:src-gen/sr5e1/clock.h ****  *
1827:src-gen/sr5e1/clock.h ****  * @api
1828:src-gen/sr5e1/clock.h ****  */
1829:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_HSEM(bool smode) {
1830:src-gen/sr5e1/clock.h **** 
1831:src-gen/sr5e1/clock.h ****     clock_enable_AHB1L(smode, RCC_AHB1LENR_HSEM);
1832:src-gen/sr5e1/clock.h **** }
1833:src-gen/sr5e1/clock.h **** 
1834:src-gen/sr5e1/clock.h **** /**
1835:src-gen/sr5e1/clock.h ****  * @brief   Disables HSEM clock
1836:src-gen/sr5e1/clock.h ****  *
1837:src-gen/sr5e1/clock.h ****  * @api
1838:src-gen/sr5e1/clock.h ****  */
1839:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_HSEM(void) {
1840:src-gen/sr5e1/clock.h **** 
1841:src-gen/sr5e1/clock.h ****     clock_disable_AHB1L(RCC_AHB1LENR_HSEM);
1842:src-gen/sr5e1/clock.h **** }
1843:src-gen/sr5e1/clock.h **** 
1844:src-gen/sr5e1/clock.h **** /**
1845:src-gen/sr5e1/clock.h ****  * @brief   Checks if HSEM clock is enabled
1846:src-gen/sr5e1/clock.h ****  *
1847:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1848:src-gen/sr5e1/clock.h ****  *
1849:src-gen/sr5e1/clock.h ****  * @api
1850:src-gen/sr5e1/clock.h ****  */
1851:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_HSEM(void) {
1852:src-gen/sr5e1/clock.h **** 
1853:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1L(RCC_AHB1LENR_HSEM);
1854:src-gen/sr5e1/clock.h **** }
1855:src-gen/sr5e1/clock.h **** 
1856:src-gen/sr5e1/clock.h **** /**
1857:src-gen/sr5e1/clock.h ****  * @brief   Resets HSEM
1858:src-gen/sr5e1/clock.h ****  *
1859:src-gen/sr5e1/clock.h ****  * @api
1860:src-gen/sr5e1/clock.h ****  */
1861:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_HSEM(void) {
1862:src-gen/sr5e1/clock.h **** 
1863:src-gen/sr5e1/clock.h ****     clock_reset_AHB1L(RCC_AHB1LRSTR_HSEM);
1864:src-gen/sr5e1/clock.h **** }
1865:src-gen/sr5e1/clock.h **** 
1866:src-gen/sr5e1/clock.h **** /**
1867:src-gen/sr5e1/clock.h ****  * @brief   Enables ADC12 clock
1868:src-gen/sr5e1/clock.h ****  *
1869:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1870:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1871:src-gen/sr5e1/clock.h ****  *
1872:src-gen/sr5e1/clock.h ****  * @api
1873:src-gen/sr5e1/clock.h ****  */
1874:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_ADC12(bool smode) {
1875:src-gen/sr5e1/clock.h **** 
1876:src-gen/sr5e1/clock.h ****     clock_enable_AHB2H(smode, RCC_AHB2HENR_ADC1_ADC2);
1877:src-gen/sr5e1/clock.h **** }
1878:src-gen/sr5e1/clock.h **** 
1879:src-gen/sr5e1/clock.h **** /**
1880:src-gen/sr5e1/clock.h ****  * @brief   Disables ADC12 clock
1881:src-gen/sr5e1/clock.h ****  *
1882:src-gen/sr5e1/clock.h ****  * @api
1883:src-gen/sr5e1/clock.h ****  */
1884:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_ADC12(void) {
1885:src-gen/sr5e1/clock.h **** 
1886:src-gen/sr5e1/clock.h ****     clock_disable_AHB2H(RCC_AHB2HENR_ADC1_ADC2);
1887:src-gen/sr5e1/clock.h **** }
1888:src-gen/sr5e1/clock.h **** 
1889:src-gen/sr5e1/clock.h **** /**
1890:src-gen/sr5e1/clock.h ****  * @brief   Checks if ADC12 clock is enabled
1891:src-gen/sr5e1/clock.h ****  *
1892:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1893:src-gen/sr5e1/clock.h ****  *
1894:src-gen/sr5e1/clock.h ****  * @api
1895:src-gen/sr5e1/clock.h ****  */
1896:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_ADC12(void) {
1897:src-gen/sr5e1/clock.h **** 
1898:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2H(RCC_AHB2HENR_ADC1_ADC2);
1899:src-gen/sr5e1/clock.h **** }
1900:src-gen/sr5e1/clock.h **** 
1901:src-gen/sr5e1/clock.h **** /**
1902:src-gen/sr5e1/clock.h ****  * @brief   Resets ADC12
1903:src-gen/sr5e1/clock.h ****  *
1904:src-gen/sr5e1/clock.h ****  * @api
1905:src-gen/sr5e1/clock.h ****  */
1906:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_ADC12(void) {
1907:src-gen/sr5e1/clock.h **** 
1908:src-gen/sr5e1/clock.h ****     clock_reset_AHB2H(RCC_AHB2HRSTR_ADC1_ADC2);
1909:src-gen/sr5e1/clock.h **** }
1910:src-gen/sr5e1/clock.h **** 
1911:src-gen/sr5e1/clock.h **** /**
1912:src-gen/sr5e1/clock.h ****  * @brief   Enables ADC345 clock
1913:src-gen/sr5e1/clock.h ****  *
1914:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1915:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1916:src-gen/sr5e1/clock.h ****  *
1917:src-gen/sr5e1/clock.h ****  * @api
1918:src-gen/sr5e1/clock.h ****  */
1919:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_ADC345(bool smode) {
1920:src-gen/sr5e1/clock.h **** 
1921:src-gen/sr5e1/clock.h ****     clock_enable_AHB1H(smode, RCC_AHB1HENR_ADC3_ADC4_ADC5);
1922:src-gen/sr5e1/clock.h **** }
1923:src-gen/sr5e1/clock.h **** 
1924:src-gen/sr5e1/clock.h **** /**
1925:src-gen/sr5e1/clock.h ****  * @brief   Disables ADC345 clock
1926:src-gen/sr5e1/clock.h ****  *
1927:src-gen/sr5e1/clock.h ****  * @api
1928:src-gen/sr5e1/clock.h ****  */
1929:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_ADC345(void) {
1930:src-gen/sr5e1/clock.h **** 
1931:src-gen/sr5e1/clock.h ****     clock_disable_AHB1H(RCC_AHB1HENR_ADC3_ADC4_ADC5);
1932:src-gen/sr5e1/clock.h **** }
1933:src-gen/sr5e1/clock.h **** 
1934:src-gen/sr5e1/clock.h **** /**
1935:src-gen/sr5e1/clock.h ****  * @brief   Checks if ADC345 clock is enabled
1936:src-gen/sr5e1/clock.h ****  *
1937:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1938:src-gen/sr5e1/clock.h ****  *
1939:src-gen/sr5e1/clock.h ****  * @api
1940:src-gen/sr5e1/clock.h ****  */
1941:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_ADC345(void) {
1942:src-gen/sr5e1/clock.h **** 
1943:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1H(RCC_AHB1HENR_ADC3_ADC4_ADC5);
1944:src-gen/sr5e1/clock.h **** }
1945:src-gen/sr5e1/clock.h **** 
1946:src-gen/sr5e1/clock.h **** /**
1947:src-gen/sr5e1/clock.h ****  * @brief   Resets ADC345
1948:src-gen/sr5e1/clock.h ****  *
1949:src-gen/sr5e1/clock.h ****  * @api
1950:src-gen/sr5e1/clock.h ****  */
1951:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_ADC345(void) {
1952:src-gen/sr5e1/clock.h **** 
1953:src-gen/sr5e1/clock.h ****     clock_reset_AHB1H(RCC_AHB1HRSTR_ADC3_ADC4_ADC5);
1954:src-gen/sr5e1/clock.h **** }
1955:src-gen/sr5e1/clock.h **** 
1956:src-gen/sr5e1/clock.h **** /**
1957:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOA clock
1958:src-gen/sr5e1/clock.h ****  *
1959:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1960:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1961:src-gen/sr5e1/clock.h ****  *
1962:src-gen/sr5e1/clock.h ****  * @api
1963:src-gen/sr5e1/clock.h ****  */
1964:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOA(bool smode) {
1965:src-gen/sr5e1/clock.h **** 
1966:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOA);
1967:src-gen/sr5e1/clock.h **** }
1968:src-gen/sr5e1/clock.h **** 
1969:src-gen/sr5e1/clock.h **** /**
1970:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOA clock
1971:src-gen/sr5e1/clock.h ****  *
1972:src-gen/sr5e1/clock.h ****  * @api
1973:src-gen/sr5e1/clock.h ****  */
1974:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOA(void) {
1975:src-gen/sr5e1/clock.h **** 
1976:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOA);
1977:src-gen/sr5e1/clock.h **** }
1978:src-gen/sr5e1/clock.h **** 
1979:src-gen/sr5e1/clock.h **** /**
1980:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOA clock is enabled
1981:src-gen/sr5e1/clock.h ****  *
1982:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1983:src-gen/sr5e1/clock.h ****  *
1984:src-gen/sr5e1/clock.h ****  * @api
1985:src-gen/sr5e1/clock.h ****  */
1986:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOA(void) {
1987:src-gen/sr5e1/clock.h **** 
1988:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOA);
1989:src-gen/sr5e1/clock.h **** }
1990:src-gen/sr5e1/clock.h **** 
1991:src-gen/sr5e1/clock.h **** /**
1992:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOA
1993:src-gen/sr5e1/clock.h ****  *
1994:src-gen/sr5e1/clock.h ****  * @api
1995:src-gen/sr5e1/clock.h ****  */
1996:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOA(void) {
1997:src-gen/sr5e1/clock.h **** 
1998:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOA);
1999:src-gen/sr5e1/clock.h **** }
2000:src-gen/sr5e1/clock.h **** 
2001:src-gen/sr5e1/clock.h **** /**
2002:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOB clock
2003:src-gen/sr5e1/clock.h ****  *
2004:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2005:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2006:src-gen/sr5e1/clock.h ****  *
2007:src-gen/sr5e1/clock.h ****  * @api
2008:src-gen/sr5e1/clock.h ****  */
2009:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOB(bool smode) {
2010:src-gen/sr5e1/clock.h **** 
2011:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOB);
2012:src-gen/sr5e1/clock.h **** }
2013:src-gen/sr5e1/clock.h **** 
2014:src-gen/sr5e1/clock.h **** /**
2015:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOB clock
2016:src-gen/sr5e1/clock.h ****  *
2017:src-gen/sr5e1/clock.h ****  * @api
2018:src-gen/sr5e1/clock.h ****  */
2019:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOB(void) {
2020:src-gen/sr5e1/clock.h **** 
2021:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOB);
2022:src-gen/sr5e1/clock.h **** }
2023:src-gen/sr5e1/clock.h **** 
2024:src-gen/sr5e1/clock.h **** /**
2025:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOB clock is enabled
2026:src-gen/sr5e1/clock.h ****  *
2027:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2028:src-gen/sr5e1/clock.h ****  *
2029:src-gen/sr5e1/clock.h ****  * @api
2030:src-gen/sr5e1/clock.h ****  */
2031:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOB(void) {
2032:src-gen/sr5e1/clock.h **** 
2033:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOB);
2034:src-gen/sr5e1/clock.h **** }
2035:src-gen/sr5e1/clock.h **** 
2036:src-gen/sr5e1/clock.h **** /**
2037:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOB
2038:src-gen/sr5e1/clock.h ****  *
2039:src-gen/sr5e1/clock.h ****  * @api
2040:src-gen/sr5e1/clock.h ****  */
2041:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOB(void) {
2042:src-gen/sr5e1/clock.h **** 
2043:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOB);
2044:src-gen/sr5e1/clock.h **** }
2045:src-gen/sr5e1/clock.h **** 
2046:src-gen/sr5e1/clock.h **** /**
2047:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOC clock
2048:src-gen/sr5e1/clock.h ****  *
2049:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2050:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2051:src-gen/sr5e1/clock.h ****  *
2052:src-gen/sr5e1/clock.h ****  * @api
2053:src-gen/sr5e1/clock.h ****  */
2054:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOC(bool smode) {
2055:src-gen/sr5e1/clock.h **** 
2056:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOC);
2057:src-gen/sr5e1/clock.h **** }
2058:src-gen/sr5e1/clock.h **** 
2059:src-gen/sr5e1/clock.h **** /**
2060:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOC clock
2061:src-gen/sr5e1/clock.h ****  *
2062:src-gen/sr5e1/clock.h ****  * @api
2063:src-gen/sr5e1/clock.h ****  */
2064:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOC(void) {
2065:src-gen/sr5e1/clock.h **** 
2066:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOC);
2067:src-gen/sr5e1/clock.h **** }
2068:src-gen/sr5e1/clock.h **** 
2069:src-gen/sr5e1/clock.h **** /**
2070:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOC clock is enabled
2071:src-gen/sr5e1/clock.h ****  *
2072:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2073:src-gen/sr5e1/clock.h ****  *
2074:src-gen/sr5e1/clock.h ****  * @api
2075:src-gen/sr5e1/clock.h ****  */
2076:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOC(void) {
2077:src-gen/sr5e1/clock.h **** 
2078:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOC);
2079:src-gen/sr5e1/clock.h **** }
2080:src-gen/sr5e1/clock.h **** 
2081:src-gen/sr5e1/clock.h **** /**
2082:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOC
2083:src-gen/sr5e1/clock.h ****  *
2084:src-gen/sr5e1/clock.h ****  * @api
2085:src-gen/sr5e1/clock.h ****  */
2086:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOC(void) {
2087:src-gen/sr5e1/clock.h **** 
2088:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOC);
2089:src-gen/sr5e1/clock.h **** }
2090:src-gen/sr5e1/clock.h **** 
2091:src-gen/sr5e1/clock.h **** /**
2092:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOD clock
2093:src-gen/sr5e1/clock.h ****  *
2094:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2095:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2096:src-gen/sr5e1/clock.h ****  *
2097:src-gen/sr5e1/clock.h ****  * @api
2098:src-gen/sr5e1/clock.h ****  */
2099:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOD(bool smode) {
2100:src-gen/sr5e1/clock.h **** 
2101:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOD);
2102:src-gen/sr5e1/clock.h **** }
2103:src-gen/sr5e1/clock.h **** 
2104:src-gen/sr5e1/clock.h **** /**
2105:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOD clock
2106:src-gen/sr5e1/clock.h ****  *
2107:src-gen/sr5e1/clock.h ****  * @api
2108:src-gen/sr5e1/clock.h ****  */
2109:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOD(void) {
2110:src-gen/sr5e1/clock.h **** 
2111:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOD);
2112:src-gen/sr5e1/clock.h **** }
2113:src-gen/sr5e1/clock.h **** 
2114:src-gen/sr5e1/clock.h **** /**
2115:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOD clock is enabled
2116:src-gen/sr5e1/clock.h ****  *
2117:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2118:src-gen/sr5e1/clock.h ****  *
2119:src-gen/sr5e1/clock.h ****  * @api
2120:src-gen/sr5e1/clock.h ****  */
2121:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOD(void) {
2122:src-gen/sr5e1/clock.h **** 
2123:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOD);
2124:src-gen/sr5e1/clock.h **** }
2125:src-gen/sr5e1/clock.h ****  
2126:src-gen/sr5e1/clock.h **** /**
2127:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOD
2128:src-gen/sr5e1/clock.h ****  *
2129:src-gen/sr5e1/clock.h ****  * @api
2130:src-gen/sr5e1/clock.h ****  */
2131:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOD(void) {
2132:src-gen/sr5e1/clock.h **** 
2133:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOD);
2134:src-gen/sr5e1/clock.h **** }
2135:src-gen/sr5e1/clock.h **** 
2136:src-gen/sr5e1/clock.h **** /**
2137:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOE clock
2138:src-gen/sr5e1/clock.h ****  *
2139:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2140:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2141:src-gen/sr5e1/clock.h ****  *
2142:src-gen/sr5e1/clock.h ****  * @api
2143:src-gen/sr5e1/clock.h ****  */
2144:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOE(bool smode) {
2145:src-gen/sr5e1/clock.h **** 
2146:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOE);
2147:src-gen/sr5e1/clock.h **** }
2148:src-gen/sr5e1/clock.h **** 
2149:src-gen/sr5e1/clock.h **** /**
2150:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOE clock
2151:src-gen/sr5e1/clock.h ****  *
2152:src-gen/sr5e1/clock.h ****  * @api
2153:src-gen/sr5e1/clock.h ****  */
2154:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOE(void) {
2155:src-gen/sr5e1/clock.h **** 
2156:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOE);
2157:src-gen/sr5e1/clock.h **** }
2158:src-gen/sr5e1/clock.h **** 
2159:src-gen/sr5e1/clock.h **** /**
2160:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOE clock is enabled
2161:src-gen/sr5e1/clock.h ****  *
2162:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2163:src-gen/sr5e1/clock.h ****  *
2164:src-gen/sr5e1/clock.h ****  * @api
2165:src-gen/sr5e1/clock.h ****  */
2166:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOE(void) {
2167:src-gen/sr5e1/clock.h **** 
2168:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOE);
2169:src-gen/sr5e1/clock.h **** }
2170:src-gen/sr5e1/clock.h **** 
2171:src-gen/sr5e1/clock.h **** /**
2172:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOE
2173:src-gen/sr5e1/clock.h ****  *
2174:src-gen/sr5e1/clock.h ****  * @api
2175:src-gen/sr5e1/clock.h ****  */
2176:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOE(void) {
2177:src-gen/sr5e1/clock.h **** 
2178:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOE);
2179:src-gen/sr5e1/clock.h **** }
2180:src-gen/sr5e1/clock.h **** 
2181:src-gen/sr5e1/clock.h **** /**
2182:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOF clock
2183:src-gen/sr5e1/clock.h ****  *
2184:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2185:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2186:src-gen/sr5e1/clock.h ****  *
2187:src-gen/sr5e1/clock.h ****  * @api
2188:src-gen/sr5e1/clock.h ****  */
2189:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOF(bool smode) {
2190:src-gen/sr5e1/clock.h **** 
2191:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOF);
2192:src-gen/sr5e1/clock.h **** }
2193:src-gen/sr5e1/clock.h **** 
2194:src-gen/sr5e1/clock.h **** /**
2195:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOF clock
2196:src-gen/sr5e1/clock.h ****  *
2197:src-gen/sr5e1/clock.h ****  * @api
2198:src-gen/sr5e1/clock.h ****  */
2199:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOF(void) {
2200:src-gen/sr5e1/clock.h **** 
2201:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOF);
2202:src-gen/sr5e1/clock.h **** }
2203:src-gen/sr5e1/clock.h **** 
2204:src-gen/sr5e1/clock.h **** /**
2205:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOF clock is enabled
2206:src-gen/sr5e1/clock.h ****  *
2207:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2208:src-gen/sr5e1/clock.h ****  *
2209:src-gen/sr5e1/clock.h ****  * @api
2210:src-gen/sr5e1/clock.h ****  */
2211:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOF(void) {
2212:src-gen/sr5e1/clock.h **** 
2213:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOF);
2214:src-gen/sr5e1/clock.h **** }
2215:src-gen/sr5e1/clock.h **** 
2216:src-gen/sr5e1/clock.h **** /**
2217:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOF
2218:src-gen/sr5e1/clock.h ****  *
2219:src-gen/sr5e1/clock.h ****  * @api
2220:src-gen/sr5e1/clock.h ****  */
2221:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOF(void) {
2222:src-gen/sr5e1/clock.h **** 
2223:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOF);
2224:src-gen/sr5e1/clock.h **** }
2225:src-gen/sr5e1/clock.h **** 
2226:src-gen/sr5e1/clock.h **** /**
2227:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOG clock
2228:src-gen/sr5e1/clock.h ****  *
2229:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2230:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2231:src-gen/sr5e1/clock.h ****  *
2232:src-gen/sr5e1/clock.h ****  * @api
2233:src-gen/sr5e1/clock.h ****  */
2234:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOG(bool smode) {
2235:src-gen/sr5e1/clock.h **** 
2236:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOG);
2237:src-gen/sr5e1/clock.h **** }
2238:src-gen/sr5e1/clock.h **** 
2239:src-gen/sr5e1/clock.h **** /**
2240:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOG clock
2241:src-gen/sr5e1/clock.h ****  *
2242:src-gen/sr5e1/clock.h ****  * @api
2243:src-gen/sr5e1/clock.h ****  */
2244:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOG(void) {
2245:src-gen/sr5e1/clock.h **** 
2246:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOG);
2247:src-gen/sr5e1/clock.h **** }
2248:src-gen/sr5e1/clock.h **** 
2249:src-gen/sr5e1/clock.h **** /**
2250:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOG clock is enabled
2251:src-gen/sr5e1/clock.h ****  *
2252:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2253:src-gen/sr5e1/clock.h ****  *
2254:src-gen/sr5e1/clock.h ****  * @api
2255:src-gen/sr5e1/clock.h ****  */
2256:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOG(void) {
2257:src-gen/sr5e1/clock.h **** 
2258:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOG);
2259:src-gen/sr5e1/clock.h **** }
2260:src-gen/sr5e1/clock.h **** 
2261:src-gen/sr5e1/clock.h **** /**
2262:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOG
2263:src-gen/sr5e1/clock.h ****  *
2264:src-gen/sr5e1/clock.h ****  * @api
2265:src-gen/sr5e1/clock.h ****  */
2266:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOG(void) {
2267:src-gen/sr5e1/clock.h **** 
2268:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOG);
2269:src-gen/sr5e1/clock.h **** }
2270:src-gen/sr5e1/clock.h **** 
2271:src-gen/sr5e1/clock.h **** /**
2272:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOH clock
2273:src-gen/sr5e1/clock.h ****  *
2274:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2275:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2276:src-gen/sr5e1/clock.h ****  *
2277:src-gen/sr5e1/clock.h ****  * @api
2278:src-gen/sr5e1/clock.h ****  */
2279:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOH(bool smode) {
2280:src-gen/sr5e1/clock.h **** 
2281:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOH);
2282:src-gen/sr5e1/clock.h **** }
2283:src-gen/sr5e1/clock.h **** 
2284:src-gen/sr5e1/clock.h **** /**
2285:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOH clock
2286:src-gen/sr5e1/clock.h ****  *
2287:src-gen/sr5e1/clock.h ****  * @api
2288:src-gen/sr5e1/clock.h ****  */
2289:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOH(void) {
2290:src-gen/sr5e1/clock.h **** 
2291:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOH);
2292:src-gen/sr5e1/clock.h **** }
2293:src-gen/sr5e1/clock.h **** 
2294:src-gen/sr5e1/clock.h **** /**
2295:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOH clock is enabled
2296:src-gen/sr5e1/clock.h ****  *
2297:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2298:src-gen/sr5e1/clock.h ****  *
2299:src-gen/sr5e1/clock.h ****  * @api
2300:src-gen/sr5e1/clock.h ****  */
2301:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOH(void) {
2302:src-gen/sr5e1/clock.h **** 
2303:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOH);
2304:src-gen/sr5e1/clock.h **** }
2305:src-gen/sr5e1/clock.h **** 
2306:src-gen/sr5e1/clock.h **** /**
2307:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOH
2308:src-gen/sr5e1/clock.h ****  *
2309:src-gen/sr5e1/clock.h ****  * @api
2310:src-gen/sr5e1/clock.h ****  */
2311:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOH(void) {
2312:src-gen/sr5e1/clock.h **** 
2313:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOH);
2314:src-gen/sr5e1/clock.h **** }
2315:src-gen/sr5e1/clock.h **** 
2316:src-gen/sr5e1/clock.h **** /**
2317:src-gen/sr5e1/clock.h ****  * @brief   Enables GPIOI clock
2318:src-gen/sr5e1/clock.h ****  *
2319:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2320:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2321:src-gen/sr5e1/clock.h ****  *
2322:src-gen/sr5e1/clock.h ****  * @api
2323:src-gen/sr5e1/clock.h ****  */
2324:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_GPIOI(bool smode) {
2325:src-gen/sr5e1/clock.h **** 
2326:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_GPIOI);
2327:src-gen/sr5e1/clock.h **** }
2328:src-gen/sr5e1/clock.h **** 
2329:src-gen/sr5e1/clock.h **** /**
2330:src-gen/sr5e1/clock.h ****  * @brief   Disables GPIOI clock
2331:src-gen/sr5e1/clock.h ****  *
2332:src-gen/sr5e1/clock.h ****  * @api
2333:src-gen/sr5e1/clock.h ****  */
2334:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_GPIOI(void) {
2335:src-gen/sr5e1/clock.h **** 
2336:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_GPIOI);
2337:src-gen/sr5e1/clock.h **** }
2338:src-gen/sr5e1/clock.h **** 
2339:src-gen/sr5e1/clock.h **** /**
2340:src-gen/sr5e1/clock.h ****  * @brief   Checks if GPIOI clock is enabled
2341:src-gen/sr5e1/clock.h ****  *
2342:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2343:src-gen/sr5e1/clock.h ****  *
2344:src-gen/sr5e1/clock.h ****  * @api
2345:src-gen/sr5e1/clock.h ****  */
2346:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_GPIOI(void) {
2347:src-gen/sr5e1/clock.h **** 
2348:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_GPIOI);
2349:src-gen/sr5e1/clock.h **** }
2350:src-gen/sr5e1/clock.h **** 
2351:src-gen/sr5e1/clock.h **** /**
2352:src-gen/sr5e1/clock.h ****  * @brief   Resets GPIOI
2353:src-gen/sr5e1/clock.h ****  *
2354:src-gen/sr5e1/clock.h ****  * @api
2355:src-gen/sr5e1/clock.h ****  */
2356:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_GPIOI(void) {
2357:src-gen/sr5e1/clock.h **** 
2358:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_GPIOI);
2359:src-gen/sr5e1/clock.h **** }
2360:src-gen/sr5e1/clock.h **** 
2361:src-gen/sr5e1/clock.h **** /**
2362:src-gen/sr5e1/clock.h ****  * @brief   Enables BDAC1 clock
2363:src-gen/sr5e1/clock.h ****  *
2364:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2365:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2366:src-gen/sr5e1/clock.h ****  *
2367:src-gen/sr5e1/clock.h ****  * @api
2368:src-gen/sr5e1/clock.h ****  */
2369:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_BDAC1(bool smode) {
2370:src-gen/sr5e1/clock.h **** 
2371:src-gen/sr5e1/clock.h ****     clock_enable_AHB2H(smode, RCC_AHB2HENR_BDAC1);
2372:src-gen/sr5e1/clock.h **** }
2373:src-gen/sr5e1/clock.h **** 
2374:src-gen/sr5e1/clock.h **** /**
2375:src-gen/sr5e1/clock.h ****  * @brief   Disables BDAC1 clock
2376:src-gen/sr5e1/clock.h ****  *
2377:src-gen/sr5e1/clock.h ****  * @api
2378:src-gen/sr5e1/clock.h ****  */
2379:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_BDAC1(void) {
2380:src-gen/sr5e1/clock.h **** 
2381:src-gen/sr5e1/clock.h ****     clock_disable_AHB2H(RCC_AHB2HENR_BDAC1);
2382:src-gen/sr5e1/clock.h **** }
2383:src-gen/sr5e1/clock.h **** 
2384:src-gen/sr5e1/clock.h **** /**
2385:src-gen/sr5e1/clock.h ****  * @brief   Checks if BDAC1 clock is enabled
2386:src-gen/sr5e1/clock.h ****  *
2387:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2388:src-gen/sr5e1/clock.h ****  *
2389:src-gen/sr5e1/clock.h ****  * @api
2390:src-gen/sr5e1/clock.h ****  */
2391:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_BDAC1(void) {
2392:src-gen/sr5e1/clock.h **** 
2393:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2H(RCC_AHB2HENR_BDAC1);
2394:src-gen/sr5e1/clock.h **** }
2395:src-gen/sr5e1/clock.h **** 
2396:src-gen/sr5e1/clock.h **** /**
2397:src-gen/sr5e1/clock.h ****  * @brief   Resets BDAC1
2398:src-gen/sr5e1/clock.h ****  *
2399:src-gen/sr5e1/clock.h ****  * @api
2400:src-gen/sr5e1/clock.h ****  */
2401:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_BDAC1(void) {
2402:src-gen/sr5e1/clock.h **** 
2403:src-gen/sr5e1/clock.h ****     clock_reset_AHB2H(RCC_AHB2HRSTR_BDAC1);
2404:src-gen/sr5e1/clock.h **** }
2405:src-gen/sr5e1/clock.h **** 
2406:src-gen/sr5e1/clock.h **** /**
2407:src-gen/sr5e1/clock.h ****  * @brief   Enables DAC1 clock
2408:src-gen/sr5e1/clock.h ****  *
2409:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2410:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2411:src-gen/sr5e1/clock.h ****  *
2412:src-gen/sr5e1/clock.h ****  * @api
2413:src-gen/sr5e1/clock.h ****  */
2414:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DAC1(bool smode) {
2415:src-gen/sr5e1/clock.h **** 
2416:src-gen/sr5e1/clock.h ****     clock_enable_AHB2H(smode, RCC_AHB2HENR_DAC1);
2417:src-gen/sr5e1/clock.h **** }
2418:src-gen/sr5e1/clock.h **** 
2419:src-gen/sr5e1/clock.h **** /**
2420:src-gen/sr5e1/clock.h ****  * @brief   Disables DAC1 clock
2421:src-gen/sr5e1/clock.h ****  *
2422:src-gen/sr5e1/clock.h ****  * @api
2423:src-gen/sr5e1/clock.h ****  */
2424:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DAC1(void) {
2425:src-gen/sr5e1/clock.h **** 
2426:src-gen/sr5e1/clock.h ****     clock_disable_AHB2H(RCC_AHB2HENR_DAC1);
2427:src-gen/sr5e1/clock.h **** }
2428:src-gen/sr5e1/clock.h **** 
2429:src-gen/sr5e1/clock.h **** /**
2430:src-gen/sr5e1/clock.h ****  * @brief   Checks if DAC1 clock is enabled
2431:src-gen/sr5e1/clock.h ****  *
2432:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2433:src-gen/sr5e1/clock.h ****  *
2434:src-gen/sr5e1/clock.h ****  * @api
2435:src-gen/sr5e1/clock.h ****  */
2436:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DAC1(void) {
2437:src-gen/sr5e1/clock.h **** 
2438:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2H(RCC_AHB2HENR_DAC1);
2439:src-gen/sr5e1/clock.h **** }
2440:src-gen/sr5e1/clock.h **** 
2441:src-gen/sr5e1/clock.h **** /**
2442:src-gen/sr5e1/clock.h ****  * @brief   Resets DAC1
2443:src-gen/sr5e1/clock.h ****  *
2444:src-gen/sr5e1/clock.h ****  * @api
2445:src-gen/sr5e1/clock.h ****  */
2446:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DAC1(void) {
2447:src-gen/sr5e1/clock.h **** 
2448:src-gen/sr5e1/clock.h ****     clock_reset_AHB2H(RCC_AHB2HRSTR_DAC1);
2449:src-gen/sr5e1/clock.h **** }
2450:src-gen/sr5e1/clock.h **** 
2451:src-gen/sr5e1/clock.h **** /**
2452:src-gen/sr5e1/clock.h ****  * @brief   Enables DAC2 clock
2453:src-gen/sr5e1/clock.h ****  *
2454:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2455:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2456:src-gen/sr5e1/clock.h ****  *
2457:src-gen/sr5e1/clock.h ****  * @api
2458:src-gen/sr5e1/clock.h ****  */
2459:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DAC2(bool smode) {
2460:src-gen/sr5e1/clock.h **** 
2461:src-gen/sr5e1/clock.h ****     clock_enable_AHB2H(smode, RCC_AHB2HENR_DAC2);
2462:src-gen/sr5e1/clock.h **** }
2463:src-gen/sr5e1/clock.h **** 
2464:src-gen/sr5e1/clock.h **** /**
2465:src-gen/sr5e1/clock.h ****  * @brief   Disables DAC2 clock
2466:src-gen/sr5e1/clock.h ****  *
2467:src-gen/sr5e1/clock.h ****  * @api
2468:src-gen/sr5e1/clock.h ****  */
2469:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DAC2(void) {
2470:src-gen/sr5e1/clock.h **** 
2471:src-gen/sr5e1/clock.h ****     clock_disable_AHB2H(RCC_AHB2HENR_DAC2);
2472:src-gen/sr5e1/clock.h **** }
2473:src-gen/sr5e1/clock.h **** 
2474:src-gen/sr5e1/clock.h **** /**
2475:src-gen/sr5e1/clock.h ****  * @brief   Checks if DAC2 clock is enabled
2476:src-gen/sr5e1/clock.h ****  *
2477:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2478:src-gen/sr5e1/clock.h ****  *
2479:src-gen/sr5e1/clock.h ****  * @api
2480:src-gen/sr5e1/clock.h ****  */
2481:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DAC2(void) {
2482:src-gen/sr5e1/clock.h **** 
2483:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2H(RCC_AHB2HENR_DAC2);
2484:src-gen/sr5e1/clock.h **** }
2485:src-gen/sr5e1/clock.h **** 
2486:src-gen/sr5e1/clock.h **** /**
2487:src-gen/sr5e1/clock.h ****  * @brief   Resets DAC2
2488:src-gen/sr5e1/clock.h ****  *
2489:src-gen/sr5e1/clock.h ****  * @api
2490:src-gen/sr5e1/clock.h ****  */
2491:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DAC2(void) {
2492:src-gen/sr5e1/clock.h **** 
2493:src-gen/sr5e1/clock.h ****     clock_reset_AHB2H(RCC_AHB2HRSTR_DAC2);
2494:src-gen/sr5e1/clock.h **** }
2495:src-gen/sr5e1/clock.h **** 
2496:src-gen/sr5e1/clock.h **** /**
2497:src-gen/sr5e1/clock.h ****  * @brief   Enables DAC3 clock
2498:src-gen/sr5e1/clock.h ****  *
2499:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2500:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2501:src-gen/sr5e1/clock.h ****  *
2502:src-gen/sr5e1/clock.h ****  * @api
2503:src-gen/sr5e1/clock.h ****  */
2504:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DAC3(bool smode) {
2505:src-gen/sr5e1/clock.h **** 
2506:src-gen/sr5e1/clock.h ****     clock_enable_AHB1H(smode, RCC_AHB1HENR_DAC3);
2507:src-gen/sr5e1/clock.h **** }
2508:src-gen/sr5e1/clock.h **** 
2509:src-gen/sr5e1/clock.h **** /**
2510:src-gen/sr5e1/clock.h ****  * @brief   Disables DAC3 clock
2511:src-gen/sr5e1/clock.h ****  *
2512:src-gen/sr5e1/clock.h ****  * @api
2513:src-gen/sr5e1/clock.h ****  */
2514:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DAC3(void) {
2515:src-gen/sr5e1/clock.h **** 
2516:src-gen/sr5e1/clock.h ****     clock_disable_AHB1H(RCC_AHB1HENR_DAC3);
2517:src-gen/sr5e1/clock.h **** }
2518:src-gen/sr5e1/clock.h **** 
2519:src-gen/sr5e1/clock.h **** /**
2520:src-gen/sr5e1/clock.h ****  * @brief   Checks if DAC3 clock is enabled
2521:src-gen/sr5e1/clock.h ****  *
2522:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2523:src-gen/sr5e1/clock.h ****  *
2524:src-gen/sr5e1/clock.h ****  * @api
2525:src-gen/sr5e1/clock.h ****  */
2526:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DAC3(void) {
2527:src-gen/sr5e1/clock.h **** 
2528:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1H(RCC_AHB1HENR_DAC3);
2529:src-gen/sr5e1/clock.h **** }
2530:src-gen/sr5e1/clock.h **** 
2531:src-gen/sr5e1/clock.h **** /**
2532:src-gen/sr5e1/clock.h ****  * @brief   Resets DAC3
2533:src-gen/sr5e1/clock.h ****  *
2534:src-gen/sr5e1/clock.h ****  * @api
2535:src-gen/sr5e1/clock.h ****  */
2536:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DAC3(void) {
2537:src-gen/sr5e1/clock.h **** 
2538:src-gen/sr5e1/clock.h ****     clock_reset_AHB1H(RCC_AHB1HRSTR_DAC3);
2539:src-gen/sr5e1/clock.h **** }
2540:src-gen/sr5e1/clock.h **** 
2541:src-gen/sr5e1/clock.h **** /**
2542:src-gen/sr5e1/clock.h ****  * @brief   Enables DAC4 clock
2543:src-gen/sr5e1/clock.h ****  *
2544:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2545:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2546:src-gen/sr5e1/clock.h ****  *
2547:src-gen/sr5e1/clock.h ****  * @api
2548:src-gen/sr5e1/clock.h ****  */
2549:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DAC4(bool smode) {
2550:src-gen/sr5e1/clock.h **** 
2551:src-gen/sr5e1/clock.h ****     clock_enable_AHB1H(smode, RCC_AHB1HENR_DAC4);
2552:src-gen/sr5e1/clock.h **** }
2553:src-gen/sr5e1/clock.h **** 
2554:src-gen/sr5e1/clock.h **** /**
2555:src-gen/sr5e1/clock.h ****  * @brief   Disables DAC4 clock
2556:src-gen/sr5e1/clock.h ****  *
2557:src-gen/sr5e1/clock.h ****  * @api
2558:src-gen/sr5e1/clock.h ****  */
2559:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DAC4(void) {
2560:src-gen/sr5e1/clock.h **** 
2561:src-gen/sr5e1/clock.h ****     clock_disable_AHB1H(RCC_AHB1HENR_DAC4);
2562:src-gen/sr5e1/clock.h **** }
2563:src-gen/sr5e1/clock.h **** 
2564:src-gen/sr5e1/clock.h **** /**
2565:src-gen/sr5e1/clock.h ****  * @brief   Checks if DAC4 clock is enabled
2566:src-gen/sr5e1/clock.h ****  *
2567:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2568:src-gen/sr5e1/clock.h ****  *
2569:src-gen/sr5e1/clock.h ****  * @api
2570:src-gen/sr5e1/clock.h ****  */
2571:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DAC4(void) {
2572:src-gen/sr5e1/clock.h **** 
2573:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1H(RCC_AHB1HENR_DAC4);
2574:src-gen/sr5e1/clock.h **** }
2575:src-gen/sr5e1/clock.h **** 
2576:src-gen/sr5e1/clock.h **** /**
2577:src-gen/sr5e1/clock.h ****  * @brief   Resets DAC4
2578:src-gen/sr5e1/clock.h ****  *
2579:src-gen/sr5e1/clock.h ****  * @api
2580:src-gen/sr5e1/clock.h ****  */
2581:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DAC4(void) {
2582:src-gen/sr5e1/clock.h **** 
2583:src-gen/sr5e1/clock.h ****     clock_reset_AHB1H(RCC_AHB1HRSTR_DAC4);
2584:src-gen/sr5e1/clock.h **** }
2585:src-gen/sr5e1/clock.h **** 
2586:src-gen/sr5e1/clock.h **** /**
2587:src-gen/sr5e1/clock.h ****  * @brief   Enables COMP1 clock
2588:src-gen/sr5e1/clock.h ****  *
2589:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2590:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2591:src-gen/sr5e1/clock.h ****  *
2592:src-gen/sr5e1/clock.h ****  * @api
2593:src-gen/sr5e1/clock.h ****  */
2594:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_COMP1(bool smode) {
2595:src-gen/sr5e1/clock.h **** 
2596:src-gen/sr5e1/clock.h ****     clock_enable_AHB2H(smode, RCC_AHB2HENR_COMP1_DIG);
2597:src-gen/sr5e1/clock.h **** }
2598:src-gen/sr5e1/clock.h **** 
2599:src-gen/sr5e1/clock.h **** /**
2600:src-gen/sr5e1/clock.h ****  * @brief   Disables COMP1 clock
2601:src-gen/sr5e1/clock.h ****  *
2602:src-gen/sr5e1/clock.h ****  * @api
2603:src-gen/sr5e1/clock.h ****  */
2604:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_COMP1(void) {
2605:src-gen/sr5e1/clock.h **** 
2606:src-gen/sr5e1/clock.h ****     clock_disable_AHB2H(RCC_AHB2HENR_COMP1_DIG);
2607:src-gen/sr5e1/clock.h **** }
2608:src-gen/sr5e1/clock.h **** 
2609:src-gen/sr5e1/clock.h **** /**
2610:src-gen/sr5e1/clock.h ****  * @brief   Checks if COMP1 clock is enabled
2611:src-gen/sr5e1/clock.h ****  *
2612:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2613:src-gen/sr5e1/clock.h ****  *
2614:src-gen/sr5e1/clock.h ****  * @api
2615:src-gen/sr5e1/clock.h ****  */
2616:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_COMP1(void) {
2617:src-gen/sr5e1/clock.h **** 
2618:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2H(RCC_AHB2HENR_COMP1_DIG);
2619:src-gen/sr5e1/clock.h **** }
2620:src-gen/sr5e1/clock.h **** 
2621:src-gen/sr5e1/clock.h **** /**
2622:src-gen/sr5e1/clock.h ****  * @brief   Resets COMP1
2623:src-gen/sr5e1/clock.h ****  *
2624:src-gen/sr5e1/clock.h ****  * @api
2625:src-gen/sr5e1/clock.h ****  */
2626:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_COMP1(void) {
2627:src-gen/sr5e1/clock.h **** 
2628:src-gen/sr5e1/clock.h ****     clock_reset_AHB2H(RCC_AHB2HRSTR_COMP1_DIG);
2629:src-gen/sr5e1/clock.h **** }
2630:src-gen/sr5e1/clock.h **** 
2631:src-gen/sr5e1/clock.h **** /**
2632:src-gen/sr5e1/clock.h ****  * @brief   Enables COMP2 clock
2633:src-gen/sr5e1/clock.h ****  *
2634:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2635:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2636:src-gen/sr5e1/clock.h ****  *
2637:src-gen/sr5e1/clock.h ****  * @api
2638:src-gen/sr5e1/clock.h ****  */
2639:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_COMP2(bool smode) {
2640:src-gen/sr5e1/clock.h **** 
2641:src-gen/sr5e1/clock.h ****     clock_enable_AHB1H(smode, RCC_AHB1HENR_COMP2_DIG);
2642:src-gen/sr5e1/clock.h **** }
2643:src-gen/sr5e1/clock.h **** 
2644:src-gen/sr5e1/clock.h **** /**
2645:src-gen/sr5e1/clock.h ****  * @brief   Disables COMP2 clock
2646:src-gen/sr5e1/clock.h ****  *
2647:src-gen/sr5e1/clock.h ****  * @api
2648:src-gen/sr5e1/clock.h ****  */
2649:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_COMP2(void) {
2650:src-gen/sr5e1/clock.h **** 
2651:src-gen/sr5e1/clock.h ****     clock_disable_AHB1H(RCC_AHB1HENR_COMP2_DIG);
2652:src-gen/sr5e1/clock.h **** }
2653:src-gen/sr5e1/clock.h **** 
2654:src-gen/sr5e1/clock.h **** /**
2655:src-gen/sr5e1/clock.h ****  * @brief   Checks if COMP2 clock is enabled
2656:src-gen/sr5e1/clock.h ****  *
2657:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2658:src-gen/sr5e1/clock.h ****  *
2659:src-gen/sr5e1/clock.h ****  * @api
2660:src-gen/sr5e1/clock.h ****  */
2661:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_COMP2(void) {
2662:src-gen/sr5e1/clock.h **** 
2663:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1H(RCC_AHB1HENR_COMP2_DIG);
2664:src-gen/sr5e1/clock.h **** }
2665:src-gen/sr5e1/clock.h **** 
2666:src-gen/sr5e1/clock.h **** /**
2667:src-gen/sr5e1/clock.h ****  * @brief   Resets COMP2
2668:src-gen/sr5e1/clock.h ****  *
2669:src-gen/sr5e1/clock.h ****  * @api
2670:src-gen/sr5e1/clock.h ****  */
2671:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_COMP2(void) {
2672:src-gen/sr5e1/clock.h **** 
2673:src-gen/sr5e1/clock.h ****     clock_reset_AHB1H(RCC_AHB1HRSTR_COMP2_DIG);
2674:src-gen/sr5e1/clock.h **** }
2675:src-gen/sr5e1/clock.h **** 
2676:src-gen/sr5e1/clock.h **** /**
2677:src-gen/sr5e1/clock.h ****  * @brief   Enables HRTIM1 clock
2678:src-gen/sr5e1/clock.h ****  *
2679:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2680:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2681:src-gen/sr5e1/clock.h ****  *
2682:src-gen/sr5e1/clock.h ****  * @api
2683:src-gen/sr5e1/clock.h ****  */
2684:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_HRTIM1(bool smode) {
2685:src-gen/sr5e1/clock.h **** 
2686:src-gen/sr5e1/clock.h ****     clock_enable_AHB1H(smode, RCC_AHB1HENR_HRTIMER1);
2687:src-gen/sr5e1/clock.h **** }
2688:src-gen/sr5e1/clock.h **** 
2689:src-gen/sr5e1/clock.h **** /**
2690:src-gen/sr5e1/clock.h ****  * @brief   Disables HRTIM1 clock
2691:src-gen/sr5e1/clock.h ****  *
2692:src-gen/sr5e1/clock.h ****  * @api
2693:src-gen/sr5e1/clock.h ****  */
2694:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_HRTIM1(void) {
2695:src-gen/sr5e1/clock.h **** 
2696:src-gen/sr5e1/clock.h ****     clock_disable_AHB1H(RCC_AHB1HENR_HRTIMER1);
2697:src-gen/sr5e1/clock.h **** }
2698:src-gen/sr5e1/clock.h **** 
2699:src-gen/sr5e1/clock.h **** /**
2700:src-gen/sr5e1/clock.h ****  * @brief   Checks if HRTIM1 clock is enabled
2701:src-gen/sr5e1/clock.h ****  *
2702:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2703:src-gen/sr5e1/clock.h ****  *
2704:src-gen/sr5e1/clock.h ****  * @api
2705:src-gen/sr5e1/clock.h ****  */
2706:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_HRTIM1(void) {
2707:src-gen/sr5e1/clock.h **** 
2708:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1H(RCC_AHB1HENR_HRTIMER1);
2709:src-gen/sr5e1/clock.h **** }
2710:src-gen/sr5e1/clock.h **** 
2711:src-gen/sr5e1/clock.h **** /**
2712:src-gen/sr5e1/clock.h ****  * @brief   Resets HRTIM1
2713:src-gen/sr5e1/clock.h ****  *
2714:src-gen/sr5e1/clock.h ****  * @api
2715:src-gen/sr5e1/clock.h ****  */
2716:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_HRTIM1(void) {
2717:src-gen/sr5e1/clock.h **** 
2718:src-gen/sr5e1/clock.h ****     clock_reset_AHB1H(RCC_AHB1HRSTR_HRTIMER1);
2719:src-gen/sr5e1/clock.h **** }
2720:src-gen/sr5e1/clock.h **** 
2721:src-gen/sr5e1/clock.h **** /**
2722:src-gen/sr5e1/clock.h ****  * @brief   Enables HRTIM2 clock
2723:src-gen/sr5e1/clock.h ****  *
2724:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2725:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2726:src-gen/sr5e1/clock.h ****  *
2727:src-gen/sr5e1/clock.h ****  * @api
2728:src-gen/sr5e1/clock.h ****  */
2729:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_HRTIM2(bool smode) {
2730:src-gen/sr5e1/clock.h **** 
2731:src-gen/sr5e1/clock.h ****     clock_enable_AHB1H(smode, RCC_AHB1HENR_HRTIMER2);
2732:src-gen/sr5e1/clock.h **** }
2733:src-gen/sr5e1/clock.h **** 
2734:src-gen/sr5e1/clock.h **** /**
2735:src-gen/sr5e1/clock.h ****  * @brief   Disables HRTIM2 clock
2736:src-gen/sr5e1/clock.h ****  *
2737:src-gen/sr5e1/clock.h ****  * @api
2738:src-gen/sr5e1/clock.h ****  */
2739:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_HRTIM2(void) {
2740:src-gen/sr5e1/clock.h **** 
2741:src-gen/sr5e1/clock.h ****     clock_disable_AHB1H(RCC_AHB1HENR_HRTIMER2);
2742:src-gen/sr5e1/clock.h **** }
2743:src-gen/sr5e1/clock.h **** 
2744:src-gen/sr5e1/clock.h **** /**
2745:src-gen/sr5e1/clock.h ****  * @brief   Checks if HRTIM2 clock is enabled
2746:src-gen/sr5e1/clock.h ****  *
2747:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2748:src-gen/sr5e1/clock.h ****  *
2749:src-gen/sr5e1/clock.h ****  * @api
2750:src-gen/sr5e1/clock.h ****  */
2751:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_HRTIM2(void) {
2752:src-gen/sr5e1/clock.h **** 
2753:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1H(RCC_AHB1HENR_HRTIMER2);
2754:src-gen/sr5e1/clock.h **** }
2755:src-gen/sr5e1/clock.h **** 
2756:src-gen/sr5e1/clock.h **** /**
2757:src-gen/sr5e1/clock.h ****  * @brief   Resets HRTIM2
2758:src-gen/sr5e1/clock.h ****  *
2759:src-gen/sr5e1/clock.h ****  * @api
2760:src-gen/sr5e1/clock.h ****  */
2761:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_HRTIM2(void) {
2762:src-gen/sr5e1/clock.h **** 
2763:src-gen/sr5e1/clock.h ****     clock_reset_AHB1H(RCC_AHB1HRSTR_HRTIMER2);
2764:src-gen/sr5e1/clock.h **** }
2765:src-gen/sr5e1/clock.h **** 
2766:src-gen/sr5e1/clock.h **** /**
2767:src-gen/sr5e1/clock.h ****  * @brief   Enables WWDG1 clock
2768:src-gen/sr5e1/clock.h ****  *
2769:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2770:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2771:src-gen/sr5e1/clock.h ****  *
2772:src-gen/sr5e1/clock.h ****  * @api
2773:src-gen/sr5e1/clock.h ****  */
2774:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_WWDG1(bool smode) {
2775:src-gen/sr5e1/clock.h **** 
2776:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_WWDG1);
2777:src-gen/sr5e1/clock.h **** }
2778:src-gen/sr5e1/clock.h **** 
2779:src-gen/sr5e1/clock.h **** /**
2780:src-gen/sr5e1/clock.h ****  * @brief   Disables WWDG1 clock
2781:src-gen/sr5e1/clock.h ****  *
2782:src-gen/sr5e1/clock.h ****  * @api
2783:src-gen/sr5e1/clock.h ****  */
2784:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_WWDG1(void) {
2785:src-gen/sr5e1/clock.h **** 
2786:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_WWDG1);
2787:src-gen/sr5e1/clock.h **** }
2788:src-gen/sr5e1/clock.h **** 
2789:src-gen/sr5e1/clock.h **** /**
2790:src-gen/sr5e1/clock.h ****  * @brief   Checks if WWDG1 clock is enabled
2791:src-gen/sr5e1/clock.h ****  *
2792:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2793:src-gen/sr5e1/clock.h ****  *
2794:src-gen/sr5e1/clock.h ****  * @api
2795:src-gen/sr5e1/clock.h ****  */
2796:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_WWDG1(void) {
2797:src-gen/sr5e1/clock.h **** 
2798:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_WWDG1);
2799:src-gen/sr5e1/clock.h **** }
2800:src-gen/sr5e1/clock.h **** 
2801:src-gen/sr5e1/clock.h **** /**
2802:src-gen/sr5e1/clock.h ****  * @brief   Resets WWDG1
2803:src-gen/sr5e1/clock.h ****  *
2804:src-gen/sr5e1/clock.h ****  * @api
2805:src-gen/sr5e1/clock.h ****  */
2806:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_WWDG1(void) {
2807:src-gen/sr5e1/clock.h **** 
2808:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_WWDG1);
2809:src-gen/sr5e1/clock.h **** }
2810:src-gen/sr5e1/clock.h **** 
2811:src-gen/sr5e1/clock.h **** /**
2812:src-gen/sr5e1/clock.h ****  * @brief   Enables WWDG2 clock
2813:src-gen/sr5e1/clock.h ****  *
2814:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2815:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2816:src-gen/sr5e1/clock.h ****  *
2817:src-gen/sr5e1/clock.h ****  * @api
2818:src-gen/sr5e1/clock.h ****  */
2819:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_WWDG2(bool smode) {
2820:src-gen/sr5e1/clock.h **** 
2821:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_WWDG2);
2822:src-gen/sr5e1/clock.h **** }
2823:src-gen/sr5e1/clock.h **** 
2824:src-gen/sr5e1/clock.h **** /**
2825:src-gen/sr5e1/clock.h ****  * @brief   Disables WWDG2 clock
2826:src-gen/sr5e1/clock.h ****  *
2827:src-gen/sr5e1/clock.h ****  * @api
2828:src-gen/sr5e1/clock.h ****  */
2829:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_WWDG2(void) {
2830:src-gen/sr5e1/clock.h **** 
2831:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_WWDG2);
2832:src-gen/sr5e1/clock.h **** }
2833:src-gen/sr5e1/clock.h **** 
2834:src-gen/sr5e1/clock.h **** /**
2835:src-gen/sr5e1/clock.h ****  * @brief   Checks if WWDG2 clock is enabled
2836:src-gen/sr5e1/clock.h ****  *
2837:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2838:src-gen/sr5e1/clock.h ****  *
2839:src-gen/sr5e1/clock.h ****  * @api
2840:src-gen/sr5e1/clock.h ****  */
2841:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_WWDG2(void) {
2842:src-gen/sr5e1/clock.h **** 
2843:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_WWDG2);
2844:src-gen/sr5e1/clock.h **** }
2845:src-gen/sr5e1/clock.h **** 
2846:src-gen/sr5e1/clock.h **** /**
2847:src-gen/sr5e1/clock.h ****  * @brief   Resets WWDG2
2848:src-gen/sr5e1/clock.h ****  *
2849:src-gen/sr5e1/clock.h ****  * @api
2850:src-gen/sr5e1/clock.h ****  */
2851:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_WWDG2(void) {
2852:src-gen/sr5e1/clock.h **** 
2853:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_WWDG2);
2854:src-gen/sr5e1/clock.h **** }
2855:src-gen/sr5e1/clock.h **** 
2856:src-gen/sr5e1/clock.h **** /**
2857:src-gen/sr5e1/clock.h ****  * @brief   Enables IWDG1 clock
2858:src-gen/sr5e1/clock.h ****  *
2859:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2860:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2861:src-gen/sr5e1/clock.h ****  *
2862:src-gen/sr5e1/clock.h ****  * @api
2863:src-gen/sr5e1/clock.h ****  */
2864:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_IWDG1(bool smode) {
2865:src-gen/sr5e1/clock.h **** 
2866:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_IWDG1);
2867:src-gen/sr5e1/clock.h **** }
2868:src-gen/sr5e1/clock.h **** 
2869:src-gen/sr5e1/clock.h **** /**
2870:src-gen/sr5e1/clock.h ****  * @brief   Disables IWDG1 clock
2871:src-gen/sr5e1/clock.h ****  *
2872:src-gen/sr5e1/clock.h ****  * @api
2873:src-gen/sr5e1/clock.h ****  */
2874:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_IWDG1(void) {
2875:src-gen/sr5e1/clock.h **** 
2876:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_IWDG1);
2877:src-gen/sr5e1/clock.h **** }
2878:src-gen/sr5e1/clock.h **** 
2879:src-gen/sr5e1/clock.h **** /**
2880:src-gen/sr5e1/clock.h ****  * @brief   Checks if IWDG1 clock is enabled
2881:src-gen/sr5e1/clock.h ****  *
2882:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2883:src-gen/sr5e1/clock.h ****  *
2884:src-gen/sr5e1/clock.h ****  * @api
2885:src-gen/sr5e1/clock.h ****  */
2886:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_IWDG1(void) {
2887:src-gen/sr5e1/clock.h **** 
2888:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_IWDG1);
2889:src-gen/sr5e1/clock.h **** }
2890:src-gen/sr5e1/clock.h **** 
2891:src-gen/sr5e1/clock.h **** /**
2892:src-gen/sr5e1/clock.h ****  * @brief   Resets IWDG1
2893:src-gen/sr5e1/clock.h ****  *
2894:src-gen/sr5e1/clock.h ****  * @api
2895:src-gen/sr5e1/clock.h ****  */
2896:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_IWDG1(void) {
2897:src-gen/sr5e1/clock.h **** 
2898:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_IWDG1);
2899:src-gen/sr5e1/clock.h **** }
2900:src-gen/sr5e1/clock.h **** 
2901:src-gen/sr5e1/clock.h **** /**
2902:src-gen/sr5e1/clock.h ****  * @brief   Enables IWDG2 clock
2903:src-gen/sr5e1/clock.h ****  *
2904:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2905:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2906:src-gen/sr5e1/clock.h ****  *
2907:src-gen/sr5e1/clock.h ****  * @api
2908:src-gen/sr5e1/clock.h ****  */
2909:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_IWDG2(bool smode) {
2910:src-gen/sr5e1/clock.h **** 
2911:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_IWDG2);
2912:src-gen/sr5e1/clock.h **** }
2913:src-gen/sr5e1/clock.h **** 
2914:src-gen/sr5e1/clock.h **** /**
2915:src-gen/sr5e1/clock.h ****  * @brief   Disables IWDG2 clock
2916:src-gen/sr5e1/clock.h ****  *
2917:src-gen/sr5e1/clock.h ****  * @api
2918:src-gen/sr5e1/clock.h ****  */
2919:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_IWDG2(void) {
2920:src-gen/sr5e1/clock.h **** 
2921:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_IWDG2);
2922:src-gen/sr5e1/clock.h **** }
2923:src-gen/sr5e1/clock.h **** 
2924:src-gen/sr5e1/clock.h **** /**
2925:src-gen/sr5e1/clock.h ****  * @brief   Checks if IWDG2 clock is enabled
2926:src-gen/sr5e1/clock.h ****  *
2927:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2928:src-gen/sr5e1/clock.h ****  *
2929:src-gen/sr5e1/clock.h ****  * @api
2930:src-gen/sr5e1/clock.h ****  */
2931:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_IWDG2(void) {
2932:src-gen/sr5e1/clock.h **** 
2933:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_IWDG2);
2934:src-gen/sr5e1/clock.h **** }
2935:src-gen/sr5e1/clock.h **** 
2936:src-gen/sr5e1/clock.h **** /**
2937:src-gen/sr5e1/clock.h ****  * @brief   Resets IWDG2
2938:src-gen/sr5e1/clock.h ****  *
2939:src-gen/sr5e1/clock.h ****  * @api
2940:src-gen/sr5e1/clock.h ****  */
2941:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_IWDG2(void) {
2942:src-gen/sr5e1/clock.h **** 
2943:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_IWDG2);
2944:src-gen/sr5e1/clock.h **** }
2945:src-gen/sr5e1/clock.h **** 
2946:src-gen/sr5e1/clock.h **** /**
2947:src-gen/sr5e1/clock.h ****  * @brief   Enables RTC clock
2948:src-gen/sr5e1/clock.h ****  *
2949:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2950:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2951:src-gen/sr5e1/clock.h ****  *
2952:src-gen/sr5e1/clock.h ****  * @api
2953:src-gen/sr5e1/clock.h ****  */
2954:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_RTC(bool smode) {
2955:src-gen/sr5e1/clock.h **** 
2956:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_RTC);
2957:src-gen/sr5e1/clock.h **** }
2958:src-gen/sr5e1/clock.h **** 
2959:src-gen/sr5e1/clock.h **** /**
2960:src-gen/sr5e1/clock.h ****  * @brief   Disables RTC clock
2961:src-gen/sr5e1/clock.h ****  *
2962:src-gen/sr5e1/clock.h ****  * @api
2963:src-gen/sr5e1/clock.h ****  */
2964:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_RTC(void) {
2965:src-gen/sr5e1/clock.h **** 
2966:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_RTC);
2967:src-gen/sr5e1/clock.h **** }
2968:src-gen/sr5e1/clock.h **** 
2969:src-gen/sr5e1/clock.h **** /**
2970:src-gen/sr5e1/clock.h ****  * @brief   Checks if RTC clock is enabled
2971:src-gen/sr5e1/clock.h ****  *
2972:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
2973:src-gen/sr5e1/clock.h ****  *
2974:src-gen/sr5e1/clock.h ****  * @api
2975:src-gen/sr5e1/clock.h ****  */
2976:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_RTC(void) {
2977:src-gen/sr5e1/clock.h **** 
2978:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_RTC);
2979:src-gen/sr5e1/clock.h **** }
2980:src-gen/sr5e1/clock.h **** 
2981:src-gen/sr5e1/clock.h **** /**
2982:src-gen/sr5e1/clock.h ****  * @brief   Resets RTC
2983:src-gen/sr5e1/clock.h ****  *
2984:src-gen/sr5e1/clock.h ****  * @api
2985:src-gen/sr5e1/clock.h ****  */
2986:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_RTC(void) {
2987:src-gen/sr5e1/clock.h **** 
2988:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_RTC);
2989:src-gen/sr5e1/clock.h **** }
2990:src-gen/sr5e1/clock.h **** 
2991:src-gen/sr5e1/clock.h **** /**
2992:src-gen/sr5e1/clock.h ****  * @brief   Enables I2C1 clock
2993:src-gen/sr5e1/clock.h ****  *
2994:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
2995:src-gen/sr5e1/clock.h ****  *                      sleep mode)
2996:src-gen/sr5e1/clock.h ****  *
2997:src-gen/sr5e1/clock.h ****  * @api
2998:src-gen/sr5e1/clock.h ****  */
2999:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_I2C1(bool smode) {
3000:src-gen/sr5e1/clock.h **** 
3001:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_I2C1);
3002:src-gen/sr5e1/clock.h **** }
3003:src-gen/sr5e1/clock.h **** 
3004:src-gen/sr5e1/clock.h **** /**
3005:src-gen/sr5e1/clock.h ****  * @brief   Disables I2C1 clock
3006:src-gen/sr5e1/clock.h ****  *
3007:src-gen/sr5e1/clock.h ****  * @api
3008:src-gen/sr5e1/clock.h ****  */
3009:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_I2C1(void) {
3010:src-gen/sr5e1/clock.h **** 
3011:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_I2C1);
3012:src-gen/sr5e1/clock.h **** }
3013:src-gen/sr5e1/clock.h **** 
3014:src-gen/sr5e1/clock.h **** /**
3015:src-gen/sr5e1/clock.h ****  * @brief   Checks if I2C1 clock is enabled
3016:src-gen/sr5e1/clock.h ****  *
3017:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3018:src-gen/sr5e1/clock.h ****  *
3019:src-gen/sr5e1/clock.h ****  * @api
3020:src-gen/sr5e1/clock.h ****  */
3021:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_I2C1(void) {
3022:src-gen/sr5e1/clock.h **** 
3023:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_I2C1);
3024:src-gen/sr5e1/clock.h **** }
3025:src-gen/sr5e1/clock.h **** 
3026:src-gen/sr5e1/clock.h **** /**
3027:src-gen/sr5e1/clock.h ****  * @brief   Enables I2C2 clock
3028:src-gen/sr5e1/clock.h ****  *
3029:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3030:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3031:src-gen/sr5e1/clock.h ****  *
3032:src-gen/sr5e1/clock.h ****  * @api
3033:src-gen/sr5e1/clock.h ****  */
3034:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_I2C2(bool smode) {
3035:src-gen/sr5e1/clock.h **** 
3036:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_I2C2);
3037:src-gen/sr5e1/clock.h **** }
3038:src-gen/sr5e1/clock.h **** 
3039:src-gen/sr5e1/clock.h **** /**
3040:src-gen/sr5e1/clock.h ****  * @brief   Disables I2C2 clock
3041:src-gen/sr5e1/clock.h ****  *
3042:src-gen/sr5e1/clock.h ****  * @api
3043:src-gen/sr5e1/clock.h ****  */
3044:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_I2C2(void) {
3045:src-gen/sr5e1/clock.h **** 
3046:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_I2C2);
3047:src-gen/sr5e1/clock.h **** }
3048:src-gen/sr5e1/clock.h **** 
3049:src-gen/sr5e1/clock.h **** /**
3050:src-gen/sr5e1/clock.h ****  * @brief   Checks if I2C2 clock is enabled
3051:src-gen/sr5e1/clock.h ****  *
3052:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3053:src-gen/sr5e1/clock.h ****  *
3054:src-gen/sr5e1/clock.h ****  * @api
3055:src-gen/sr5e1/clock.h ****  */
3056:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_I2C2(void) {
3057:src-gen/sr5e1/clock.h **** 
3058:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_I2C2);
3059:src-gen/sr5e1/clock.h **** }
3060:src-gen/sr5e1/clock.h **** 
3061:src-gen/sr5e1/clock.h **** /**
3062:src-gen/sr5e1/clock.h ****  * @brief   Enables SPI1 clock
3063:src-gen/sr5e1/clock.h ****  *
3064:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3065:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3066:src-gen/sr5e1/clock.h ****  *
3067:src-gen/sr5e1/clock.h ****  * @api
3068:src-gen/sr5e1/clock.h ****  */
3069:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_SPI1(bool smode) {
3070:src-gen/sr5e1/clock.h **** 
3071:src-gen/sr5e1/clock.h ****     clock_enable_APB2L(smode, RCC_APB2LENR_SPI1);
3072:src-gen/sr5e1/clock.h **** }
 250              		.loc 2 3072 1
 251 009a DFE0     		b	.L22
 252              	.L18:
 253              	.LBE51:
 254              	.LBE50:
 119:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         clock_enable_SPI1(true);
 120:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI2) {
 255              		.loc 1 120 15
 256 009c 019B     		ldr	r3, [sp, #4]
 257 009e 724A     		ldr	r2, .L34+4
 258 00a0 9342     		cmp	r3, r2
 259 00a2 47D1     		bne	.L23
 260 00a4 0123     		movs	r3, #1
 261 00a6 8DF81F30 		strb	r3, [sp, #31]
 262 00aa 9DF81F30 		ldrb	r3, [sp, #31]
 263 00ae 8DF81E30 		strb	r3, [sp, #30]
 264 00b2 4FF40003 		mov	r3, #8388608
 265 00b6 0693     		str	r3, [sp, #24]
 266              	.LBB54:
 267              	.LBB55:
 268              	.LBB56:
 269              	.LBB57:
1327:src-gen/sr5e1/clock.h ****     if (smode) {
 270              		.loc 2 1327 19
 271 00b8 4FF08843 		mov	r3, #1140850688
 272 00bc D3F88020 		ldr	r2, [r3, #128]
 273 00c0 4FF08841 		mov	r1, #1140850688
 274 00c4 069B     		ldr	r3, [sp, #24]
 275 00c6 1343     		orrs	r3, r3, r2
 276 00c8 C1F88030 		str	r3, [r1, #128]
1328:src-gen/sr5e1/clock.h ****         RCC->C1_APB1LSMENR |= m;
 277              		.loc 2 1328 8
 278 00cc 9DF81E30 		ldrb	r3, [sp, #30]	@ zero_extendqisi2
 279 00d0 002B     		cmp	r3, #0
 280 00d2 14D0     		beq	.L24
1329:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 281              		.loc 2 1329 28
 282 00d4 4FF08843 		mov	r3, #1140850688
 283 00d8 D3F8A020 		ldr	r2, [r3, #160]
 284 00dc 4FF08841 		mov	r1, #1140850688
 285 00e0 069B     		ldr	r3, [sp, #24]
 286 00e2 1343     		orrs	r3, r3, r2
 287 00e4 C1F8A030 		str	r3, [r1, #160]
1331:src-gen/sr5e1/clock.h **** #endif
 288              		.loc 2 1331 28
 289 00e8 4FF08843 		mov	r3, #1140850688
 290 00ec D3F8C020 		ldr	r2, [r3, #192]
 291 00f0 4FF08841 		mov	r1, #1140850688
 292 00f4 069B     		ldr	r3, [sp, #24]
 293 00f6 1343     		orrs	r3, r3, r2
 294 00f8 C1F8C030 		str	r3, [r1, #192]
 295 00fc 15E0     		b	.L25
 296              	.L24:
1335:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 297              		.loc 2 1335 28
 298 00fe 4FF08843 		mov	r3, #1140850688
 299 0102 D3F8A020 		ldr	r2, [r3, #160]
1335:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 300              		.loc 2 1335 31
 301 0106 069B     		ldr	r3, [sp, #24]
 302 0108 DB43     		mvns	r3, r3
1335:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 303              		.loc 2 1335 28
 304 010a 4FF08841 		mov	r1, #1140850688
 305 010e 1340     		ands	r3, r3, r2
 306 0110 C1F8A030 		str	r3, [r1, #160]
1337:src-gen/sr5e1/clock.h **** #endif
 307              		.loc 2 1337 28
 308 0114 4FF08843 		mov	r3, #1140850688
 309 0118 D3F8C020 		ldr	r2, [r3, #192]
1337:src-gen/sr5e1/clock.h **** #endif
 310              		.loc 2 1337 31
 311 011c 069B     		ldr	r3, [sp, #24]
 312 011e DB43     		mvns	r3, r3
1337:src-gen/sr5e1/clock.h **** #endif
 313              		.loc 2 1337 28
 314 0120 4FF08841 		mov	r1, #1140850688
 315 0124 1340     		ands	r3, r3, r2
 316 0126 C1F8C030 		str	r3, [r1, #192]
 317              	.L25:
1341:src-gen/sr5e1/clock.h **** }
 318              		.loc 2 1341 15
 319 012a 4FF08843 		mov	r3, #1140850688
 320 012e D3F88030 		ldr	r3, [r3, #128]
 321              	.LBE57:
 322              	.LBE56:
3073:src-gen/sr5e1/clock.h **** 
3074:src-gen/sr5e1/clock.h **** /**
3075:src-gen/sr5e1/clock.h ****  * @brief   Disables SPI1 clock
3076:src-gen/sr5e1/clock.h ****  *
3077:src-gen/sr5e1/clock.h ****  * @api
3078:src-gen/sr5e1/clock.h ****  */
3079:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_SPI1(void) {
3080:src-gen/sr5e1/clock.h **** 
3081:src-gen/sr5e1/clock.h ****     clock_disable_APB2L(RCC_APB2LENR_SPI1);
3082:src-gen/sr5e1/clock.h **** }
3083:src-gen/sr5e1/clock.h **** 
3084:src-gen/sr5e1/clock.h **** /**
3085:src-gen/sr5e1/clock.h ****  * @brief   Checks if SPI1 clock is enabled
3086:src-gen/sr5e1/clock.h ****  *
3087:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3088:src-gen/sr5e1/clock.h ****  *
3089:src-gen/sr5e1/clock.h ****  * @api
3090:src-gen/sr5e1/clock.h ****  */
3091:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_SPI1(void) {
3092:src-gen/sr5e1/clock.h **** 
3093:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB2L(RCC_APB2LENR_SPI1);
3094:src-gen/sr5e1/clock.h **** }
3095:src-gen/sr5e1/clock.h **** 
3096:src-gen/sr5e1/clock.h **** /**
3097:src-gen/sr5e1/clock.h ****  * @brief   Resets SPI1
3098:src-gen/sr5e1/clock.h ****  *
3099:src-gen/sr5e1/clock.h ****  * @api
3100:src-gen/sr5e1/clock.h ****  */
3101:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_SPI1(void) {
3102:src-gen/sr5e1/clock.h **** 
3103:src-gen/sr5e1/clock.h ****     clock_reset_APB2L(RCC_APB2LRSTR_SPI1);
3104:src-gen/sr5e1/clock.h **** }
3105:src-gen/sr5e1/clock.h **** 
3106:src-gen/sr5e1/clock.h **** /**
3107:src-gen/sr5e1/clock.h ****  * @brief   Enables SPI2 clock
3108:src-gen/sr5e1/clock.h ****  *
3109:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3110:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3111:src-gen/sr5e1/clock.h ****  *
3112:src-gen/sr5e1/clock.h ****  * @api
3113:src-gen/sr5e1/clock.h ****  */
3114:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_SPI2(bool smode) {
3115:src-gen/sr5e1/clock.h **** 
3116:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_SPI2);
3117:src-gen/sr5e1/clock.h **** }
 323              		.loc 2 3117 1
 324 0132 93E0     		b	.L22
 325              	.L23:
 326              	.LBE55:
 327              	.LBE54:
 121:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         clock_enable_SPI2(true);
 122:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI3) {
 328              		.loc 1 122 15
 329 0134 019B     		ldr	r3, [sp, #4]
 330 0136 4D4A     		ldr	r2, .L34+8
 331 0138 9342     		cmp	r3, r2
 332 013a 47D1     		bne	.L27
 333 013c 0123     		movs	r3, #1
 334 013e 8DF81730 		strb	r3, [sp, #23]
 335 0142 9DF81730 		ldrb	r3, [sp, #23]
 336 0146 8DF81630 		strb	r3, [sp, #22]
 337 014a 4FF08073 		mov	r3, #16777216
 338 014e 0493     		str	r3, [sp, #16]
 339              	.LBB58:
 340              	.LBB59:
 341              	.LBB60:
 342              	.LBB61:
1327:src-gen/sr5e1/clock.h ****     if (smode) {
 343              		.loc 2 1327 19
 344 0150 4FF08843 		mov	r3, #1140850688
 345 0154 D3F88020 		ldr	r2, [r3, #128]
 346 0158 4FF08841 		mov	r1, #1140850688
 347 015c 049B     		ldr	r3, [sp, #16]
 348 015e 1343     		orrs	r3, r3, r2
 349 0160 C1F88030 		str	r3, [r1, #128]
1328:src-gen/sr5e1/clock.h ****         RCC->C1_APB1LSMENR |= m;
 350              		.loc 2 1328 8
 351 0164 9DF81630 		ldrb	r3, [sp, #22]	@ zero_extendqisi2
 352 0168 002B     		cmp	r3, #0
 353 016a 14D0     		beq	.L28
1329:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 354              		.loc 2 1329 28
 355 016c 4FF08843 		mov	r3, #1140850688
 356 0170 D3F8A020 		ldr	r2, [r3, #160]
 357 0174 4FF08841 		mov	r1, #1140850688
 358 0178 049B     		ldr	r3, [sp, #16]
 359 017a 1343     		orrs	r3, r3, r2
 360 017c C1F8A030 		str	r3, [r1, #160]
1331:src-gen/sr5e1/clock.h **** #endif
 361              		.loc 2 1331 28
 362 0180 4FF08843 		mov	r3, #1140850688
 363 0184 D3F8C020 		ldr	r2, [r3, #192]
 364 0188 4FF08841 		mov	r1, #1140850688
 365 018c 049B     		ldr	r3, [sp, #16]
 366 018e 1343     		orrs	r3, r3, r2
 367 0190 C1F8C030 		str	r3, [r1, #192]
 368 0194 15E0     		b	.L29
 369              	.L28:
1335:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 370              		.loc 2 1335 28
 371 0196 4FF08843 		mov	r3, #1140850688
 372 019a D3F8A020 		ldr	r2, [r3, #160]
1335:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 373              		.loc 2 1335 31
 374 019e 049B     		ldr	r3, [sp, #16]
 375 01a0 DB43     		mvns	r3, r3
1335:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 376              		.loc 2 1335 28
 377 01a2 4FF08841 		mov	r1, #1140850688
 378 01a6 1340     		ands	r3, r3, r2
 379 01a8 C1F8A030 		str	r3, [r1, #160]
1337:src-gen/sr5e1/clock.h **** #endif
 380              		.loc 2 1337 28
 381 01ac 4FF08843 		mov	r3, #1140850688
 382 01b0 D3F8C020 		ldr	r2, [r3, #192]
1337:src-gen/sr5e1/clock.h **** #endif
 383              		.loc 2 1337 31
 384 01b4 049B     		ldr	r3, [sp, #16]
 385 01b6 DB43     		mvns	r3, r3
1337:src-gen/sr5e1/clock.h **** #endif
 386              		.loc 2 1337 28
 387 01b8 4FF08841 		mov	r1, #1140850688
 388 01bc 1340     		ands	r3, r3, r2
 389 01be C1F8C030 		str	r3, [r1, #192]
 390              	.L29:
1341:src-gen/sr5e1/clock.h **** }
 391              		.loc 2 1341 15
 392 01c2 4FF08843 		mov	r3, #1140850688
 393 01c6 D3F88030 		ldr	r3, [r3, #128]
 394              	.LBE61:
 395              	.LBE60:
3118:src-gen/sr5e1/clock.h **** 
3119:src-gen/sr5e1/clock.h **** /**
3120:src-gen/sr5e1/clock.h ****  * @brief   Disables SPI2 clock
3121:src-gen/sr5e1/clock.h ****  *
3122:src-gen/sr5e1/clock.h ****  * @api
3123:src-gen/sr5e1/clock.h ****  */
3124:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_SPI2(void) {
3125:src-gen/sr5e1/clock.h **** 
3126:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_SPI2);
3127:src-gen/sr5e1/clock.h **** }
3128:src-gen/sr5e1/clock.h **** 
3129:src-gen/sr5e1/clock.h **** /**
3130:src-gen/sr5e1/clock.h ****  * @brief   Checks if SPI2 clock is enabled
3131:src-gen/sr5e1/clock.h ****  *
3132:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3133:src-gen/sr5e1/clock.h ****  *
3134:src-gen/sr5e1/clock.h ****  * @api
3135:src-gen/sr5e1/clock.h ****  */
3136:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_SPI2(void) {
3137:src-gen/sr5e1/clock.h **** 
3138:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_SPI2);
3139:src-gen/sr5e1/clock.h **** }
3140:src-gen/sr5e1/clock.h **** 
3141:src-gen/sr5e1/clock.h **** /**
3142:src-gen/sr5e1/clock.h ****  * @brief   Resets SPI2
3143:src-gen/sr5e1/clock.h ****  *
3144:src-gen/sr5e1/clock.h ****  * @api
3145:src-gen/sr5e1/clock.h ****  */
3146:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_SPI2(void) {
3147:src-gen/sr5e1/clock.h **** 
3148:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_SPI2);
3149:src-gen/sr5e1/clock.h **** }
3150:src-gen/sr5e1/clock.h **** 
3151:src-gen/sr5e1/clock.h **** /**
3152:src-gen/sr5e1/clock.h ****  * @brief   Enables SPI3 clock
3153:src-gen/sr5e1/clock.h ****  *
3154:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3155:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3156:src-gen/sr5e1/clock.h ****  *
3157:src-gen/sr5e1/clock.h ****  * @api
3158:src-gen/sr5e1/clock.h ****  */
3159:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_SPI3(bool smode) {
3160:src-gen/sr5e1/clock.h **** 
3161:src-gen/sr5e1/clock.h ****     clock_enable_APB1L(smode, RCC_APB1LENR_SPI3);
3162:src-gen/sr5e1/clock.h **** }
 396              		.loc 2 3162 1
 397 01ca 47E0     		b	.L22
 398              	.L27:
 399 01cc 0123     		movs	r3, #1
 400 01ce 8DF80F30 		strb	r3, [sp, #15]
 401 01d2 9DF80F30 		ldrb	r3, [sp, #15]
 402 01d6 8DF80E30 		strb	r3, [sp, #14]
 403 01da 4FF08073 		mov	r3, #16777216
 404 01de 0293     		str	r3, [sp, #8]
 405              	.LBE59:
 406              	.LBE58:
 407              	.LBB62:
 408              	.LBB63:
 409              	.LBB64:
 410              	.LBB65:
1402:src-gen/sr5e1/clock.h ****     if (smode) {
 411              		.loc 2 1402 19
 412 01e0 4FF08843 		mov	r3, #1140850688
 413 01e4 D3F88820 		ldr	r2, [r3, #136]
 414 01e8 4FF08841 		mov	r1, #1140850688
 415 01ec 029B     		ldr	r3, [sp, #8]
 416 01ee 1343     		orrs	r3, r3, r2
 417 01f0 C1F88830 		str	r3, [r1, #136]
1403:src-gen/sr5e1/clock.h ****         RCC->C1_APB2LSMENR |= m;
 418              		.loc 2 1403 8
 419 01f4 9DF80E30 		ldrb	r3, [sp, #14]	@ zero_extendqisi2
 420 01f8 002B     		cmp	r3, #0
 421 01fa 14D0     		beq	.L31
1404:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 422              		.loc 2 1404 28
 423 01fc 4FF08843 		mov	r3, #1140850688
 424 0200 D3F8A820 		ldr	r2, [r3, #168]
 425 0204 4FF08841 		mov	r1, #1140850688
 426 0208 029B     		ldr	r3, [sp, #8]
 427 020a 1343     		orrs	r3, r3, r2
 428 020c C1F8A830 		str	r3, [r1, #168]
1406:src-gen/sr5e1/clock.h **** #endif
 429              		.loc 2 1406 28
 430 0210 4FF08843 		mov	r3, #1140850688
 431 0214 D3F8C820 		ldr	r2, [r3, #200]
 432 0218 4FF08841 		mov	r1, #1140850688
 433 021c 029B     		ldr	r3, [sp, #8]
 434 021e 1343     		orrs	r3, r3, r2
 435 0220 C1F8C830 		str	r3, [r1, #200]
 436 0224 15E0     		b	.L32
 437              	.L31:
1410:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 438              		.loc 2 1410 28
 439 0226 4FF08843 		mov	r3, #1140850688
 440 022a D3F8A820 		ldr	r2, [r3, #168]
1410:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 441              		.loc 2 1410 31
 442 022e 029B     		ldr	r3, [sp, #8]
 443 0230 DB43     		mvns	r3, r3
1410:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 444              		.loc 2 1410 28
 445 0232 4FF08841 		mov	r1, #1140850688
 446 0236 1340     		ands	r3, r3, r2
 447 0238 C1F8A830 		str	r3, [r1, #168]
1412:src-gen/sr5e1/clock.h **** #endif
 448              		.loc 2 1412 28
 449 023c 4FF08843 		mov	r3, #1140850688
 450 0240 D3F8C820 		ldr	r2, [r3, #200]
1412:src-gen/sr5e1/clock.h **** #endif
 451              		.loc 2 1412 31
 452 0244 029B     		ldr	r3, [sp, #8]
 453 0246 DB43     		mvns	r3, r3
1412:src-gen/sr5e1/clock.h **** #endif
 454              		.loc 2 1412 28
 455 0248 4FF08841 		mov	r1, #1140850688
 456 024c 1340     		ands	r3, r3, r2
 457 024e C1F8C830 		str	r3, [r1, #200]
 458              	.L32:
1416:src-gen/sr5e1/clock.h **** }
 459              		.loc 2 1416 15
 460 0252 4FF08843 		mov	r3, #1140850688
 461 0256 D3F88830 		ldr	r3, [r3, #136]
 462              	.LBE65:
 463              	.LBE64:
3163:src-gen/sr5e1/clock.h **** 
3164:src-gen/sr5e1/clock.h **** /**
3165:src-gen/sr5e1/clock.h ****  * @brief   Disables SPI3 clock
3166:src-gen/sr5e1/clock.h ****  *
3167:src-gen/sr5e1/clock.h ****  * @api
3168:src-gen/sr5e1/clock.h ****  */
3169:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_SPI3(void) {
3170:src-gen/sr5e1/clock.h **** 
3171:src-gen/sr5e1/clock.h ****     clock_disable_APB1L(RCC_APB1LENR_SPI3);
3172:src-gen/sr5e1/clock.h **** }
3173:src-gen/sr5e1/clock.h **** 
3174:src-gen/sr5e1/clock.h **** /**
3175:src-gen/sr5e1/clock.h ****  * @brief   Checks if SPI3 clock is enabled
3176:src-gen/sr5e1/clock.h ****  *
3177:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
3178:src-gen/sr5e1/clock.h ****  *
3179:src-gen/sr5e1/clock.h ****  * @api
3180:src-gen/sr5e1/clock.h ****  */
3181:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_SPI3(void) {
3182:src-gen/sr5e1/clock.h **** 
3183:src-gen/sr5e1/clock.h ****     return is_clock_enable_APB1L(RCC_APB1LENR_SPI3);
3184:src-gen/sr5e1/clock.h **** }
3185:src-gen/sr5e1/clock.h **** 
3186:src-gen/sr5e1/clock.h **** /**
3187:src-gen/sr5e1/clock.h ****  * @brief   Resets SPI3
3188:src-gen/sr5e1/clock.h ****  *
3189:src-gen/sr5e1/clock.h ****  * @api
3190:src-gen/sr5e1/clock.h ****  */
3191:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_SPI3(void) {
3192:src-gen/sr5e1/clock.h **** 
3193:src-gen/sr5e1/clock.h ****     clock_reset_APB1L(RCC_APB1LRSTR_SPI3);
3194:src-gen/sr5e1/clock.h **** }
3195:src-gen/sr5e1/clock.h **** 
3196:src-gen/sr5e1/clock.h **** /**
3197:src-gen/sr5e1/clock.h ****  * @brief   Enables SPI4 clock
3198:src-gen/sr5e1/clock.h ****  *
3199:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
3200:src-gen/sr5e1/clock.h ****  *                      sleep mode)
3201:src-gen/sr5e1/clock.h ****  *
3202:src-gen/sr5e1/clock.h ****  * @api
3203:src-gen/sr5e1/clock.h ****  */
3204:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_SPI4(bool smode) {
3205:src-gen/sr5e1/clock.h **** 
3206:src-gen/sr5e1/clock.h ****     clock_enable_APB2L(smode, RCC_APB2LENR_SPI4);
3207:src-gen/sr5e1/clock.h **** }
 464              		.loc 2 3207 1
 465 025a 00BF     		nop
 466              	.L22:
 467              	.LBE63:
 468              	.LBE62:
 123:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         clock_enable_SPI3(true);
 124:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else {
 125:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         clock_enable_SPI4(true);
 126:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     }
 127:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** }
 469              		.loc 1 127 1
 470 025c 00BF     		nop
 471 025e 0AB0     		add	sp, sp, #40
 472              		.cfi_def_cfa_offset 0
 473              		@ sp needed
 474 0260 7047     		bx	lr
 475              	.L35:
 476 0262 00BF     		.align	2
 477              	.L34:
 478 0264 00000000 		.word	DRV_SPI1
 479 0268 00000000 		.word	DRV_SPI2
 480 026c 00000000 		.word	DRV_SPI3
 481              		.cfi_endproc
 482              	.LFE483:
 484              		.section	.text.spi_dev_clock_disable,"ax",%progbits
 485              		.align	1
 486              		.p2align 4,,15
 487              		.global	spi_dev_clock_disable
 488              		.syntax unified
 489              		.thumb
 490              		.thumb_func
 492              	spi_dev_clock_disable:
 493              	.LFB484:
 128:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 129:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /**
 130:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @brief   Disables SPI clock.
 131:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 132:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @param[in] sdp       pointer to a @p spi_driver_t structure
 133:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 134:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @notapi
 135:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  */
 136:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** void spi_dev_clock_disable(spi_driver_t *sdp) {
 494              		.loc 1 136 47
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 24
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498              		@ link register save eliminated.
 499 0000 86B0     		sub	sp, sp, #24
 500              		.cfi_def_cfa_offset 24
 501 0002 0190     		str	r0, [sp, #4]
 137:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 138:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     if (sdp == &DRV_SPI1) {
 502              		.loc 1 138 8
 503 0004 019B     		ldr	r3, [sp, #4]
 504 0006 594A     		ldr	r2, .L45
 505 0008 9342     		cmp	r3, r2
 506 000a 28D1     		bne	.L37
 507 000c 4FF40003 		mov	r3, #8388608
 508 0010 0593     		str	r3, [sp, #20]
 509              	.LBB66:
 510              	.LBB67:
 511              	.LBB68:
 512              	.LBB69:
1429:src-gen/sr5e1/clock.h ****     RCC->C1_APB2LSMENR &= ~m;
 513              		.loc 2 1429 19
 514 0012 4FF08843 		mov	r3, #1140850688
 515 0016 D3F88820 		ldr	r2, [r3, #136]
1429:src-gen/sr5e1/clock.h ****     RCC->C1_APB2LSMENR &= ~m;
 516              		.loc 2 1429 22
 517 001a 059B     		ldr	r3, [sp, #20]
 518 001c DB43     		mvns	r3, r3
1429:src-gen/sr5e1/clock.h ****     RCC->C1_APB2LSMENR &= ~m;
 519              		.loc 2 1429 19
 520 001e 4FF08841 		mov	r1, #1140850688
 521 0022 1340     		ands	r3, r3, r2
 522 0024 C1F88830 		str	r3, [r1, #136]
1430:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 523              		.loc 2 1430 24
 524 0028 4FF08843 		mov	r3, #1140850688
 525 002c D3F8A820 		ldr	r2, [r3, #168]
1430:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 526              		.loc 2 1430 27
 527 0030 059B     		ldr	r3, [sp, #20]
 528 0032 DB43     		mvns	r3, r3
1430:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 529              		.loc 2 1430 24
 530 0034 4FF08841 		mov	r1, #1140850688
 531 0038 1340     		ands	r3, r3, r2
 532 003a C1F8A830 		str	r3, [r1, #168]
1432:src-gen/sr5e1/clock.h **** #endif
 533              		.loc 2 1432 24
 534 003e 4FF08843 		mov	r3, #1140850688
 535 0042 D3F8C820 		ldr	r2, [r3, #200]
1432:src-gen/sr5e1/clock.h **** #endif
 536              		.loc 2 1432 27
 537 0046 059B     		ldr	r3, [sp, #20]
 538 0048 DB43     		mvns	r3, r3
1432:src-gen/sr5e1/clock.h **** #endif
 539              		.loc 2 1432 24
 540 004a 4FF08841 		mov	r1, #1140850688
 541 004e 1340     		ands	r3, r3, r2
 542 0050 C1F8C830 		str	r3, [r1, #200]
1435:src-gen/sr5e1/clock.h **** }
 543              		.loc 2 1435 15
 544 0054 4FF08843 		mov	r3, #1140850688
 545 0058 D3F88830 		ldr	r3, [r3, #136]
 546              	.LBE69:
 547              	.LBE68:
3082:src-gen/sr5e1/clock.h **** 
 548              		.loc 2 3082 1
 549 005c 82E0     		b	.L39
 550              	.L37:
 551              	.LBE67:
 552              	.LBE66:
 139:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         clock_disable_SPI1();
 140:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI2) {
 553              		.loc 1 140 15
 554 005e 019B     		ldr	r3, [sp, #4]
 555 0060 434A     		ldr	r2, .L45+4
 556 0062 9342     		cmp	r3, r2
 557 0064 28D1     		bne	.L40
 558 0066 4FF40003 		mov	r3, #8388608
 559 006a 0493     		str	r3, [sp, #16]
 560              	.LBB70:
 561              	.LBB71:
 562              	.LBB72:
 563              	.LBB73:
1354:src-gen/sr5e1/clock.h ****     RCC->C1_APB1LSMENR &= ~m;
 564              		.loc 2 1354 19
 565 006c 4FF08843 		mov	r3, #1140850688
 566 0070 D3F88020 		ldr	r2, [r3, #128]
1354:src-gen/sr5e1/clock.h ****     RCC->C1_APB1LSMENR &= ~m;
 567              		.loc 2 1354 22
 568 0074 049B     		ldr	r3, [sp, #16]
 569 0076 DB43     		mvns	r3, r3
1354:src-gen/sr5e1/clock.h ****     RCC->C1_APB1LSMENR &= ~m;
 570              		.loc 2 1354 19
 571 0078 4FF08841 		mov	r1, #1140850688
 572 007c 1340     		ands	r3, r3, r2
 573 007e C1F88030 		str	r3, [r1, #128]
1355:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 574              		.loc 2 1355 24
 575 0082 4FF08843 		mov	r3, #1140850688
 576 0086 D3F8A020 		ldr	r2, [r3, #160]
1355:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 577              		.loc 2 1355 27
 578 008a 049B     		ldr	r3, [sp, #16]
 579 008c DB43     		mvns	r3, r3
1355:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 580              		.loc 2 1355 24
 581 008e 4FF08841 		mov	r1, #1140850688
 582 0092 1340     		ands	r3, r3, r2
 583 0094 C1F8A030 		str	r3, [r1, #160]
1357:src-gen/sr5e1/clock.h **** #endif
 584              		.loc 2 1357 24
 585 0098 4FF08843 		mov	r3, #1140850688
 586 009c D3F8C020 		ldr	r2, [r3, #192]
1357:src-gen/sr5e1/clock.h **** #endif
 587              		.loc 2 1357 27
 588 00a0 049B     		ldr	r3, [sp, #16]
 589 00a2 DB43     		mvns	r3, r3
1357:src-gen/sr5e1/clock.h **** #endif
 590              		.loc 2 1357 24
 591 00a4 4FF08841 		mov	r1, #1140850688
 592 00a8 1340     		ands	r3, r3, r2
 593 00aa C1F8C030 		str	r3, [r1, #192]
1360:src-gen/sr5e1/clock.h **** }
 594              		.loc 2 1360 15
 595 00ae 4FF08843 		mov	r3, #1140850688
 596 00b2 D3F88030 		ldr	r3, [r3, #128]
 597              	.LBE73:
 598              	.LBE72:
3127:src-gen/sr5e1/clock.h **** 
 599              		.loc 2 3127 1
 600 00b6 55E0     		b	.L39
 601              	.L40:
 602              	.LBE71:
 603              	.LBE70:
 141:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         clock_disable_SPI2();
 142:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI3) {
 604              		.loc 1 142 15
 605 00b8 019B     		ldr	r3, [sp, #4]
 606 00ba 2E4A     		ldr	r2, .L45+8
 607 00bc 9342     		cmp	r3, r2
 608 00be 28D1     		bne	.L42
 609 00c0 4FF08073 		mov	r3, #16777216
 610 00c4 0393     		str	r3, [sp, #12]
 611              	.LBB74:
 612              	.LBB75:
 613              	.LBB76:
 614              	.LBB77:
1354:src-gen/sr5e1/clock.h ****     RCC->C1_APB1LSMENR &= ~m;
 615              		.loc 2 1354 19
 616 00c6 4FF08843 		mov	r3, #1140850688
 617 00ca D3F88020 		ldr	r2, [r3, #128]
1354:src-gen/sr5e1/clock.h ****     RCC->C1_APB1LSMENR &= ~m;
 618              		.loc 2 1354 22
 619 00ce 039B     		ldr	r3, [sp, #12]
 620 00d0 DB43     		mvns	r3, r3
1354:src-gen/sr5e1/clock.h ****     RCC->C1_APB1LSMENR &= ~m;
 621              		.loc 2 1354 19
 622 00d2 4FF08841 		mov	r1, #1140850688
 623 00d6 1340     		ands	r3, r3, r2
 624 00d8 C1F88030 		str	r3, [r1, #128]
1355:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 625              		.loc 2 1355 24
 626 00dc 4FF08843 		mov	r3, #1140850688
 627 00e0 D3F8A020 		ldr	r2, [r3, #160]
1355:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 628              		.loc 2 1355 27
 629 00e4 039B     		ldr	r3, [sp, #12]
 630 00e6 DB43     		mvns	r3, r3
1355:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 631              		.loc 2 1355 24
 632 00e8 4FF08841 		mov	r1, #1140850688
 633 00ec 1340     		ands	r3, r3, r2
 634 00ee C1F8A030 		str	r3, [r1, #160]
1357:src-gen/sr5e1/clock.h **** #endif
 635              		.loc 2 1357 24
 636 00f2 4FF08843 		mov	r3, #1140850688
 637 00f6 D3F8C020 		ldr	r2, [r3, #192]
1357:src-gen/sr5e1/clock.h **** #endif
 638              		.loc 2 1357 27
 639 00fa 039B     		ldr	r3, [sp, #12]
 640 00fc DB43     		mvns	r3, r3
1357:src-gen/sr5e1/clock.h **** #endif
 641              		.loc 2 1357 24
 642 00fe 4FF08841 		mov	r1, #1140850688
 643 0102 1340     		ands	r3, r3, r2
 644 0104 C1F8C030 		str	r3, [r1, #192]
1360:src-gen/sr5e1/clock.h **** }
 645              		.loc 2 1360 15
 646 0108 4FF08843 		mov	r3, #1140850688
 647 010c D3F88030 		ldr	r3, [r3, #128]
 648              	.LBE77:
 649              	.LBE76:
3172:src-gen/sr5e1/clock.h **** 
 650              		.loc 2 3172 1
 651 0110 28E0     		b	.L39
 652              	.L42:
 653 0112 4FF08073 		mov	r3, #16777216
 654 0116 0293     		str	r3, [sp, #8]
 655              	.LBE75:
 656              	.LBE74:
 657              	.LBB78:
 658              	.LBB79:
 659              	.LBB80:
 660              	.LBB81:
1429:src-gen/sr5e1/clock.h ****     RCC->C1_APB2LSMENR &= ~m;
 661              		.loc 2 1429 19
 662 0118 4FF08843 		mov	r3, #1140850688
 663 011c D3F88820 		ldr	r2, [r3, #136]
1429:src-gen/sr5e1/clock.h ****     RCC->C1_APB2LSMENR &= ~m;
 664              		.loc 2 1429 22
 665 0120 029B     		ldr	r3, [sp, #8]
 666 0122 DB43     		mvns	r3, r3
1429:src-gen/sr5e1/clock.h ****     RCC->C1_APB2LSMENR &= ~m;
 667              		.loc 2 1429 19
 668 0124 4FF08841 		mov	r1, #1140850688
 669 0128 1340     		ands	r3, r3, r2
 670 012a C1F88830 		str	r3, [r1, #136]
1430:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 671              		.loc 2 1430 24
 672 012e 4FF08843 		mov	r3, #1140850688
 673 0132 D3F8A820 		ldr	r2, [r3, #168]
1430:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 674              		.loc 2 1430 27
 675 0136 029B     		ldr	r3, [sp, #8]
 676 0138 DB43     		mvns	r3, r3
1430:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 677              		.loc 2 1430 24
 678 013a 4FF08841 		mov	r1, #1140850688
 679 013e 1340     		ands	r3, r3, r2
 680 0140 C1F8A830 		str	r3, [r1, #168]
1432:src-gen/sr5e1/clock.h **** #endif
 681              		.loc 2 1432 24
 682 0144 4FF08843 		mov	r3, #1140850688
 683 0148 D3F8C820 		ldr	r2, [r3, #200]
1432:src-gen/sr5e1/clock.h **** #endif
 684              		.loc 2 1432 27
 685 014c 029B     		ldr	r3, [sp, #8]
 686 014e DB43     		mvns	r3, r3
1432:src-gen/sr5e1/clock.h **** #endif
 687              		.loc 2 1432 24
 688 0150 4FF08841 		mov	r1, #1140850688
 689 0154 1340     		ands	r3, r3, r2
 690 0156 C1F8C830 		str	r3, [r1, #200]
1435:src-gen/sr5e1/clock.h **** }
 691              		.loc 2 1435 15
 692 015a 4FF08843 		mov	r3, #1140850688
 693 015e D3F88830 		ldr	r3, [r3, #136]
 694              	.LBE81:
 695              	.LBE80:
3208:src-gen/sr5e1/clock.h **** 
3209:src-gen/sr5e1/clock.h **** /**
3210:src-gen/sr5e1/clock.h ****  * @brief   Disables SPI4 clock
3211:src-gen/sr5e1/clock.h ****  *
3212:src-gen/sr5e1/clock.h ****  * @api
3213:src-gen/sr5e1/clock.h ****  */
3214:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_SPI4(void) {
3215:src-gen/sr5e1/clock.h **** 
3216:src-gen/sr5e1/clock.h ****     clock_disable_APB2L(RCC_APB2LENR_SPI4);
3217:src-gen/sr5e1/clock.h **** }
 696              		.loc 2 3217 1
 697 0162 00BF     		nop
 698              	.L39:
 699              	.LBE79:
 700              	.LBE78:
 143:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         clock_disable_SPI3();
 144:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else {
 145:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         clock_disable_SPI4();
 146:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     }
 147:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** }
 701              		.loc 1 147 1
 702 0164 00BF     		nop
 703 0166 06B0     		add	sp, sp, #24
 704              		.cfi_def_cfa_offset 0
 705              		@ sp needed
 706 0168 7047     		bx	lr
 707              	.L46:
 708 016a 00BF     		.align	2
 709              	.L45:
 710 016c 00000000 		.word	DRV_SPI1
 711 0170 00000000 		.word	DRV_SPI2
 712 0174 00000000 		.word	DRV_SPI3
 713              		.cfi_endproc
 714              	.LFE484:
 716              		.section	.text.spi_dev_get_dma_tx_trigger,"ax",%progbits
 717              		.align	1
 718              		.p2align 4,,15
 719              		.global	spi_dev_get_dma_tx_trigger
 720              		.syntax unified
 721              		.thumb
 722              		.thumb_func
 724              	spi_dev_get_dma_tx_trigger:
 725              	.LFB485:
 148:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 149:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /**
 150:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @brief   Returns SPI DMA TX trigger.
 151:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 152:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @param[in] sdp       pointer to a @p spi_driver_t structure
 153:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @return              DMA TX trigger.
 154:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 155:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @notapi
 156:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  */
 157:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** uint32_t spi_dev_get_dma_tx_trigger(spi_driver_t *sdp) {
 726              		.loc 1 157 56
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 16
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730              		@ link register save eliminated.
 731 0000 84B0     		sub	sp, sp, #16
 732              		.cfi_def_cfa_offset 16
 733 0002 0190     		str	r0, [sp, #4]
 158:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 159:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     uint32_t dma_tx_trigger;
 160:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 161:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     if (sdp == &DRV_SPI1) {
 734              		.loc 1 161 8
 735 0004 019B     		ldr	r3, [sp, #4]
 736 0006 0D4A     		ldr	r2, .L53
 737 0008 9342     		cmp	r3, r2
 738 000a 02D1     		bne	.L48
 162:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         dma_tx_trigger = DMAMUX1_SPI1_TX;
 739              		.loc 1 162 24
 740 000c 0B23     		movs	r3, #11
 741 000e 0393     		str	r3, [sp, #12]
 742 0010 0FE0     		b	.L49
 743              	.L48:
 163:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI2) {
 744              		.loc 1 163 15
 745 0012 019B     		ldr	r3, [sp, #4]
 746 0014 0A4A     		ldr	r2, .L53+4
 747 0016 9342     		cmp	r3, r2
 748 0018 02D1     		bne	.L50
 164:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         dma_tx_trigger = DMAMUX1_SPI2_TX;
 749              		.loc 1 164 24
 750 001a 0D23     		movs	r3, #13
 751 001c 0393     		str	r3, [sp, #12]
 752 001e 08E0     		b	.L49
 753              	.L50:
 165:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI3) {
 754              		.loc 1 165 15
 755 0020 019B     		ldr	r3, [sp, #4]
 756 0022 084A     		ldr	r2, .L53+8
 757 0024 9342     		cmp	r3, r2
 758 0026 02D1     		bne	.L51
 166:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         dma_tx_trigger = DMAMUX1_SPI3_TX;
 759              		.loc 1 166 24
 760 0028 0F23     		movs	r3, #15
 761 002a 0393     		str	r3, [sp, #12]
 762 002c 01E0     		b	.L49
 763              	.L51:
 167:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else {
 168:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         dma_tx_trigger = DMAMUX1_SPI4_TX;
 764              		.loc 1 168 24
 765 002e 6B23     		movs	r3, #107
 766 0030 0393     		str	r3, [sp, #12]
 767              	.L49:
 169:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     }
 170:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 171:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     return dma_tx_trigger;
 768              		.loc 1 171 12
 769 0032 039B     		ldr	r3, [sp, #12]
 172:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** }
 770              		.loc 1 172 1
 771 0034 1846     		mov	r0, r3
 772 0036 04B0     		add	sp, sp, #16
 773              		.cfi_def_cfa_offset 0
 774              		@ sp needed
 775 0038 7047     		bx	lr
 776              	.L54:
 777 003a 00BF     		.align	2
 778              	.L53:
 779 003c 00000000 		.word	DRV_SPI1
 780 0040 00000000 		.word	DRV_SPI2
 781 0044 00000000 		.word	DRV_SPI3
 782              		.cfi_endproc
 783              	.LFE485:
 785              		.section	.text.spi_dev_get_dma_rx_trigger,"ax",%progbits
 786              		.align	1
 787              		.p2align 4,,15
 788              		.global	spi_dev_get_dma_rx_trigger
 789              		.syntax unified
 790              		.thumb
 791              		.thumb_func
 793              	spi_dev_get_dma_rx_trigger:
 794              	.LFB486:
 173:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 174:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /**
 175:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @brief   Returns SPI DMA RX trigger.
 176:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 177:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @param[in] sdp       pointer to a @p spi_driver_t structure
 178:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @return              DMA RX trigger.
 179:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 180:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @notapi
 181:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  */
 182:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** uint32_t spi_dev_get_dma_rx_trigger(spi_driver_t *sdp) {
 795              		.loc 1 182 56
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 16
 798              		@ frame_needed = 0, uses_anonymous_args = 0
 799              		@ link register save eliminated.
 800 0000 84B0     		sub	sp, sp, #16
 801              		.cfi_def_cfa_offset 16
 802 0002 0190     		str	r0, [sp, #4]
 183:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 184:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     uint32_t dma_rx_trigger;
 185:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 186:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     if (sdp == &DRV_SPI1) {
 803              		.loc 1 186 8
 804 0004 019B     		ldr	r3, [sp, #4]
 805 0006 0D4A     		ldr	r2, .L61
 806 0008 9342     		cmp	r3, r2
 807 000a 02D1     		bne	.L56
 187:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         dma_rx_trigger = DMAMUX1_SPI1_RX;
 808              		.loc 1 187 24
 809 000c 0A23     		movs	r3, #10
 810 000e 0393     		str	r3, [sp, #12]
 811 0010 0FE0     		b	.L57
 812              	.L56:
 188:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI2) {
 813              		.loc 1 188 15
 814 0012 019B     		ldr	r3, [sp, #4]
 815 0014 0A4A     		ldr	r2, .L61+4
 816 0016 9342     		cmp	r3, r2
 817 0018 02D1     		bne	.L58
 189:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         dma_rx_trigger = DMAMUX1_SPI2_RX;
 818              		.loc 1 189 24
 819 001a 0C23     		movs	r3, #12
 820 001c 0393     		str	r3, [sp, #12]
 821 001e 08E0     		b	.L57
 822              	.L58:
 190:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI3) {
 823              		.loc 1 190 15
 824 0020 019B     		ldr	r3, [sp, #4]
 825 0022 084A     		ldr	r2, .L61+8
 826 0024 9342     		cmp	r3, r2
 827 0026 02D1     		bne	.L59
 191:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         dma_rx_trigger = DMAMUX1_SPI3_RX;
 828              		.loc 1 191 24
 829 0028 0E23     		movs	r3, #14
 830 002a 0393     		str	r3, [sp, #12]
 831 002c 01E0     		b	.L57
 832              	.L59:
 192:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else {
 193:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         dma_rx_trigger = DMAMUX1_SPI4_RX;
 833              		.loc 1 193 24
 834 002e 6A23     		movs	r3, #106
 835 0030 0393     		str	r3, [sp, #12]
 836              	.L57:
 194:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     }
 195:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 196:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     return dma_rx_trigger;
 837              		.loc 1 196 12
 838 0032 039B     		ldr	r3, [sp, #12]
 197:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** }
 839              		.loc 1 197 1
 840 0034 1846     		mov	r0, r3
 841 0036 04B0     		add	sp, sp, #16
 842              		.cfi_def_cfa_offset 0
 843              		@ sp needed
 844 0038 7047     		bx	lr
 845              	.L62:
 846 003a 00BF     		.align	2
 847              	.L61:
 848 003c 00000000 		.word	DRV_SPI1
 849 0040 00000000 		.word	DRV_SPI2
 850 0044 00000000 		.word	DRV_SPI3
 851              		.cfi_endproc
 852              	.LFE486:
 854              		.section	.text.spi_dev_get_vector,"ax",%progbits
 855              		.align	1
 856              		.p2align 4,,15
 857              		.global	spi_dev_get_vector
 858              		.syntax unified
 859              		.thumb
 860              		.thumb_func
 862              	spi_dev_get_vector:
 863              	.LFB487:
 198:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 199:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /**
 200:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @brief   Returns SPI interrupt vector.
 201:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 202:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @param[in] sdp       pointer to a @p spi_driver_t structure
 203:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @return              SPI interrupt vector
 204:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 205:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @notapi
 206:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  */
 207:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** IRQn_Type spi_dev_get_vector(spi_driver_t *sdp) {
 864              		.loc 1 207 49
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 16
 867              		@ frame_needed = 0, uses_anonymous_args = 0
 868              		@ link register save eliminated.
 869 0000 84B0     		sub	sp, sp, #16
 870              		.cfi_def_cfa_offset 16
 871 0002 0190     		str	r0, [sp, #4]
 208:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 209:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     IRQn_Type vector;
 210:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 211:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     if (sdp == &DRV_SPI1) {
 872              		.loc 1 211 8
 873 0004 019B     		ldr	r3, [sp, #4]
 874 0006 0F4A     		ldr	r2, .L69
 875 0008 9342     		cmp	r3, r2
 876 000a 03D1     		bne	.L64
 212:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         vector = IRQ_SPI1_VECTOR;
 877              		.loc 1 212 16
 878 000c 2323     		movs	r3, #35
 879 000e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 880 0012 12E0     		b	.L65
 881              	.L64:
 213:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI2) {
 882              		.loc 1 213 15
 883 0014 019B     		ldr	r3, [sp, #4]
 884 0016 0C4A     		ldr	r2, .L69+4
 885 0018 9342     		cmp	r3, r2
 886 001a 03D1     		bne	.L66
 214:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         vector = IRQ_SPI2_VECTOR;
 887              		.loc 1 214 16
 888 001c 2423     		movs	r3, #36
 889 001e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 890 0022 0AE0     		b	.L65
 891              	.L66:
 215:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else if (sdp == &DRV_SPI3) {
 892              		.loc 1 215 15
 893 0024 019B     		ldr	r3, [sp, #4]
 894 0026 094A     		ldr	r2, .L69+8
 895 0028 9342     		cmp	r3, r2
 896 002a 03D1     		bne	.L67
 216:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         vector = IRQ_SPI3_VECTOR;
 897              		.loc 1 216 16
 898 002c 3323     		movs	r3, #51
 899 002e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 900 0032 02E0     		b	.L65
 901              	.L67:
 217:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     } else {
 218:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****         vector = IRQ_SPI4_VECTOR;
 902              		.loc 1 218 16
 903 0034 3423     		movs	r3, #52
 904 0036 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 905              	.L65:
 219:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     }
 220:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 221:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     return vector;
 906              		.loc 1 221 12
 907 003a BDF90E30 		ldrsh	r3, [sp, #14]
 222:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** }
 908              		.loc 1 222 1
 909 003e 1846     		mov	r0, r3
 910 0040 04B0     		add	sp, sp, #16
 911              		.cfi_def_cfa_offset 0
 912              		@ sp needed
 913 0042 7047     		bx	lr
 914              	.L70:
 915              		.align	2
 916              	.L69:
 917 0044 00000000 		.word	DRV_SPI1
 918 0048 00000000 		.word	DRV_SPI2
 919 004c 00000000 		.word	DRV_SPI3
 920              		.cfi_endproc
 921              	.LFE487:
 923              		.section	.text.VectorCC,"ax",%progbits
 924              		.align	1
 925              		.p2align 4,,15
 926              		.global	VectorCC
 927              		.syntax unified
 928              		.thumb
 929              		.thumb_func
 931              	VectorCC:
 932              	.LFB488:
 223:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 224:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /**
 225:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @brief   SPI1 interrupt handler.
 226:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 227:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @isr
 228:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  */
 229:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** IRQ_HANDLER(IRQ_SPI1_HANDLER) {
 933              		.loc 1 229 31
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 0
 936              		@ frame_needed = 0, uses_anonymous_args = 0
 937 0000 08B5     		push	{r3, lr}
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 3, -8
 940              		.cfi_offset 14, -4
 230:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 231:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     IRQ_PROLOGUE();
 232:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 233:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     __spi_serve_interrupt(&DRV_SPI1);
 941              		.loc 1 233 5
 942 0002 0248     		ldr	r0, .L72
 943 0004 FFF7FEFF 		bl	__spi_serve_interrupt
 234:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 235:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     IRQ_EPILOGUE();
 236:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** }
 944              		.loc 1 236 1
 945 0008 00BF     		nop
 946 000a 08BD     		pop	{r3, pc}
 947              	.L73:
 948              		.align	2
 949              	.L72:
 950 000c 00000000 		.word	DRV_SPI1
 951              		.cfi_endproc
 952              	.LFE488:
 954              		.section	.text.VectorD0,"ax",%progbits
 955              		.align	1
 956              		.p2align 4,,15
 957              		.global	VectorD0
 958              		.syntax unified
 959              		.thumb
 960              		.thumb_func
 962              	VectorD0:
 963              	.LFB489:
 237:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 238:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /**
 239:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @brief   SPI2 interrupt handler.
 240:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 241:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @isr
 242:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  */
 243:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** IRQ_HANDLER(IRQ_SPI2_HANDLER) {
 964              		.loc 1 243 31
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 0
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 968 0000 08B5     		push	{r3, lr}
 969              		.cfi_def_cfa_offset 8
 970              		.cfi_offset 3, -8
 971              		.cfi_offset 14, -4
 244:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 245:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     IRQ_PROLOGUE();
 246:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 247:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     __spi_serve_interrupt(&DRV_SPI2);
 972              		.loc 1 247 5
 973 0002 0248     		ldr	r0, .L75
 974 0004 FFF7FEFF 		bl	__spi_serve_interrupt
 248:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 249:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     IRQ_EPILOGUE();
 250:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** }
 975              		.loc 1 250 1
 976 0008 00BF     		nop
 977 000a 08BD     		pop	{r3, pc}
 978              	.L76:
 979              		.align	2
 980              	.L75:
 981 000c 00000000 		.word	DRV_SPI2
 982              		.cfi_endproc
 983              	.LFE489:
 985              		.section	.text.Vector10C,"ax",%progbits
 986              		.align	1
 987              		.p2align 4,,15
 988              		.global	Vector10C
 989              		.syntax unified
 990              		.thumb
 991              		.thumb_func
 993              	Vector10C:
 994              	.LFB490:
 251:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 252:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /**
 253:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @brief   SPI3 interrupt handler.
 254:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 255:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @isr
 256:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  */
 257:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** IRQ_HANDLER(IRQ_SPI3_HANDLER) {
 995              		.loc 1 257 31
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 0
 998              		@ frame_needed = 0, uses_anonymous_args = 0
 999 0000 08B5     		push	{r3, lr}
 1000              		.cfi_def_cfa_offset 8
 1001              		.cfi_offset 3, -8
 1002              		.cfi_offset 14, -4
 258:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 259:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     IRQ_PROLOGUE();
 260:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 261:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     __spi_serve_interrupt(&DRV_SPI3);
 1003              		.loc 1 261 5
 1004 0002 0248     		ldr	r0, .L78
 1005 0004 FFF7FEFF 		bl	__spi_serve_interrupt
 262:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 263:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     IRQ_EPILOGUE();
 264:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** }
 1006              		.loc 1 264 1
 1007 0008 00BF     		nop
 1008 000a 08BD     		pop	{r3, pc}
 1009              	.L79:
 1010              		.align	2
 1011              	.L78:
 1012 000c 00000000 		.word	DRV_SPI3
 1013              		.cfi_endproc
 1014              	.LFE490:
 1016              		.section	.text.Vector110,"ax",%progbits
 1017              		.align	1
 1018              		.p2align 4,,15
 1019              		.global	Vector110
 1020              		.syntax unified
 1021              		.thumb
 1022              		.thumb_func
 1024              	Vector110:
 1025              	.LFB491:
 265:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 266:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** /**
 267:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @brief   SPI4 interrupt handler.
 268:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  *
 269:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  * @isr
 270:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****  */
 271:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** IRQ_HANDLER(IRQ_SPI4_HANDLER) {
 1026              		.loc 1 271 31
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030 0000 08B5     		push	{r3, lr}
 1031              		.cfi_def_cfa_offset 8
 1032              		.cfi_offset 3, -8
 1033              		.cfi_offset 14, -4
 272:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 273:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     IRQ_PROLOGUE();
 274:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 275:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     __spi_serve_interrupt(&DRV_SPI4);
 1034              		.loc 1 275 5
 1035 0002 0248     		ldr	r0, .L81
 1036 0004 FFF7FEFF 		bl	__spi_serve_interrupt
 276:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** 
 277:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c ****     IRQ_EPILOGUE();
 278:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/src/sr5e1\spi_dev.c **** }
 1037              		.loc 1 278 1
 1038 0008 00BF     		nop
 1039 000a 08BD     		pop	{r3, pc}
 1040              	.L82:
 1041              		.align	2
 1042              	.L81:
 1043 000c 00000000 		.word	DRV_SPI4
 1044              		.cfi_endproc
 1045              	.LFE491:
 1047              		.text
 1048              	.Letext0:
 1049              		.file 3 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/sr5e1xx.h"
 1050              		.file 4 "c:\\stellarstudio-7.0\\sdks\\tools-1.4.0\\toolchain\\arm\\mingw64_nt\\10.3-2021.10\\arm-n
 1051              		.file 5 "c:\\stellarstudio-7.0\\sdks\\tools-1.4.0\\toolchain\\arm\\mingw64_nt\\10.3-2021.10\\arm-n
 1052              		.file 6 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_DMA.
 1053              		.file 7 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_DMAM
 1054              		.file 8 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_RCC.
 1055              		.file 9 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_SPI.
 1056              		.file 10 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/System/GPIO/include/gpio.h"
 1057              		.file 11 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/include/spi.h"
 1058              		.file 12 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/include/spi_privat
 1059              		.file 13 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Comms/SPI/include/sr5e1/spi_
 1060              		.file 14 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/System/DMA/include/dma.h"
 1061              		.file 15 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/OS/OSAL/include/osal.h"
DEFINED SYMBOLS
                            *ABS*:00000000 spi_dev.c
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:19     .text.spi_dev_get_reg_ptr:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:26     .text.spi_dev_get_reg_ptr:00000000 spi_dev_get_reg_ptr
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:82     .text.spi_dev_get_reg_ptr:0000003c $d
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:93     .text.spi_dev_get_clock:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:100    .text.spi_dev_get_clock:00000000 spi_dev_get_clock
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:155    .text.spi_dev_get_clock:0000003c $d
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:164    .text.spi_dev_clock_enable:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:171    .text.spi_dev_clock_enable:00000000 spi_dev_clock_enable
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:478    .text.spi_dev_clock_enable:00000264 $d
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:485    .text.spi_dev_clock_disable:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:492    .text.spi_dev_clock_disable:00000000 spi_dev_clock_disable
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:710    .text.spi_dev_clock_disable:0000016c $d
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:717    .text.spi_dev_get_dma_tx_trigger:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:724    .text.spi_dev_get_dma_tx_trigger:00000000 spi_dev_get_dma_tx_trigger
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:779    .text.spi_dev_get_dma_tx_trigger:0000003c $d
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:786    .text.spi_dev_get_dma_rx_trigger:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:793    .text.spi_dev_get_dma_rx_trigger:00000000 spi_dev_get_dma_rx_trigger
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:848    .text.spi_dev_get_dma_rx_trigger:0000003c $d
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:855    .text.spi_dev_get_vector:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:862    .text.spi_dev_get_vector:00000000 spi_dev_get_vector
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:917    .text.spi_dev_get_vector:00000044 $d
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:924    .text.VectorCC:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:931    .text.VectorCC:00000000 VectorCC
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:950    .text.VectorCC:0000000c $d
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:955    .text.VectorD0:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:962    .text.VectorD0:00000000 VectorD0
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:981    .text.VectorD0:0000000c $d
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:986    .text.Vector10C:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:993    .text.Vector10C:00000000 Vector10C
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:1012   .text.Vector10C:0000000c $d
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:1017   .text.Vector110:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:1024   .text.Vector110:00000000 Vector110
C:\Users\EVERYO~1\AppData\Local\Temp\cc8dwcTe.s:1043   .text.Vector110:0000000c $d
                           .group:00000000 wm4.0.1ea29c7543256e0887205fa7f8c557c8
                           .group:00000000 wm4.sr5e1xx.h.22.e5c808533cc52ed19fb0830cd7d98924
                           .group:00000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.cmsis_version.h.32.0f826810625204eca22a19868bdc7586
                           .group:00000000 wm4.core_cm7.h.66.8ab2de36917d6fcae18019067fda13e0
                           .group:00000000 wm4.cmsis_gcc.h.26.498d0ad17a45fc9ef20fdc01caf02259
                           .group:00000000 wm4.core_cm7.h.174.43edb295ecdaadad738f48ba6011ffad
                           .group:00000000 wm4.mpu_armv7.h.32.83326921a797fa9d6f70449916b4b839
                           .group:00000000 wm4.cachel1_armv7.h.32.abd77761a989e008b0c60891114a33c7
                           .group:00000000 wm4.SR5E1_ADC.h.14.21608e6aff125ba995dd767d6d8dc311
                           .group:00000000 wm4.SR5E1_CEM.h.14.01fe5742c8f1ae35b1f3af05932f702e
                           .group:00000000 wm4.SR5E1_CMU.h.14.2617b38b159abe38028862394531e06d
                           .group:00000000 wm4.SR5E1_COMP.h.14.4b6fdfe4f5f7fd9bedf3a99b98bdf4cd
                           .group:00000000 wm4.SR5E1_CORDIC.h.14.354fbf7c9eaf6963d38eaa25cf28ffe8
                           .group:00000000 wm4.SR5E1_CRC.h.14.c64d0f7767671ddb92e9ead0a1162100
                           .group:00000000 wm4.SR5E1_DAC.h.14.8c26a0ff04b0cfeb55306cc3f22187b8
                           .group:00000000 wm4.SR5E1_DBGMCU.h.14.427df893d53a8044654f017ba01c25ed
                           .group:00000000 wm4.SR5E1_DMA.h.14.a7f9a92f844b40a86965798c2e64240b
                           .group:00000000 wm4.SR5E1_DMAMUX.h.14.471b3b4dfd4d41515f1df49493698866
                           .group:00000000 wm4.SR5E1_EXTI.h.14.a325ea3fe89cd84894660551c33241ea
                           .group:00000000 wm4.SR5E1_FCCU.h.14.0ebf0f0f36e079d28613ad2c80e17e23
                           .group:00000000 wm4.SR5E1_FDCAN.h.14.ac57101fad5dbc798bfb93f34c899de7
                           .group:00000000 wm4.SR5E1_FLASH_REG_ITF.h.14.d23d1d44923f9b20b8c8fdb51d66aefd
                           .group:00000000 wm4.SR5E1_GPIO.h.14.1c84071e130d7c64b62470ab0e18a1f1
                           .group:00000000 wm4.SR5E1_HRTIM.h.24.03932387d2522e6bd5c772a4edaf2f5d
                           .group:00000000 wm4.SR5E1_HSEM.h.14.cbe70eee519f01b16452c3f8c99d8df1
                           .group:00000000 wm4.SR5E1_I2C.h.14.350ba3e0f4fd57828457efa80135c36c
                           .group:00000000 wm4.SR5E1_IMA.h.14.62b7088985ab2b7ce9b030a02daa1f7d
                           .group:00000000 wm4.SR5E1_IWDG.h.14.20b7c5f05cf7ae94464c360d7af3660d
                           .group:00000000 wm4.SR5E1_MEMU.h.14.04bad7ae4c52ce334a4fc900aad2ae5b
                           .group:00000000 wm4.SR5E1_NVM_CTRL.h.14.5f442617f0628d4f16258f211c614ef9
                           .group:00000000 wm4.SR5E1_PLLDIG.h.14.bd87a8e6917eee17dae2f312c8e5fa53
                           .group:00000000 wm4.SR5E1_PMC_DIG.h.14.54173b566c6656344766ec4ef46c9281
                           .group:00000000 wm4.SR5E1_RCC.h.14.56734803c71534de286e793a53649740
                           .group:00000000 wm4.SR5E1_RTC.h.14.47037cbc7d8175dbf2be1dc0bb955e3f
                           .group:00000000 wm4.SR5E1_SD_ADC.h.14.552b97d0b8f3c1fd4df6d8964b2f1a80
                           .group:00000000 wm4.SR5E1_SMPU.h.14.8ce5bb6d5d7c579cd725f492f46e9085
                           .group:00000000 wm4.SR5E1_SPI.h.14.42d52112e540f85ade4d9135f8b87d72
                           .group:00000000 wm4.SR5E1_SSCM.h.14.8e6a2ad0ce5fca422fc3d69939b6125b
                           .group:00000000 wm4.SR5E1_SYSCFG.h.14.02b969490118ce4069914b5e94f7ca65
                           .group:00000000 wm4.SR5E1_TDM.h.14.a40ed7928cad243a57fd233fccf01ad2
                           .group:00000000 wm4.SR5E1_TIM.h.14.f17572f4c16f3f152b8164ad25c34f5b
                           .group:00000000 wm4.SR5E1_UART.h.14.eec3ab82b02b3bdb3de500483675b83f
                           .group:00000000 wm4.SR5E1_WWDG.h.14.59b45efc70e442cc6ef03702aad4ad88
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.typedefs.h.36.07fe3956b4e751037cfee70edcd0b397
                           .group:00000000 wm4.irq_numbers.h.38.6294b95aed1bf7b3a2cda0eed8ce8f57
                           .group:00000000 wm4.regs.h.23.2ac145b4f57126d16daed5fbd86d99c6
                           .group:00000000 wm4.gpio.h.38.4f37c988f6412e2fcf390b4a4a9849b1
                           .group:00000000 wm4.dmamux.h.25.337aea179f6dbcc87c52aae26d38f76e
                           .group:00000000 wm4.clock_cfg.h.24.0aed3cee9ecce947225a304181294191
                           .group:00000000 wm4.clock.h.37.80236c5607fdd9eb9275e5111a4191c3
                           .group:00000000 wm4.irq.h.37.78714f25754c8b09d1428599101f6cc7
                           .group:00000000 wm4.dma.h.40.f77dd217a06ceba13a3cfdd4102a73c1
                           .group:00000000 wm4.osal.h.23.3c8c063d5d712ffba7d9086068a59ae1

UNDEFINED SYMBOLS
DRV_SPI1
DRV_SPI2
DRV_SPI3
__spi_serve_interrupt
DRV_SPI4
