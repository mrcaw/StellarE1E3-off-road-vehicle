   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"saradc_dev.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.bss.adc_enabled_clocks,"aw",%nobits
  19              		.align	2
  22              	adc_enabled_clocks:
  23 0000 00000000 		.space	4
  24              		.section	.text.adc_dev_get_reg_ptr,"ax",%progbits
  25              		.align	1
  26              		.p2align 4,,15
  27              		.global	adc_dev_get_reg_ptr
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	adc_dev_get_reg_ptr:
  33              	.LFB456:
  34              		.file 1 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1/sarad
   1:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /****************************************************************************
   2:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
   3:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * Copyright (c) 2022 STMicroelectronics - All Rights Reserved
   4:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
   5:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * License terms: STMicroelectronics Proprietary in accordance with licensing
   6:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * terms SLA0098 at www.st.com.
   7:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
   8:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * THIS SOFTWARE IS DISTRIBUTED "AS IS," AND ALL WARRANTIES ARE DISCLAIMED,
   9:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * INCLUDING MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  10:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
  11:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *****************************************************************************/
  12:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
  13:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @file    saradc_dev.c
  14:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   ADC device specific source file.
  15:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
  16:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @addtogroup DRIVERS
  17:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @addtogroup ANALOG
  18:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @ingroup DRIVERS
  19:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @addtogroup ADC
  20:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @ingroup ANALOG
  21:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @{
  22:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
  23:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  24:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** #include <saradc.h>
  25:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** #include <saradc_private.h>
  26:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** #include <dma.h>
  27:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** #include <clock.h>
  28:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** #include <irq.h>
  29:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** #include <platform.h>
  30:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  31:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  32:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /* Module local definitions.                                                 */
  33:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  34:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  35:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  36:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /* Module exported variables.                                                */
  37:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  38:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  39:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  40:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /* Module local types.                                                       */
  41:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  42:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  43:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  44:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /* Module local variables.                                                   */
  45:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  46:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  47:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** static uint32_t adc_enabled_clocks = 0U;
  48:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  49:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  50:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /* Local function prototypes                                                 */
  51:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  52:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  53:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  54:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /* Module local functions.                                                   */
  55:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  56:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  57:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  58:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /* Module exported functions.                                                */
  59:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /*===========================================================================*/
  60:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  61:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
  62:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   Returns pointer to the ADC register block.
  63:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
  64:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @param[in] adp       pointer to a @p adc_driver_t structure
  65:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @return              pointer to the ADC register block.
  66:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
  67:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @notapi
  68:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
  69:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** ADC_TypeDef *adc_dev_get_reg_ptr(adc_driver_t *adp) {
  35              		.loc 1 69 53
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 16
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  40 0000 84B0     		sub	sp, sp, #16
  41              		.cfi_def_cfa_offset 16
  42 0002 0190     		str	r0, [sp, #4]
  70:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  71:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     ADC_TypeDef *adc;
  72:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  73:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     if (adp == &DRV_ADC1) {
  43              		.loc 1 73 8
  44 0004 019B     		ldr	r3, [sp, #4]
  45 0006 104A     		ldr	r2, .L8
  46 0008 9342     		cmp	r3, r2
  47 000a 02D1     		bne	.L2
  74:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc = ADC1;
  48              		.loc 1 74 13
  49 000c 0F4B     		ldr	r3, .L8+4
  50 000e 0393     		str	r3, [sp, #12]
  51 0010 16E0     		b	.L3
  52              	.L2:
  75:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC2) {
  53              		.loc 1 75 15
  54 0012 019B     		ldr	r3, [sp, #4]
  55 0014 0E4A     		ldr	r2, .L8+8
  56 0016 9342     		cmp	r3, r2
  57 0018 02D1     		bne	.L4
  76:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc = ADC2;
  58              		.loc 1 76 13
  59 001a 0E4B     		ldr	r3, .L8+12
  60 001c 0393     		str	r3, [sp, #12]
  61 001e 0FE0     		b	.L3
  62              	.L4:
  77:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC3) {
  63              		.loc 1 77 15
  64 0020 019B     		ldr	r3, [sp, #4]
  65 0022 0D4A     		ldr	r2, .L8+16
  66 0024 9342     		cmp	r3, r2
  67 0026 02D1     		bne	.L5
  78:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc = ADC3;
  68              		.loc 1 78 13
  69 0028 0C4B     		ldr	r3, .L8+20
  70 002a 0393     		str	r3, [sp, #12]
  71 002c 08E0     		b	.L3
  72              	.L5:
  79:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC4) {
  73              		.loc 1 79 15
  74 002e 019B     		ldr	r3, [sp, #4]
  75 0030 0B4A     		ldr	r2, .L8+24
  76 0032 9342     		cmp	r3, r2
  77 0034 02D1     		bne	.L6
  80:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc = ADC4;
  78              		.loc 1 80 13
  79 0036 0B4B     		ldr	r3, .L8+28
  80 0038 0393     		str	r3, [sp, #12]
  81 003a 01E0     		b	.L3
  82              	.L6:
  81:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else {
  82:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc = ADC5;
  83              		.loc 1 82 13
  84 003c 0A4B     		ldr	r3, .L8+32
  85 003e 0393     		str	r3, [sp, #12]
  86              	.L3:
  83:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     }
  84:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  85:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     return adc;
  87              		.loc 1 85 12
  88 0040 039B     		ldr	r3, [sp, #12]
  86:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** }
  89              		.loc 1 86 1
  90 0042 1846     		mov	r0, r3
  91 0044 04B0     		add	sp, sp, #16
  92              		.cfi_def_cfa_offset 0
  93              		@ sp needed
  94 0046 7047     		bx	lr
  95              	.L9:
  96              		.align	2
  97              	.L8:
  98 0048 00000000 		.word	DRV_ADC1
  99 004c 00800048 		.word	1207992320
 100 0050 00000000 		.word	DRV_ADC2
 101 0054 00810048 		.word	1207992576
 102 0058 00000000 		.word	DRV_ADC3
 103 005c 00800044 		.word	1140883456
 104 0060 00000000 		.word	DRV_ADC4
 105 0064 00810044 		.word	1140883712
 106 0068 00820044 		.word	1140883968
 107              		.cfi_endproc
 108              	.LFE456:
 110              		.section	.text.adc_common_dev_get_reg_ptr,"ax",%progbits
 111              		.align	1
 112              		.p2align 4,,15
 113              		.global	adc_common_dev_get_reg_ptr
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 118              	adc_common_dev_get_reg_ptr:
 119              	.LFB457:
  87:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  88:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
  89:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   Returns pointer to the ADC Common register block.
  90:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
  91:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @param[in] adp       pointer to a @p adc_driver_t structure
  92:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @return              pointer to the ADC Common register block.
  93:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
  94:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @notapi
  95:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
  96:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** ADC_Common_TypeDef *adc_common_dev_get_reg_ptr(adc_driver_t *adp) {
 120              		.loc 1 96 67
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 16
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125 0000 84B0     		sub	sp, sp, #16
 126              		.cfi_def_cfa_offset 16
 127 0002 0190     		str	r0, [sp, #4]
  97:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
  98:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     ADC_Common_TypeDef *adc_common;
  99:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 100:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     if (adp == &DRV_ADC1 || adp == &DRV_ADC2) {
 128              		.loc 1 100 8
 129 0004 019B     		ldr	r3, [sp, #4]
 130 0006 084A     		ldr	r2, .L15
 131 0008 9342     		cmp	r3, r2
 132 000a 03D0     		beq	.L11
 133              		.loc 1 100 26 discriminator 1
 134 000c 019B     		ldr	r3, [sp, #4]
 135 000e 074A     		ldr	r2, .L15+4
 136 0010 9342     		cmp	r3, r2
 137 0012 02D1     		bne	.L12
 138              	.L11:
 101:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_common = ADC12_COMMON;
 139              		.loc 1 101 20
 140 0014 064B     		ldr	r3, .L15+8
 141 0016 0393     		str	r3, [sp, #12]
 142 0018 01E0     		b	.L13
 143              	.L12:
 102:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else {
 103:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_common = ADC345_COMMON;
 144              		.loc 1 103 20
 145 001a 064B     		ldr	r3, .L15+12
 146 001c 0393     		str	r3, [sp, #12]
 147              	.L13:
 104:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     }
 105:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 106:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     return adc_common;
 148              		.loc 1 106 12
 149 001e 039B     		ldr	r3, [sp, #12]
 107:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** }
 150              		.loc 1 107 1
 151 0020 1846     		mov	r0, r3
 152 0022 04B0     		add	sp, sp, #16
 153              		.cfi_def_cfa_offset 0
 154              		@ sp needed
 155 0024 7047     		bx	lr
 156              	.L16:
 157 0026 00BF     		.align	2
 158              	.L15:
 159 0028 00000000 		.word	DRV_ADC1
 160 002c 00000000 		.word	DRV_ADC2
 161 0030 00830048 		.word	1207993088
 162 0034 00830044 		.word	1140884224
 163              		.cfi_endproc
 164              	.LFE457:
 166              		.section	.text.adc_dev_get_clock,"ax",%progbits
 167              		.align	1
 168              		.p2align 4,,15
 169              		.global	adc_dev_get_clock
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 174              	adc_dev_get_clock:
 175              	.LFB458:
 108:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 109:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
 110:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   Returns value of ADC clock.
 111:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 112:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @param[in] adp       pointer to a @p adc_driver_t structure
 113:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @return              ADC clock.
 114:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 115:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @notapi
 116:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
 117:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** uint32_t adc_dev_get_clock(adc_driver_t *adp) {
 176              		.loc 1 117 47
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 16
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181 0000 84B0     		sub	sp, sp, #16
 182              		.cfi_def_cfa_offset 16
 183 0002 0190     		str	r0, [sp, #4]
 118:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 119:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     uint32_t clock;
 120:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 121:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     if (adp == &DRV_ADC1 || adp == &DRV_ADC2) {
 184              		.loc 1 121 8
 185 0004 019B     		ldr	r3, [sp, #4]
 186 0006 084A     		ldr	r2, .L22
 187 0008 9342     		cmp	r3, r2
 188 000a 03D0     		beq	.L18
 189              		.loc 1 121 26 discriminator 1
 190 000c 019B     		ldr	r3, [sp, #4]
 191 000e 074A     		ldr	r2, .L22+4
 192 0010 9342     		cmp	r3, r2
 193 0012 02D1     		bne	.L19
 194              	.L18:
 122:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         clock = CLOCK_ADC12CLK;
 195              		.loc 1 122 15
 196 0014 064B     		ldr	r3, .L22+8
 197 0016 0393     		str	r3, [sp, #12]
 198 0018 01E0     		b	.L20
 199              	.L19:
 123:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else {
 124:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         clock = CLOCK_ADC345CLK;
 200              		.loc 1 124 15
 201 001a 054B     		ldr	r3, .L22+8
 202 001c 0393     		str	r3, [sp, #12]
 203              	.L20:
 125:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     }
 126:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 127:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     return clock;
 204              		.loc 1 127 12
 205 001e 039B     		ldr	r3, [sp, #12]
 128:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** }
 206              		.loc 1 128 1
 207 0020 1846     		mov	r0, r3
 208 0022 04B0     		add	sp, sp, #16
 209              		.cfi_def_cfa_offset 0
 210              		@ sp needed
 211 0024 7047     		bx	lr
 212              	.L23:
 213 0026 00BF     		.align	2
 214              	.L22:
 215 0028 00000000 		.word	DRV_ADC1
 216 002c 00000000 		.word	DRV_ADC2
 217 0030 005A6202 		.word	40000000
 218              		.cfi_endproc
 219              	.LFE458:
 221              		.section	.text.adc_dev_clock_enable,"ax",%progbits
 222              		.align	1
 223              		.p2align 4,,15
 224              		.global	adc_dev_clock_enable
 225              		.syntax unified
 226              		.thumb
 227              		.thumb_func
 229              	adc_dev_clock_enable:
 230              	.LFB459:
 129:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 130:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
 131:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   Enables ADC clock.
 132:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 133:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @param[in] adp       pointer to a @p adc_driver_t structure
 134:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 135:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @notapi
 136:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
 137:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** void adc_dev_clock_enable(adc_driver_t *adp) {
 231              		.loc 1 137 46
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 24
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              		@ link register save eliminated.
 236 0000 86B0     		sub	sp, sp, #24
 237              		.cfi_def_cfa_offset 24
 238 0002 0190     		str	r0, [sp, #4]
 138:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 139:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     /* Enable ADC clock only if it is not already enabled.*/
 140:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     if (adp == &DRV_ADC1 || adp == &DRV_ADC2) {
 239              		.loc 1 140 8
 240 0004 019B     		ldr	r3, [sp, #4]
 241 0006 694A     		ldr	r2, .L41
 242 0008 9342     		cmp	r3, r2
 243 000a 03D0     		beq	.L25
 244              		.loc 1 140 26 discriminator 1
 245 000c 019B     		ldr	r3, [sp, #4]
 246 000e 684A     		ldr	r2, .L41+4
 247 0010 9342     		cmp	r3, r2
 248 0012 4BD1     		bne	.L26
 249              	.L25:
 141:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         if ((adc_enabled_clocks & 0x3UL) == 0U) {
 250              		.loc 1 141 33
 251 0014 674B     		ldr	r3, .L41+8
 252 0016 1B68     		ldr	r3, [r3]
 253 0018 03F00303 		and	r3, r3, #3
 254              		.loc 1 141 12
 255 001c 002B     		cmp	r3, #0
 256 001e 40F08F80 		bne	.L31
 257 0022 0123     		movs	r3, #1
 258 0024 8DF81730 		strb	r3, [sp, #23]
 259 0028 9DF81730 		ldrb	r3, [sp, #23]
 260 002c 8DF81630 		strb	r3, [sp, #22]
 261 0030 0123     		movs	r3, #1
 262 0032 0493     		str	r3, [sp, #16]
 263              	.LBB26:
 264              	.LBB27:
 265              	.LBB28:
 266              	.LBB29:
 267              		.file 2 "src-gen/sr5e1/clock.h"
   1:src-gen/sr5e1/clock.h **** /****************************************************************************
   2:src-gen/sr5e1/clock.h ****  *
   3:src-gen/sr5e1/clock.h ****  * Copyright (c) 2022 STMicroelectronics - All Rights Reserved
   4:src-gen/sr5e1/clock.h ****  *
   5:src-gen/sr5e1/clock.h ****  * License terms: STMicroelectronics Proprietary in accordance with licensing
   6:src-gen/sr5e1/clock.h ****  * terms SLA0098 at www.st.com.
   7:src-gen/sr5e1/clock.h ****  *
   8:src-gen/sr5e1/clock.h ****  * THIS SOFTWARE IS DISTRIBUTED "AS IS," AND ALL WARRANTIES ARE DISCLAIMED,
   9:src-gen/sr5e1/clock.h ****  * INCLUDING MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  10:src-gen/sr5e1/clock.h ****  *
  11:src-gen/sr5e1/clock.h ****  *****************************************************************************/
  12:src-gen/sr5e1/clock.h **** /**
  13:src-gen/sr5e1/clock.h ****  * @file    clock.h
  14:src-gen/sr5e1/clock.h ****  * @brief   SR5E1 clock subsystem header file.
  15:src-gen/sr5e1/clock.h ****  *
  16:src-gen/sr5e1/clock.h ****  * @addtogroup PLATFORM
  17:src-gen/sr5e1/clock.h ****  * @addtogroup CLOCK
  18:src-gen/sr5e1/clock.h ****  * @ingroup PLATFORM
  19:src-gen/sr5e1/clock.h ****  * @{
  20:src-gen/sr5e1/clock.h ****  */
  21:src-gen/sr5e1/clock.h **** 
  22:src-gen/sr5e1/clock.h **** #ifndef _CLOCK_H_
  23:src-gen/sr5e1/clock.h **** #define _CLOCK_H_
  24:src-gen/sr5e1/clock.h **** 
  25:src-gen/sr5e1/clock.h **** #include <clock_cfg.h>
  26:src-gen/sr5e1/clock.h **** #include <platform.h>
  27:src-gen/sr5e1/clock.h **** #include <typedefs.h>
  28:src-gen/sr5e1/clock.h **** 
  29:src-gen/sr5e1/clock.h **** /*===========================================================================*/
  30:src-gen/sr5e1/clock.h **** /* Module constants.                                                         */
  31:src-gen/sr5e1/clock.h **** /*===========================================================================*/
  32:src-gen/sr5e1/clock.h **** 
  33:src-gen/sr5e1/clock.h **** /**
  34:src-gen/sr5e1/clock.h ****  * @name    RCC CFGR register
  35:src-gen/sr5e1/clock.h ****  * @{
  36:src-gen/sr5e1/clock.h ****  */
  37:src-gen/sr5e1/clock.h **** #define CLOCK_SW_MASK               (3UL << 0U)
  38:src-gen/sr5e1/clock.h **** #define CLOCK_SW_IRCOSC             (4UL << 0U) /* Internal 16 MHz   */
  39:src-gen/sr5e1/clock.h **** #define CLOCK_SW_XOSC               (5UL << 0U) /* External 4-40 MHz */
  40:src-gen/sr5e1/clock.h **** #define CLOCK_SW_PLL0PHI            (6UL << 0U)
  41:src-gen/sr5e1/clock.h **** #define CLOCK_SW_PLL1PHI            (7UL << 0U)
  42:src-gen/sr5e1/clock.h **** 
  43:src-gen/sr5e1/clock.h **** #define CLOCK_SYSPRE_MASK           (511UL << 8U)
  44:src-gen/sr5e1/clock.h **** #define CLOCK_SYSPRE_FIELD(n)       (((uint32_t)(n)) << 8U)
  45:src-gen/sr5e1/clock.h **** 
  46:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_MASK           (15UL << 20U)
  47:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_NOCLOCK        (0UL << 20U)
  48:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_LSI            (8UL << 20U)
  49:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_IRCOSC         (9UL << 20U)
  50:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_XOSC           (10UL << 20U)
  51:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_PLL0PHI        (11UL << 20U)
  52:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_PLL1PHI        (12UL << 20U)
  53:src-gen/sr5e1/clock.h **** 
  54:src-gen/sr5e1/clock.h **** #define CLOCK_MCOPRE_MASK           (63UL << 24U)
  55:src-gen/sr5e1/clock.h **** #define CLOCK_MCOPRE_FIELD(n)       (((uint32_t)(n)) << 24U)
  56:src-gen/sr5e1/clock.h **** /** @} */
  57:src-gen/sr5e1/clock.h **** 
  58:src-gen/sr5e1/clock.h **** /**
  59:src-gen/sr5e1/clock.h ****  * @name    RCC PLLCFGR register
  60:src-gen/sr5e1/clock.h ****  * @{
  61:src-gen/sr5e1/clock.h ****  */
  62:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_MASK          (3UL << 0U)
  63:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_NOCLOCK       (0UL << 0U)
  64:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_IRCOSC        (2UL << 0U)
  65:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_XOSC          (3UL << 0U)
  66:src-gen/sr5e1/clock.h **** 
  67:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_MASK          (3UL << 8U)
  68:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_NOCLOCK       (0UL << 8U)
  69:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_PLL0PHI1      (2UL << 8U)
  70:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_XOSC          (3UL << 8U)
  71:src-gen/sr5e1/clock.h **** /** @} */
  72:src-gen/sr5e1/clock.h **** 
  73:src-gen/sr5e1/clock.h **** /**
  74:src-gen/sr5e1/clock.h ****  * @name    RCC CCIPR1 register
  75:src-gen/sr5e1/clock.h ****  * @{
  76:src-gen/sr5e1/clock.h ****  */
  77:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_MASK          (7UL << 0U)
  78:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_NOCLOCK       (0UL << 0U)
  79:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_IRCOSC        (4UL << 0U)
  80:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_XOSC          (5UL << 0U)
  81:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_PLL0PHI       (6UL << 0U)
  82:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_LSI           (7UL << 0U)
  83:src-gen/sr5e1/clock.h **** 
  84:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_MASK           (7UL << 4U)
  85:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_NOCLOCK        (0UL << 4U)
  86:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_IRCOSC         (4UL << 4U)
  87:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_XOSC           (5UL << 4U)
  88:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_PLL0PHI        (6UL << 4U)
  89:src-gen/sr5e1/clock.h **** 
  90:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_MASK           (7UL << 8U)
  91:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_NOCLOCK        (0UL << 8U)
  92:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_IRCOSC         (4UL << 8U)
  93:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_XOSC           (5UL << 8U)
  94:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_PLL0PHI        (6UL << 8U)
  95:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_I2S_CKIN       (7UL << 8U)
  96:src-gen/sr5e1/clock.h **** 
  97:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_MASK         (7UL << 12U)
  98:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_NOCLOCK      (0UL << 12U)
  99:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_XOSC         (4UL << 12U)
 100:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_PLL0PHI      (5UL << 12U)
 101:src-gen/sr5e1/clock.h **** 
 102:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_MASK           (7UL << 16U)
 103:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_NOCLOCK        (0UL << 16U)
 104:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_XOSC           (4UL << 16U)
 105:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_PLL0PHI        (5UL << 16U)
 106:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_PLL1PHI        (6UL << 16U)
 107:src-gen/sr5e1/clock.h **** 
 108:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_MASK         (7UL << 20U)
 109:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_NOCLOCK      (0UL << 20U)
 110:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_XOSC         (4UL << 20U)
 111:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_PLL0PHI      (5UL << 20U)
 112:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_PLL1PHI      (6UL << 20U)
 113:src-gen/sr5e1/clock.h **** /** @} */
 114:src-gen/sr5e1/clock.h **** 
 115:src-gen/sr5e1/clock.h **** /**
 116:src-gen/sr5e1/clock.h ****  * @name    RCC CCIPR2 register
 117:src-gen/sr5e1/clock.h ****  * @{
 118:src-gen/sr5e1/clock.h ****  */
 119:src-gen/sr5e1/clock.h **** #define CLOCK_UARTPRE_MASK          (31U << 0U)
 120:src-gen/sr5e1/clock.h **** #define CLOCK_UARTPRE_FIELD(n)      (((uint32_t)(n)) << 0U)
 121:src-gen/sr5e1/clock.h **** 
 122:src-gen/sr5e1/clock.h **** #define CLOCK_I2CPRE_MASK           (31U << 5U)
 123:src-gen/sr5e1/clock.h **** #define CLOCK_I2CPRE_FIELD(n)       (((uint32_t)(n)) << 5U)
 124:src-gen/sr5e1/clock.h **** 
 125:src-gen/sr5e1/clock.h **** #define CLOCK_SPIPRE_MASK           (31U << 10U)
 126:src-gen/sr5e1/clock.h **** #define CLOCK_SPIPRE_FIELD(n)       (((uint32_t)(n)) << 10U)
 127:src-gen/sr5e1/clock.h **** 
 128:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANPRE_MASK         (31U << 15U)
 129:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANPRE_FIELD(n)     (((uint32_t)(n)) << 15U)
 130:src-gen/sr5e1/clock.h **** 
 131:src-gen/sr5e1/clock.h **** #define CLOCK_ADCPRE_MASK           (63U << 20U)
 132:src-gen/sr5e1/clock.h **** #define CLOCK_ADCPRE_FIELD(n)       (((uint32_t)(n)) << 20U)
 133:src-gen/sr5e1/clock.h **** 
 134:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCPRE_MASK         (63U << 26U)
 135:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCPRE_FIELD(n)     (((uint32_t)(n)) << 26U)
 136:src-gen/sr5e1/clock.h **** /** @} */
 137:src-gen/sr5e1/clock.h **** 
 138:src-gen/sr5e1/clock.h **** /**
 139:src-gen/sr5e1/clock.h ****  * @name    RCC LSCFGR register
 140:src-gen/sr5e1/clock.h ****  * @{
 141:src-gen/sr5e1/clock.h ****  */
 142:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_MASK           (3UL << 9U)
 143:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_NOCLOCK        (0UL << 9U)
 144:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_LSI            (2UL << 9U)  /* LSI after LSIPRE prescaler division */
 145:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_XOSC           (3UL << 9U)  /* XOSC divided by 32 */
 146:src-gen/sr5e1/clock.h **** 
 147:src-gen/sr5e1/clock.h **** #define CLOCK_LSIPRE_MASK           (31UL << 0U)
 148:src-gen/sr5e1/clock.h **** #define CLOCK_LSIPRE_FIELD(n)       (((uint32_t)(n)) << 0U)
 149:src-gen/sr5e1/clock.h **** /** @} */
 150:src-gen/sr5e1/clock.h **** 
 151:src-gen/sr5e1/clock.h **** /**
 152:src-gen/sr5e1/clock.h ****  * @name    PLLDIG PLL0DV register
 153:src-gen/sr5e1/clock.h ****  * @{
 154:src-gen/sr5e1/clock.h ****  */
 155:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0MFD_MASK          (127UL << 0U)
 156:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0MFD_FIELD(n)      (((uint32_t)(n)) << 0U)
 157:src-gen/sr5e1/clock.h **** 
 158:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PREDIV_MASK       (7UL << 12U)
 159:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PREDIV_FIELD(n)   (((uint32_t)(n)) << 12U)
 160:src-gen/sr5e1/clock.h **** 
 161:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI_MASK       (63UL << 16U)
 162:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI_FIELD(n)   (((uint32_t)(n)) << 16U)
 163:src-gen/sr5e1/clock.h **** 
 164:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI1_MASK      (15UL << 27U)
 165:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI1_FIELD(n)  (((uint32_t)(n)) << 27U)
 166:src-gen/sr5e1/clock.h **** /** @} */
 167:src-gen/sr5e1/clock.h **** 
 168:src-gen/sr5e1/clock.h **** /**
 169:src-gen/sr5e1/clock.h ****  * @name    PLLDIG PLL1DV register
 170:src-gen/sr5e1/clock.h ****  * @{
 171:src-gen/sr5e1/clock.h ****  */
 172:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1MFD_MASK          (127UL << 0U)
 173:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1MFD_FIELD(n)      (((uint32_t)(n)) << 0U)
 174:src-gen/sr5e1/clock.h **** 
 175:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1RFDPHI_MASK       (63U << 16U)
 176:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1RFDPHI_FIELD(n)   (((uint32_t)(n)) << 16U)
 177:src-gen/sr5e1/clock.h **** /** @} */
 178:src-gen/sr5e1/clock.h **** 
 179:src-gen/sr5e1/clock.h **** /**
 180:src-gen/sr5e1/clock.h ****  * @name    NVMPC PFCR1 register
 181:src-gen/sr5e1/clock.h ****  * @{
 182:src-gen/sr5e1/clock.h ****  */
 183:src-gen/sr5e1/clock.h **** 
 184:src-gen/sr5e1/clock.h **** #define CLOCK_NVMCCBFEN_MASK        (1UL << 0U)
 185:src-gen/sr5e1/clock.h **** #define CLOCK_NVMCCBFEN_FIELD(n)    (((uint32_t)(n)) << 0U)
 186:src-gen/sr5e1/clock.h **** 
 187:src-gen/sr5e1/clock.h **** #define CLOCK_NVMDCBFEN_MASK        (1UL << 1U)
 188:src-gen/sr5e1/clock.h **** #define CLOCK_NVMDCBFEN_FIELD(n)    ((n) << 1U)
 189:src-gen/sr5e1/clock.h **** 
 190:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_MASK          (1FUL << 8U)
 191:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_FIELD(n)      (((uint32_t)(n)) << 8U)
 192:src-gen/sr5e1/clock.h **** 
 193:src-gen/sr5e1/clock.h **** #define CLOCK_NVMAPC_MASK           (7UL << 13U)
 194:src-gen/sr5e1/clock.h **** #define CLOCK_NVMAPC_FIELD(n)       (((uint32_t)(n)) << 13U)
 195:src-gen/sr5e1/clock.h **** /** @} */
 196:src-gen/sr5e1/clock.h **** 
 197:src-gen/sr5e1/clock.h **** /**
 198:src-gen/sr5e1/clock.h ****  * @name    Internal oscillators
 199:src-gen/sr5e1/clock.h ****  * @{
 200:src-gen/sr5e1/clock.h ****  */
 201:src-gen/sr5e1/clock.h **** #define CLOCK_IRCOSCCLK             16000000UL
 202:src-gen/sr5e1/clock.h **** #define CLOCK_LSICLK                1000000UL
 203:src-gen/sr5e1/clock.h **** /** @} */
 204:src-gen/sr5e1/clock.h **** 
 205:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 206:src-gen/sr5e1/clock.h **** /* Module pre-compile time settings.                                         */
 207:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 208:src-gen/sr5e1/clock.h **** 
 209:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 210:src-gen/sr5e1/clock.h **** /* Derived constants and error checks.                                       */
 211:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 212:src-gen/sr5e1/clock.h **** 
 213:src-gen/sr5e1/clock.h **** /* Configuration file checks.*/
 214:src-gen/sr5e1/clock.h **** #if !defined(SR5E1xxx_CLOCKCONF)
 215:src-gen/sr5e1/clock.h **** #error "SR5E1xxx_CLOCKCONF not defined in clock_cfg.h"
 216:src-gen/sr5e1/clock.h **** #endif
 217:src-gen/sr5e1/clock.h **** 
 218:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SMP_MODE) || defined(__DOXYGEN__)
 219:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SMP_MODE not defined in clock_cfg.h"
 220:src-gen/sr5e1/clock.h **** #endif
 221:src-gen/sr5e1/clock.h **** 
 222:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_XOSC_ENABLED) || defined(__DOXYGEN__)
 223:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSC_ENABLED not defined in clock_cfg.h"
 224:src-gen/sr5e1/clock.h **** #endif
 225:src-gen/sr5e1/clock.h **** 
 226:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_LSI_ENABLED) || defined(__DOXYGEN__)
 227:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_LSI_ENABLED not defined in clock_cfg.h"
 228:src-gen/sr5e1/clock.h **** #endif
 229:src-gen/sr5e1/clock.h **** 
 230:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_XOSCCLK)
 231:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSCCLK not defined in clock_cfg.h"
 232:src-gen/sr5e1/clock.h **** #endif
 233:src-gen/sr5e1/clock.h **** 
 234:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_XOSC_BYPASS)
 235:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSC_BYPASS not defined in clock_cfg.h"
 236:src-gen/sr5e1/clock.h **** #endif
 237:src-gen/sr5e1/clock.h **** 
 238:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0SRC) || defined(__DOXYGEN__)
 239:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0SRC not defined in clock_cfg.h"
 240:src-gen/sr5e1/clock.h **** #endif
 241:src-gen/sr5e1/clock.h **** 
 242:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0MFD_VALUE) || defined(__DOXYGEN__)
 243:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0MFD_VALUE not defined in clock_cfg.h"
 244:src-gen/sr5e1/clock.h **** #endif
 245:src-gen/sr5e1/clock.h **** 
 246:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0PREDIV_VALUE) || defined(__DOXYGEN__)
 247:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0PREDIV_VALUE not defined in clock_cfg.h"
 248:src-gen/sr5e1/clock.h **** #endif
 249:src-gen/sr5e1/clock.h **** 
 250:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0RFDPHI_VALUE) || defined(__DOXYGEN__)
 251:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0RFDPHI_VALUE not defined in clock_cfg.h"
 252:src-gen/sr5e1/clock.h **** #endif
 253:src-gen/sr5e1/clock.h **** 
 254:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0RFDPHI1_VALUE) || defined(__DOXYGEN__)
 255:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0RFDPHI1_VALUE not defined in clock_cfg.h"
 256:src-gen/sr5e1/clock.h **** #endif
 257:src-gen/sr5e1/clock.h **** 
 258:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL1SRC) || defined(__DOXYGEN__)
 259:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL1SRC not defined in clock_cfg.h"
 260:src-gen/sr5e1/clock.h **** #endif
 261:src-gen/sr5e1/clock.h **** 
 262:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL1MFD_VALUE) || defined(__DOXYGEN__)
 263:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL1MFD_VALUE not defined in clock_cfg.h"
 264:src-gen/sr5e1/clock.h **** #endif
 265:src-gen/sr5e1/clock.h **** 
 266:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL1RFDPHI_VALUE) || defined(__DOXYGEN__)
 267:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL1RFDPHI_VALUE not defined in clock_cfg.h"
 268:src-gen/sr5e1/clock.h **** #endif
 269:src-gen/sr5e1/clock.h **** 
 270:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SW) || defined(__DOXYGEN__)
 271:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW not defined in clock_cfg.h"
 272:src-gen/sr5e1/clock.h **** #endif
 273:src-gen/sr5e1/clock.h **** 
 274:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SYSPRE_VALUE) || defined(__DOXYGEN__)
 275:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SYSPRE_VALUE not defined in clock_cfg.h"
 276:src-gen/sr5e1/clock.h **** #endif
 277:src-gen/sr5e1/clock.h **** 
 278:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_UARTSEL) || defined(__DOXYGEN__)
 279:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTSEL not defined in clock_cfg.h"
 280:src-gen/sr5e1/clock.h **** #endif
 281:src-gen/sr5e1/clock.h **** 
 282:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_I2CSEL) || defined(__DOXYGEN__)
 283:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2CSEL not defined in clock_cfg.h"
 284:src-gen/sr5e1/clock.h **** #endif
 285:src-gen/sr5e1/clock.h **** 
 286:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SPISEL) || defined(__DOXYGEN__)
 287:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SPISEL not defined in clock_cfg.h"
 288:src-gen/sr5e1/clock.h **** #endif
 289:src-gen/sr5e1/clock.h **** 
 290:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_FDCANSEL) || defined(__DOXYGEN__)
 291:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_FDCANSEL not defined in clock_cfg.h"
 292:src-gen/sr5e1/clock.h **** #endif
 293:src-gen/sr5e1/clock.h **** 
 294:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_ADCSEL) || defined(__DOXYGEN__)
 295:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_ADCSEL not defined in clock_cfg.h"
 296:src-gen/sr5e1/clock.h **** #endif
 297:src-gen/sr5e1/clock.h **** 
 298:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SDADCSEL) || defined(__DOXYGEN__)
 299:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SDADCSEL not defined in clock_cfg.h"
 300:src-gen/sr5e1/clock.h **** #endif
 301:src-gen/sr5e1/clock.h **** 
 302:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_MCOSEL) || defined(__DOXYGEN__)
 303:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOSEL not defined in clock_cfg.h"
 304:src-gen/sr5e1/clock.h **** #endif
 305:src-gen/sr5e1/clock.h **** 
 306:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_RTCSEL) || defined(__DOXYGEN__)
 307:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_RTCSEL not defined in clock_cfg.h"
 308:src-gen/sr5e1/clock.h **** #endif
 309:src-gen/sr5e1/clock.h **** 
 310:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_UARTPRE_VALUE) || defined(__DOXYGEN__)
 311:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTPRE_VALUE not defined in clock_cfg.h"
 312:src-gen/sr5e1/clock.h **** #endif
 313:src-gen/sr5e1/clock.h **** 
 314:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_I2CPRE_VALUE) || defined(__DOXYGEN__)
 315:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2CPRE_VALUE not defined in clock_cfg.h"
 316:src-gen/sr5e1/clock.h **** #endif
 317:src-gen/sr5e1/clock.h **** 
 318:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SPIPRE_VALUE) || defined(__DOXYGEN__)
 319:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SPIPRE_VALUE not defined in clock_cfg.h"
 320:src-gen/sr5e1/clock.h **** #endif
 321:src-gen/sr5e1/clock.h **** 
 322:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_FDCANPRE_VALUE) || defined(__DOXYGEN__)
 323:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_FDCANPRE_VALUE not defined in clock_cfg.h"
 324:src-gen/sr5e1/clock.h **** #endif
 325:src-gen/sr5e1/clock.h **** 
 326:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_ADCPRE_VALUE) || defined(__DOXYGEN__)
 327:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_ADCPRE_VALUE not defined in clock_cfg.h"
 328:src-gen/sr5e1/clock.h **** #endif
 329:src-gen/sr5e1/clock.h **** 
 330:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SDADCPRE_VALUE) || defined(__DOXYGEN__)
 331:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SDADCPRE_VALUE not defined in clock_cfg.h"
 332:src-gen/sr5e1/clock.h **** #endif
 333:src-gen/sr5e1/clock.h **** 
 334:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_MCOPRE_VALUE) || defined(__DOXYGEN__)
 335:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOPRE_VALUE not defined in clock_cfg.h"
 336:src-gen/sr5e1/clock.h **** #endif
 337:src-gen/sr5e1/clock.h **** 
 338:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_LSIPRE_VALUE) || defined(__DOXYGEN__)
 339:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_LSIPRE_VALUE not defined in clock_cfg.h"
 340:src-gen/sr5e1/clock.h **** #endif
 341:src-gen/sr5e1/clock.h **** 
 342:src-gen/sr5e1/clock.h **** /* If SPISEL = I2S_CKIN, the value of I2S clock on the CKIN pin must be
 343:src-gen/sr5e1/clock.h ****    specified in the clock configuration file.*/
 344:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SPISEL == CLOCK_SPISEL_I2S_CKIN)
 345:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_I2S_CKIN) || defined(__DOXYGEN__)
 346:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2S_CKIN not defined in clock_cfg.h"
 347:src-gen/sr5e1/clock.h **** #endif
 348:src-gen/sr5e1/clock.h **** #endif
 349:src-gen/sr5e1/clock.h **** 
 350:src-gen/sr5e1/clock.h **** /* Clock Limits */
 351:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK_MAX            300000000UL
 352:src-gen/sr5e1/clock.h **** 
 353:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_MAX           40000000UL
 354:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_BYP_MAX       100000000UL
 355:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_MIN           4000000UL
 356:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_BYP_MIN       4000000UL
 357:src-gen/sr5e1/clock.h **** 
 358:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN_MAX            56000000UL
 359:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN_MIN            8000000UL
 360:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD_MAX           20000000UL
 361:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD_MIN           8000000UL
 362:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0VCO_MAX           1400000000UL
 363:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0VCO_MIN           600000000UL
 364:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI_MAX           700000000UL
 365:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI_MIN           4762000UL
 366:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI1_MAX          175000000UL
 367:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI1_MIN          20000000UL
 368:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN_MAX            87500000UL
 369:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN_MIN            37500000UL
 370:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1VCO_MAX           1400000000UL
 371:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1VCO_MIN           600000000UL
 372:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1PHI_MAX           700000000UL
 373:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1PHI_MIN           4762000UL
 374:src-gen/sr5e1/clock.h **** 
 375:src-gen/sr5e1/clock.h **** #define CLOCK_UARTCLK_MAX           100000000UL
 376:src-gen/sr5e1/clock.h **** #define CLOCK_I2CCLK_MAX            100000000UL
 377:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK_MS_SPI1_4_MAX  50000000UL
 378:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK_MS_SPI2_3_MAX  37500000UL
 379:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK_SL_MAX         50000000UL
 380:src-gen/sr5e1/clock.h **** #define CLOCK_I2SCLK_MAX            100000000UL
 381:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANCLK_MAX          80000000UL
 382:src-gen/sr5e1/clock.h **** #define CLOCK_ADCCLK_MAX            40000000UL
 383:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCCLK_MAX          16000000UL
 384:src-gen/sr5e1/clock.h **** 
 385:src-gen/sr5e1/clock.h **** /*Checks on XOSC.*/
 386:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_XOSC_ENABLED
 387:src-gen/sr5e1/clock.h **** 
 388:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_XOSCCLK == 0U
 389:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSCCLK is zero in clock_cfg.h"
 390:src-gen/sr5e1/clock.h **** #else /* CLOCK_CFG_XOSCCLK != 0 */
 391:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_XOSC_BYPASS
 392:src-gen/sr5e1/clock.h **** 
 393:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_XOSCCLK < CLOCK_XOSCCLK_BYP_MIN) ||                          \
 394:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_XOSCCLK > CLOCK_XOSCCLK_BYP_MAX)
 395:src-gen/sr5e1/clock.h **** #error "out of limits  CLOCK_XOSCCLK value"
 396:src-gen/sr5e1/clock.h **** #endif
 397:src-gen/sr5e1/clock.h **** 
 398:src-gen/sr5e1/clock.h **** #else /* !CLOCK_CFG_XOSC_BYPASS */
 399:src-gen/sr5e1/clock.h **** 
 400:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_XOSCCLK < CLOCK_XOSCCLK_MIN) ||                              \
 401:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_XOSCCLK > CLOCK_XOSCCLK_MAX)
 402:src-gen/sr5e1/clock.h **** #error "out of limits  CLOCK_XOSCCLK value"
 403:src-gen/sr5e1/clock.h **** #endif
 404:src-gen/sr5e1/clock.h **** 
 405:src-gen/sr5e1/clock.h **** #endif /* !CLOCK_CFG_XOSC_BYPASS */
 406:src-gen/sr5e1/clock.h **** #endif /* CLOCK_CFG_XOSCCLK != 0 */
 407:src-gen/sr5e1/clock.h **** 
 408:src-gen/sr5e1/clock.h **** #else /* !CLOCK_CFG_XOSC_ENABLED */
 409:src-gen/sr5e1/clock.h **** 
 410:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SW == CLOCK_SW_XOSC
 411:src-gen/sr5e1/clock.h **** #error "CLOCK_SW requires XOSC"
 412:src-gen/sr5e1/clock.h **** #endif
 413:src-gen/sr5e1/clock.h **** 
 414:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL0PHI) &&                                   \
 415:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)
 416:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW or CLOCK_CFG_PLL0SRC require XOSC"
 417:src-gen/sr5e1/clock.h **** #endif
 418:src-gen/sr5e1/clock.h **** 
 419:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI) &&                                   \
 420:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)
 421:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW or CLOCK_CFG_PLL1SRC require XOSC"
 422:src-gen/sr5e1/clock.h **** #endif
 423:src-gen/sr5e1/clock.h **** 
 424:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI) &&                                   \
 425:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_PLL0PHI1) &&                        \
 426:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)
 427:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW or CLOCK_CFG_PLL1SRC require XOSC"
 428:src-gen/sr5e1/clock.h **** #endif
 429:src-gen/sr5e1/clock.h **** 
 430:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_XOSC) ||                              \
 431:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL0PHI) &&                          \
 432:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)) ||                          \
 433:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL1PHI) &&                          \
 434:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)) 
 435:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOSEL requires XOSC"
 436:src-gen/sr5e1/clock.h **** #endif
 437:src-gen/sr5e1/clock.h **** 
 438:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_XOSC) ||                            \
 439:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_PLL0PHI) &&                        \
 440:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 441:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTSEL requires XOSC"
 442:src-gen/sr5e1/clock.h **** #endif
 443:src-gen/sr5e1/clock.h **** 
 444:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_XOSC) ||                              \
 445:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_PLL0PHI) &&                          \
 446:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 447:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2CSEL requires XOSC"
 448:src-gen/sr5e1/clock.h **** #endif
 449:src-gen/sr5e1/clock.h **** 
 450:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SPISEL == CLOCK_SPISEL_XOSC) ||                              \
 451:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_SPISEL == CLOCK_SPISEL_PLL0PHI) &&                          \
 452:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 453:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SPISEL requires XOSC"
 454:src-gen/sr5e1/clock.h **** #endif
 455:src-gen/sr5e1/clock.h **** 
 456:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_XOSC) ||                          \
 457:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_PLL0PHI) &&                      \
 458:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 459:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_FDCANSEL requires XOSC"
 460:src-gen/sr5e1/clock.h **** #endif
 461:src-gen/sr5e1/clock.h **** 
 462:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_XOSC) ||                              \
 463:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL0PHI) &&                          \
 464:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)) ||                          \
 465:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL1PHI) &&                          \
 466:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)) 
 467:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_ADCSEL requires XOSC"
 468:src-gen/sr5e1/clock.h **** #endif
 469:src-gen/sr5e1/clock.h **** 
 470:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_XOSC) ||                          \
 471:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL0PHI) &&                      \
 472:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)) ||                          \
 473:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL1PHI) &&                      \
 474:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)) 
 475:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SDADCSEL requires XOSC"
 476:src-gen/sr5e1/clock.h **** #endif
 477:src-gen/sr5e1/clock.h **** 
 478:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_XOSC
 479:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_RTCSEL requires XOSC"
 480:src-gen/sr5e1/clock.h **** #endif
 481:src-gen/sr5e1/clock.h **** 
 482:src-gen/sr5e1/clock.h **** #endif /* CLOCK_CFG_XOSC_ENABLED */
 483:src-gen/sr5e1/clock.h **** 
 484:src-gen/sr5e1/clock.h **** /*
 485:src-gen/sr5e1/clock.h ****  * LSI related checks.
 486:src-gen/sr5e1/clock.h ****  */
 487:src-gen/sr5e1/clock.h **** #if !CLOCK_CFG_LSI_ENABLED
 488:src-gen/sr5e1/clock.h **** 
 489:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_LSI
 490:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTSEL requires LSI"
 491:src-gen/sr5e1/clock.h **** #endif
 492:src-gen/sr5e1/clock.h **** 
 493:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_LSI
 494:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOSEL requires LSI"
 495:src-gen/sr5e1/clock.h **** #endif
 496:src-gen/sr5e1/clock.h **** 
 497:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_LSI
 498:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_RTCSEL requires LSI"
 499:src-gen/sr5e1/clock.h **** #endif
 500:src-gen/sr5e1/clock.h **** 
 501:src-gen/sr5e1/clock.h **** #endif /* !CLOCK_CFG_LSI_ENABLED */
 502:src-gen/sr5e1/clock.h **** 
 503:src-gen/sr5e1/clock.h **** /* PLL0 enable check.*/
 504:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL0PHI) ||                                   \
 505:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_PLL0PHI1) ||                        \
 506:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL0PHI) ||                           \
 507:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_PLL0PHI) ||                         \
 508:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_PLL0PHI) ||                           \
 509:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_SPISEL == CLOCK_SPISEL_PLL0PHI) ||                           \
 510:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_PLL0PHI) ||                       \
 511:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL0PHI) ||                           \
 512:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL0PHI)
 513:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL0         TRUE
 514:src-gen/sr5e1/clock.h **** #else
 515:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL0         FALSE
 516:src-gen/sr5e1/clock.h **** #endif
 517:src-gen/sr5e1/clock.h **** 
 518:src-gen/sr5e1/clock.h **** /* PLL0 fields.*/
 519:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0MFD_VALUE >= 8U) && (CLOCK_CFG_PLL0MFD_VALUE <= 127U))
 520:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0MFD_VALUE value in clock_cfg.h"
 521:src-gen/sr5e1/clock.h **** #endif
 522:src-gen/sr5e1/clock.h **** 
 523:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0PREDIV_VALUE >= 0U) && (CLOCK_CFG_PLL0PREDIV_VALUE <= 7U))
 524:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0PREDIV_VALUE value in clock_cfg.h"
 525:src-gen/sr5e1/clock.h **** #endif
 526:src-gen/sr5e1/clock.h **** 
 527:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0RFDPHI_VALUE >= 1U) && (CLOCK_CFG_PLL0RFDPHI_VALUE <= 63U))
 528:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0RFDPHI_VALUE value in clock_cfg.h"
 529:src-gen/sr5e1/clock.h **** #endif
 530:src-gen/sr5e1/clock.h **** 
 531:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0RFDPHI1_VALUE >= 4U) && (CLOCK_CFG_PLL0RFDPHI1_VALUE <= 15U))
 532:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0RFDPHI1_VALUE value in clock_cfg.h"
 533:src-gen/sr5e1/clock.h **** #endif
 534:src-gen/sr5e1/clock.h **** 
 535:src-gen/sr5e1/clock.h **** /* PLL0 input clock.*/
 536:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC) || defined(__DOXYGEN__)
 537:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN                CLOCK_CFG_XOSCCLK
 538:src-gen/sr5e1/clock.h **** 
 539:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_IRCOSC
 540:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN                CLOCK_IRCOSCCLK
 541:src-gen/sr5e1/clock.h **** 
 542:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_NOCLOCK
 543:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN                0U
 544:src-gen/sr5e1/clock.h **** 
 545:src-gen/sr5e1/clock.h **** #else
 546:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0SRC value in clock_cfg.h"
 547:src-gen/sr5e1/clock.h **** #endif
 548:src-gen/sr5e1/clock.h **** 
 549:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL0IN == 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE)
 550:src-gen/sr5e1/clock.h **** #error "no PLL input clock"
 551:src-gen/sr5e1/clock.h **** #endif
 552:src-gen/sr5e1/clock.h **** 
 553:src-gen/sr5e1/clock.h **** #if ((CLOCK_PLL0IN != 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE)) &&              \
 554:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0IN < CLOCK_PLL0IN_MIN) || (CLOCK_PLL0IN > CLOCK_PLL0IN_MAX))
 555:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0IN value"
 556:src-gen/sr5e1/clock.h **** #endif
 557:src-gen/sr5e1/clock.h **** 
 558:src-gen/sr5e1/clock.h **** /* PLL0 PFD clock.*/
 559:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_PLL0PREDIV_VALUE == 0U)
 560:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD               0U
 561:src-gen/sr5e1/clock.h **** #else
 562:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD                                                       \
 563:src-gen/sr5e1/clock.h ****   (CLOCK_PLL0IN / CLOCK_CFG_PLL0PREDIV_VALUE)
 564:src-gen/sr5e1/clock.h **** #endif
 565:src-gen/sr5e1/clock.h **** 
 566:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL0PFD != 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE) &&               \
 567:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0PFD < CLOCK_PLL0PFD_MIN) || (CLOCK_PLL0PFD > CLOCK_PLL0PFD_MAX))
 568:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0PFD value"
 569:src-gen/sr5e1/clock.h **** #endif
 570:src-gen/sr5e1/clock.h **** 
 571:src-gen/sr5e1/clock.h **** /* PLL0 VCO clock.*/
 572:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0VCO                                                       \
 573:src-gen/sr5e1/clock.h ****   (2U * CLOCK_CFG_PLL0MFD_VALUE * CLOCK_PLL0PFD)
 574:src-gen/sr5e1/clock.h **** 
 575:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL0VCO != 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE) &&               \
 576:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0VCO < CLOCK_PLL0VCO_MIN) || (CLOCK_PLL0VCO > CLOCK_PLL0VCO_MAX))
 577:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0VCO value"
 578:src-gen/sr5e1/clock.h **** #endif
 579:src-gen/sr5e1/clock.h **** 
 580:src-gen/sr5e1/clock.h **** /* PLL0 output clocks.*/
 581:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI                                                       \
 582:src-gen/sr5e1/clock.h ****   ((CLOCK_PLL0VCO / CLOCK_CFG_PLL0RFDPHI_VALUE) / 2U)
 583:src-gen/sr5e1/clock.h **** 
 584:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL0 == TRUE) &&                                        \
 585:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0PHI < CLOCK_PLL0PHI_MIN) || (CLOCK_PLL0PHI > CLOCK_PLL0PHI_MAX))
 586:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0PHI value"
 587:src-gen/sr5e1/clock.h **** #endif
 588:src-gen/sr5e1/clock.h **** 
 589:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI1                                                      \
 590:src-gen/sr5e1/clock.h ****   ((CLOCK_PLL0VCO / CLOCK_CFG_PLL0RFDPHI1_VALUE) / 2U)
 591:src-gen/sr5e1/clock.h **** 
 592:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL0 == TRUE) &&                                        \
 593:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0PHI1 < CLOCK_PLL0PHI1_MIN) || (CLOCK_PLL0PHI1 > CLOCK_PLL0PHI1_MAX))
 594:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0PHI1 value"
 595:src-gen/sr5e1/clock.h **** #endif
 596:src-gen/sr5e1/clock.h **** 
 597:src-gen/sr5e1/clock.h **** /* PLL1 enable check.*/
 598:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI) ||                                   \
 599:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL1PHI) ||                           \
 600:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL1PHI) ||                           \
 601:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL1PHI)
 602:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL1         TRUE
 603:src-gen/sr5e1/clock.h **** #else
 604:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL1         FALSE
 605:src-gen/sr5e1/clock.h **** #endif
 606:src-gen/sr5e1/clock.h **** 
 607:src-gen/sr5e1/clock.h **** /* PLL1 fields.*/
 608:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL1MFD_VALUE >= 16U) && (CLOCK_CFG_PLL1MFD_VALUE <= 34U))
 609:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL1MFD_VALUE value in clock_cfg.h"
 610:src-gen/sr5e1/clock.h **** #endif
 611:src-gen/sr5e1/clock.h **** 
 612:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL1RFDPHI_VALUE >= 1U) && (CLOCK_CFG_PLL1RFDPHI_VALUE <= 63U))
 613:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL1RFDPHI_VALUE value in clock_cfg.h"
 614:src-gen/sr5e1/clock.h **** #endif
 615:src-gen/sr5e1/clock.h **** 
 616:src-gen/sr5e1/clock.h **** /* PLL1 input clock.*/
 617:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_PLL0PHI1) || defined(__DOXYGEN__)
 618:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN                CLOCK_PLL0PHI1
 619:src-gen/sr5e1/clock.h **** 
 620:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC
 621:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN                CLOCK_CFG_XOSCCLK
 622:src-gen/sr5e1/clock.h **** 
 623:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_NOCLOCK
 624:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN                0U
 625:src-gen/sr5e1/clock.h **** 
 626:src-gen/sr5e1/clock.h **** #else
 627:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL1SRC value in clock_cfg.h"
 628:src-gen/sr5e1/clock.h **** #endif
 629:src-gen/sr5e1/clock.h **** 
 630:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL1IN == 0U && CLOCK_ACTIVATE_PLL1 == TRUE)
 631:src-gen/sr5e1/clock.h **** #error "no PLL input clock"
 632:src-gen/sr5e1/clock.h **** #endif
 633:src-gen/sr5e1/clock.h **** 
 634:src-gen/sr5e1/clock.h **** #if ((CLOCK_PLL1IN != 0U) && (CLOCK_ACTIVATE_PLL1 == TRUE)) &&              \
 635:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL1IN < CLOCK_PLL1IN_MIN) || (CLOCK_PLL1IN > CLOCK_PLL1IN_MAX))
 636:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL1IN value"
 637:src-gen/sr5e1/clock.h **** #endif
 638:src-gen/sr5e1/clock.h **** 
 639:src-gen/sr5e1/clock.h **** /* PLL1 VCO clock.*/
 640:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1VCO                                                       \
 641:src-gen/sr5e1/clock.h ****   (CLOCK_PLL1IN * CLOCK_CFG_PLL1MFD_VALUE)
 642:src-gen/sr5e1/clock.h **** 
 643:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL1 == TRUE) &&                                        \
 644:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL1VCO < CLOCK_PLL1VCO_MIN) || (CLOCK_PLL1VCO > CLOCK_PLL1VCO_MAX))
 645:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL1VCO value"
 646:src-gen/sr5e1/clock.h **** #endif
 647:src-gen/sr5e1/clock.h **** 
 648:src-gen/sr5e1/clock.h **** /* PLL1 output clock.*/
 649:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1PHI                                                       \
 650:src-gen/sr5e1/clock.h ****   ((CLOCK_PLL1VCO / CLOCK_CFG_PLL1RFDPHI_VALUE) / 2U)
 651:src-gen/sr5e1/clock.h **** 
 652:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL1 == TRUE) &&                                        \
 653:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL1PHI < CLOCK_PLL1PHI_MIN) || (CLOCK_PLL1PHI > CLOCK_PLL1PHI_MAX))
 654:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL1PHI value"
 655:src-gen/sr5e1/clock.h **** #endif
 656:src-gen/sr5e1/clock.h **** 
 657:src-gen/sr5e1/clock.h **** /* SYSCLK source.*/
 658:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_IRCOSC) || defined(__DOXYGEN__)
 659:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_IRCOSCCLK
 660:src-gen/sr5e1/clock.h **** 
 661:src-gen/sr5e1/clock.h **** #elif (CLOCK_CFG_SW == CLOCK_SW_XOSC)
 662:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_CFG_XOSCCLK
 663:src-gen/sr5e1/clock.h **** 
 664:src-gen/sr5e1/clock.h **** #elif (CLOCK_CFG_SW == CLOCK_SW_PLL0PHI)
 665:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_PLL0PHI
 666:src-gen/sr5e1/clock.h **** 
 667:src-gen/sr5e1/clock.h **** #elif (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI)
 668:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_PLL1PHI
 669:src-gen/sr5e1/clock.h **** 
 670:src-gen/sr5e1/clock.h **** #else
 671:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SW value in clock_cfg.h"
 672:src-gen/sr5e1/clock.h **** #endif
 673:src-gen/sr5e1/clock.h **** 
 674:src-gen/sr5e1/clock.h **** /* SYSCLK check.*/
 675:src-gen/sr5e1/clock.h **** #if CLOCK_SYSCLK > CLOCK_SYSCLK_MAX
 676:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_SYSCLK value"
 677:src-gen/sr5e1/clock.h **** #endif
 678:src-gen/sr5e1/clock.h **** 
 679:src-gen/sr5e1/clock.h **** /* SYSCLKDIV source.*/
 680:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_SYSPRE_VALUE >= 0U) && (CLOCK_CFG_SYSPRE_VALUE <= 511U))
 681:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLKDIV             (CLOCK_SYSCLK / (CLOCK_CFG_SYSPRE_VALUE + 1U))
 682:src-gen/sr5e1/clock.h **** #else
 683:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SYSPRE_VALUE value in clock_cfg.h"
 684:src-gen/sr5e1/clock.h **** #endif
 685:src-gen/sr5e1/clock.h **** 
 686:src-gen/sr5e1/clock.h **** /* APB1 frequency.*/
 687:src-gen/sr5e1/clock.h **** #define CLOCK_PCLK1                 (CLOCK_SYSCLKDIV / 4U)
 688:src-gen/sr5e1/clock.h **** 
 689:src-gen/sr5e1/clock.h **** /* APB2 frequency.*/
 690:src-gen/sr5e1/clock.h **** #define CLOCK_PCLK2                 (CLOCK_SYSCLKDIV / 2U)
 691:src-gen/sr5e1/clock.h **** 
 692:src-gen/sr5e1/clock.h **** /**
 693:src-gen/sr5e1/clock.h ****  * @brief   TIM clock.
 694:src-gen/sr5e1/clock.h ****  */
 695:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK1               (CLOCK_PCLK2 * 2U)
 696:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK2               (CLOCK_PCLK1 * 2U)
 697:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK3               (CLOCK_PCLK1 * 2U)
 698:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK4               (CLOCK_PCLK2 * 2U)
 699:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK5               (CLOCK_PCLK2 * 2U)
 700:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK6               (CLOCK_PCLK1 * 2U)
 701:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK7               (CLOCK_PCLK1 * 2U)
 702:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK8               (CLOCK_PCLK2 * 2U)
 703:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK15              (CLOCK_PCLK2 * 2U)
 704:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK16              (CLOCK_PCLK2 * 2U)
 705:src-gen/sr5e1/clock.h **** #define CLOCK_TIMTSCLK              (CLOCK_PCLK1 * 2U)
 706:src-gen/sr5e1/clock.h **** 
 707:src-gen/sr5e1/clock.h **** /**
 708:src-gen/sr5e1/clock.h ****  * @brief   MCO divider clock frequency.
 709:src-gen/sr5e1/clock.h ****  */
 710:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_NOCLOCK) || defined(__DOXYGEN__)
 711:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             0U
 712:src-gen/sr5e1/clock.h **** 
 713:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_LSI
 714:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_LSICLK
 715:src-gen/sr5e1/clock.h **** 
 716:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_IRCOSC
 717:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_IRCOSCCLK
 718:src-gen/sr5e1/clock.h **** 
 719:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_XOSC
 720:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_CFG_XOSCCLK
 721:src-gen/sr5e1/clock.h **** 
 722:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL0PHI
 723:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_PLL0PHI
 724:src-gen/sr5e1/clock.h **** 
 725:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL1PHI
 726:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_PLL1PHI
 727:src-gen/sr5e1/clock.h **** 
 728:src-gen/sr5e1/clock.h **** #else
 729:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_MCOSEL value in clock_cfg.h"
 730:src-gen/sr5e1/clock.h **** #endif
 731:src-gen/sr5e1/clock.h **** 
 732:src-gen/sr5e1/clock.h **** /**
 733:src-gen/sr5e1/clock.h ****  * @brief   MCO output pin clock frequency.
 734:src-gen/sr5e1/clock.h ****  */
 735:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_MCOPRE_VALUE == 0U)
 736:src-gen/sr5e1/clock.h **** #define CLOCK_MCOCLK                CLOCK_MCODIVCLK
 737:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_MCOPRE_VALUE > 0U) && (CLOCK_CFG_MCOPRE_VALUE <= 63U))
 738:src-gen/sr5e1/clock.h **** #define CLOCK_MCOCLK                (CLOCK_MCODIVCLK / (2U * CLOCK_CFG_MCOPRE_VALUE))
 739:src-gen/sr5e1/clock.h **** #else
 740:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_MCOPRE_VALUE value in clock_cfg.h"
 741:src-gen/sr5e1/clock.h **** #endif
 742:src-gen/sr5e1/clock.h **** 
 743:src-gen/sr5e1/clock.h **** /**
 744:src-gen/sr5e1/clock.h ****  * @brief   RTC clock.
 745:src-gen/sr5e1/clock.h ****  */
 746:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_LSIPRE_VALUE == 0U)
 747:src-gen/sr5e1/clock.h **** #define CLOCK_LSIDIVCLK             CLOCK_LSICLK
 748:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_LSIPRE_VALUE > 0U) && (CLOCK_CFG_LSIPRE_VALUE <= 31U))
 749:src-gen/sr5e1/clock.h **** #define CLOCK_LSIDIVCLK             (CLOCK_LSICLK / (2U * CLOCK_CFG_LSIPRE_VALUE))
 750:src-gen/sr5e1/clock.h **** #else
 751:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_LSIPRE_VALUE value in clock_cfg.h"
 752:src-gen/sr5e1/clock.h **** #endif
 753:src-gen/sr5e1/clock.h **** 
 754:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_NOCLOCK) || defined(__DOXYGEN__)
 755:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSELCLK             0U
 756:src-gen/sr5e1/clock.h **** 
 757:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_LSI
 758:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSELCLK             CLOCK_LSIDIVCLK
 759:src-gen/sr5e1/clock.h **** 
 760:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_XOSC
 761:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSELCLK             CLOCK_CFG_XOSCCLK
 762:src-gen/sr5e1/clock.h **** 
 763:src-gen/sr5e1/clock.h **** #else
 764:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_RTCSEL value in clock_cfg.h"
 765:src-gen/sr5e1/clock.h **** #endif
 766:src-gen/sr5e1/clock.h **** 
 767:src-gen/sr5e1/clock.h **** /**
 768:src-gen/sr5e1/clock.h ****  * @brief   UART clock.
 769:src-gen/sr5e1/clock.h ****  */
 770:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_NOCLOCK) || defined(__DOXYGEN__)
 771:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            0U
 772:src-gen/sr5e1/clock.h **** 
 773:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_IRCOSC
 774:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_IRCOSCCLK
 775:src-gen/sr5e1/clock.h **** 
 776:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_XOSC
 777:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_CFG_XOSCCLK
 778:src-gen/sr5e1/clock.h **** 
 779:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_PLL0PHI
 780:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_PLL0PHI
 781:src-gen/sr5e1/clock.h **** 
 782:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_LSI
 783:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_LSICLK
 784:src-gen/sr5e1/clock.h **** 
 785:src-gen/sr5e1/clock.h **** #else
 786:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_UARTSEL value in clock_cfg.h"
 787:src-gen/sr5e1/clock.h **** #endif
 788:src-gen/sr5e1/clock.h **** 
 789:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_UARTPRE_VALUE >= 0U) && (CLOCK_CFG_UARTPRE_VALUE <= 31U))
 790:src-gen/sr5e1/clock.h **** #define CLOCK_UARTCLK               (CLOCK_UARTSELCLK / (CLOCK_CFG_UARTPRE_VALUE + 1U))
 791:src-gen/sr5e1/clock.h **** #else
 792:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_UARTPRE_VALUE value in clock_cfg.h"
 793:src-gen/sr5e1/clock.h **** #endif
 794:src-gen/sr5e1/clock.h **** 
 795:src-gen/sr5e1/clock.h **** #if CLOCK_UARTCLK > CLOCK_UARTCLK_MAX
 796:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_UARTCLK value"
 797:src-gen/sr5e1/clock.h **** #endif
 798:src-gen/sr5e1/clock.h **** 
 799:src-gen/sr5e1/clock.h **** #define CLOCK_UART1CLK              CLOCK_UARTCLK
 800:src-gen/sr5e1/clock.h **** #define CLOCK_UART2CLK              CLOCK_UARTCLK
 801:src-gen/sr5e1/clock.h **** #define CLOCK_UART3CLK              CLOCK_UARTCLK
 802:src-gen/sr5e1/clock.h **** 
 803:src-gen/sr5e1/clock.h **** /**
 804:src-gen/sr5e1/clock.h ****  * @brief   I2C clock.
 805:src-gen/sr5e1/clock.h ****  */
 806:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_NOCLOCK) || defined(__DOXYGEN__)
 807:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             0U
 808:src-gen/sr5e1/clock.h **** 
 809:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_IRCOSC
 810:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             CLOCK_IRCOSCCLK
 811:src-gen/sr5e1/clock.h **** 
 812:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_XOSC
 813:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             CLOCK_CFG_XOSCCLK
 814:src-gen/sr5e1/clock.h **** 
 815:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_PLL0PHI
 816:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             CLOCK_PLL0PHI
 817:src-gen/sr5e1/clock.h **** 
 818:src-gen/sr5e1/clock.h **** #else
 819:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_I2CSEL value in clock_cfg.h"
 820:src-gen/sr5e1/clock.h **** #endif
 821:src-gen/sr5e1/clock.h **** 
 822:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_I2CPRE_VALUE >= 0U) && (CLOCK_CFG_I2CPRE_VALUE <= 31U))
 823:src-gen/sr5e1/clock.h **** #define CLOCK_I2CCLK                (CLOCK_I2CSELCLK / (CLOCK_CFG_I2CPRE_VALUE + 1U))
 824:src-gen/sr5e1/clock.h **** #else
 825:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_I2CPRE_VALUE value in clock_cfg.h"
 826:src-gen/sr5e1/clock.h **** #endif
 827:src-gen/sr5e1/clock.h **** 
 828:src-gen/sr5e1/clock.h **** #if CLOCK_I2CCLK > CLOCK_I2CCLK_MAX
 829:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_I2CCLK value"
 830:src-gen/sr5e1/clock.h **** #endif
 831:src-gen/sr5e1/clock.h **** 
 832:src-gen/sr5e1/clock.h **** /**
 833:src-gen/sr5e1/clock.h ****  * @brief   SPI/I2S clock.
 834:src-gen/sr5e1/clock.h ****  */
 835:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SPISEL == CLOCK_SPISEL_NOCLOCK) || defined(__DOXYGEN__)
 836:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             0U
 837:src-gen/sr5e1/clock.h **** 
 838:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_IRCOSC
 839:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_IRCOSCCLK
 840:src-gen/sr5e1/clock.h **** 
 841:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_XOSC
 842:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_CFG_XOSCCLK
 843:src-gen/sr5e1/clock.h **** 
 844:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_PLL0PHI
 845:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_PLL0PHI
 846:src-gen/sr5e1/clock.h **** 
 847:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_I2S_CKIN
 848:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_CFG_I2S_CKIN
 849:src-gen/sr5e1/clock.h **** 
 850:src-gen/sr5e1/clock.h **** #else
 851:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SPISEL value in clock_cfg.h"
 852:src-gen/sr5e1/clock.h **** #endif
 853:src-gen/sr5e1/clock.h **** 
 854:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_SPIPRE_VALUE >= 0U) && (CLOCK_CFG_SPIPRE_VALUE <= 31U))
 855:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK                (CLOCK_SPISELCLK / (CLOCK_CFG_SPIPRE_VALUE + 1U))
 856:src-gen/sr5e1/clock.h **** #else
 857:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SPIPRE_VALUE value in clock_cfg.h"
 858:src-gen/sr5e1/clock.h **** #endif
 859:src-gen/sr5e1/clock.h **** 
 860:src-gen/sr5e1/clock.h **** #define CLOCK_SPI1CLK               CLOCK_PCLK2
 861:src-gen/sr5e1/clock.h **** #define CLOCK_SPI2CLK               CLOCK_PCLK1
 862:src-gen/sr5e1/clock.h **** #define CLOCK_SPI3CLK               CLOCK_PCLK1
 863:src-gen/sr5e1/clock.h **** #define CLOCK_SPI4CLK               CLOCK_PCLK2
 864:src-gen/sr5e1/clock.h **** #define CLOCK_I2S2CLK               CLOCK_SPICLK
 865:src-gen/sr5e1/clock.h **** #define CLOCK_I2S3CLK               CLOCK_SPICLK
 866:src-gen/sr5e1/clock.h **** 
 867:src-gen/sr5e1/clock.h **** /**
 868:src-gen/sr5e1/clock.h ****  * @brief   FDCAN clock.
 869:src-gen/sr5e1/clock.h ****  */
 870:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_NOCLOCK) || defined(__DOXYGEN__)
 871:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSELCLK           0U
 872:src-gen/sr5e1/clock.h **** 
 873:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_XOSC
 874:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSELCLK           CLOCK_CFG_XOSCCLK
 875:src-gen/sr5e1/clock.h **** 
 876:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_PLL0PHI
 877:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSELCLK           CLOCK_PLL0PHI
 878:src-gen/sr5e1/clock.h **** 
 879:src-gen/sr5e1/clock.h **** #else
 880:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_FDCANSEL value in clock_cfg.h"
 881:src-gen/sr5e1/clock.h **** #endif
 882:src-gen/sr5e1/clock.h **** 
 883:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_FDCANPRE_VALUE >= 0U) && (CLOCK_CFG_FDCANPRE_VALUE <= 31U))
 884:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANCLK              (CLOCK_FDCANSELCLK / (CLOCK_CFG_FDCANPRE_VALUE + 1U))
 885:src-gen/sr5e1/clock.h **** #else
 886:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_FDCANPRE_VALUE value in clock_cfg.h"
 887:src-gen/sr5e1/clock.h **** #endif
 888:src-gen/sr5e1/clock.h **** 
 889:src-gen/sr5e1/clock.h **** #if CLOCK_FDCANCLK > CLOCK_FDCANCLK_MAX
 890:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_FDCANCLK value"
 891:src-gen/sr5e1/clock.h **** #endif
 892:src-gen/sr5e1/clock.h **** 
 893:src-gen/sr5e1/clock.h **** /**
 894:src-gen/sr5e1/clock.h ****  * @brief   ADC clock.
 895:src-gen/sr5e1/clock.h ****  */
 896:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_NOCLOCK) || defined(__DOXYGEN__)
 897:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             0U
 898:src-gen/sr5e1/clock.h **** 
 899:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_XOSC
 900:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             CLOCK_CFG_XOSCCLK
 901:src-gen/sr5e1/clock.h **** 
 902:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL0PHI
 903:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             CLOCK_PLL0PHI
 904:src-gen/sr5e1/clock.h **** 
 905:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL1PHI
 906:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             CLOCK_PLL1PHI
 907:src-gen/sr5e1/clock.h **** 
 908:src-gen/sr5e1/clock.h **** #else
 909:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_ADCSEL value in clock_cfg.h"
 910:src-gen/sr5e1/clock.h **** #endif
 911:src-gen/sr5e1/clock.h **** /* The range of values of ADCPRE must be verified */
 912:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_ADCPRE_VALUE == 0U)
 913:src-gen/sr5e1/clock.h **** #define CLOCK_ADCCLK                CLOCK_ADCSELCLK
 914:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_ADCPRE_VALUE > 0U) && (CLOCK_CFG_ADCPRE_VALUE <= 63U))
 915:src-gen/sr5e1/clock.h **** #define CLOCK_ADCCLK                (CLOCK_ADCSELCLK / (2U * CLOCK_CFG_ADCPRE_VALUE))
 916:src-gen/sr5e1/clock.h **** #else
 917:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_ADCPRE_VALUE value in clock_cfg.h"
 918:src-gen/sr5e1/clock.h **** #endif
 919:src-gen/sr5e1/clock.h **** 
 920:src-gen/sr5e1/clock.h **** #if CLOCK_ADCCLK > CLOCK_ADCCLK_MAX
 921:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_ADCCLK value"
 922:src-gen/sr5e1/clock.h **** #endif
 923:src-gen/sr5e1/clock.h **** 
 924:src-gen/sr5e1/clock.h **** #define CLOCK_ADC12CLK              CLOCK_ADCCLK
 925:src-gen/sr5e1/clock.h **** #define CLOCK_ADC345CLK             CLOCK_ADCCLK
 926:src-gen/sr5e1/clock.h **** 
 927:src-gen/sr5e1/clock.h **** /**
 928:src-gen/sr5e1/clock.h ****  * @brief   SDADC clock.
 929:src-gen/sr5e1/clock.h ****  */
 930:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_NOCLOCK) || defined(__DOXYGEN__)
 931:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           0U
 932:src-gen/sr5e1/clock.h **** 
 933:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_XOSC
 934:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           CLOCK_CFG_XOSCCLK
 935:src-gen/sr5e1/clock.h **** 
 936:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL0PHI
 937:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           CLOCK_PLL0PHI
 938:src-gen/sr5e1/clock.h **** 
 939:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL1PHI
 940:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           CLOCK_PLL1PHI
 941:src-gen/sr5e1/clock.h **** 
 942:src-gen/sr5e1/clock.h **** #else
 943:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SDADCSEL value in clock_cfg.h"
 944:src-gen/sr5e1/clock.h **** #endif
 945:src-gen/sr5e1/clock.h **** /* The range of values of SDADCPRE must be verified */
 946:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SDADCPRE_VALUE == 0U)
 947:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCCLK              CLOCK_SDADCSELCLK
 948:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_SDADCPRE_VALUE > 0U) && (CLOCK_CFG_SDADCPRE_VALUE <= 63U))
 949:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCCLK              (CLOCK_SDADCSELCLK / (2U * CLOCK_CFG_SDADCPRE_VALUE))
 950:src-gen/sr5e1/clock.h **** #else
 951:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SDADCPRE_VALUE value in clock_cfg.h"
 952:src-gen/sr5e1/clock.h **** #endif
 953:src-gen/sr5e1/clock.h **** 
 954:src-gen/sr5e1/clock.h **** #if CLOCK_SDADCCLK > CLOCK_SDADCCLK_MAX
 955:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_SDADCCLK value"
 956:src-gen/sr5e1/clock.h **** #endif
 957:src-gen/sr5e1/clock.h **** 
 958:src-gen/sr5e1/clock.h **** /* Flash wait state (APC = 0) settings.*/
 959:src-gen/sr5e1/clock.h **** #if (CLOCK_SYSCLKDIV <= 136000000UL) || defined(__DOXYGEN__)
 960:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         3U /* 0 < core frequency < 136MHz  */
 961:src-gen/sr5e1/clock.h **** 
 962:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 170000000UL)
 963:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         4U /* 136MHz < core_freq <= 170MHz */
 964:src-gen/sr5e1/clock.h **** 
 965:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 204000000UL)
 966:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         5U /* 170MHz < core_freq <= 204MHz */
 967:src-gen/sr5e1/clock.h **** 
 968:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 238000000UL)
 969:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         6U /* 204MHz < core_freq <= 238MHz */
 970:src-gen/sr5e1/clock.h **** 
 971:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 273000000UL)
 972:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         7U /* 238MHz < core_freq <= 273MHz */
 973:src-gen/sr5e1/clock.h **** 
 974:src-gen/sr5e1/clock.h **** #else
 975:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         8U /* 273MHz < core_freq <= 307MHz */
 976:src-gen/sr5e1/clock.h **** 
 977:src-gen/sr5e1/clock.h **** #endif
 978:src-gen/sr5e1/clock.h **** 
 979:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 980:src-gen/sr5e1/clock.h **** /* Module data structures and types.                                         */
 981:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 982:src-gen/sr5e1/clock.h **** 
 983:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 984:src-gen/sr5e1/clock.h **** /* Module macros.                                                            */
 985:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 986:src-gen/sr5e1/clock.h **** 
 987:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 988:src-gen/sr5e1/clock.h **** /* External declarations.                                                    */
 989:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 990:src-gen/sr5e1/clock.h **** 
 991:src-gen/sr5e1/clock.h **** /**
 992:src-gen/sr5e1/clock.h ****  * @brief   CMSIS system core clock variable.
 993:src-gen/sr5e1/clock.h ****  */
 994:src-gen/sr5e1/clock.h **** extern uint32_t SystemCoreClock;
 995:src-gen/sr5e1/clock.h **** 
 996:src-gen/sr5e1/clock.h **** #ifdef __cplusplus
 997:src-gen/sr5e1/clock.h **** extern "C" {
 998:src-gen/sr5e1/clock.h **** #endif
 999:src-gen/sr5e1/clock.h **** 
1000:src-gen/sr5e1/clock.h **** /**
1001:src-gen/sr5e1/clock.h ****  * @brief   Initializes clock
1002:src-gen/sr5e1/clock.h ****  *
1003:src-gen/sr5e1/clock.h ****  * @api
1004:src-gen/sr5e1/clock.h ****  */
1005:src-gen/sr5e1/clock.h **** void clock_init(void);
1006:src-gen/sr5e1/clock.h **** 
1007:src-gen/sr5e1/clock.h **** #ifdef __cplusplus
1008:src-gen/sr5e1/clock.h **** }
1009:src-gen/sr5e1/clock.h **** #endif
1010:src-gen/sr5e1/clock.h **** 
1011:src-gen/sr5e1/clock.h **** /*===========================================================================*/
1012:src-gen/sr5e1/clock.h **** /* Module inline functions.                                                  */
1013:src-gen/sr5e1/clock.h **** /*===========================================================================*/
1014:src-gen/sr5e1/clock.h **** 
1015:src-gen/sr5e1/clock.h **** /**
1016:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB1 peripherals clock [Low Word]
1017:src-gen/sr5e1/clock.h ****  *
1018:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1019:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1020:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1021:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1LENR after the update
1022:src-gen/sr5e1/clock.h ****  *
1023:src-gen/sr5e1/clock.h ****  * @api
1024:src-gen/sr5e1/clock.h ****  */
1025:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB1L(bool smode, uint32_t m) {
1026:src-gen/sr5e1/clock.h **** 
1027:src-gen/sr5e1/clock.h ****     RCC->AHB1LENR |= m;
1028:src-gen/sr5e1/clock.h ****     if (smode) {
1029:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1LSMENR |= m;
1030:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1031:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1LSMENR |= m;
1032:src-gen/sr5e1/clock.h **** #endif
1033:src-gen/sr5e1/clock.h ****     }
1034:src-gen/sr5e1/clock.h ****     else {
1035:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1LSMENR &= ~m;
1036:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1037:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1LSMENR &= ~m;
1038:src-gen/sr5e1/clock.h **** #endif
1039:src-gen/sr5e1/clock.h ****     }
1040:src-gen/sr5e1/clock.h **** 
1041:src-gen/sr5e1/clock.h ****     return RCC->AHB1LENR;
1042:src-gen/sr5e1/clock.h **** }
1043:src-gen/sr5e1/clock.h **** 
1044:src-gen/sr5e1/clock.h **** /**
1045:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB1 peripherals clock [Low Word]
1046:src-gen/sr5e1/clock.h ****  *
1047:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1048:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1LENR after the update
1049:src-gen/sr5e1/clock.h ****  *
1050:src-gen/sr5e1/clock.h ****  * @api
1051:src-gen/sr5e1/clock.h ****  */
1052:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB1L(uint32_t m) {
1053:src-gen/sr5e1/clock.h **** 
1054:src-gen/sr5e1/clock.h ****     RCC->AHB1LENR &= ~m;
1055:src-gen/sr5e1/clock.h ****     RCC->C1_AHB1LSMENR &= ~m;
1056:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1057:src-gen/sr5e1/clock.h ****     RCC->C2_AHB1LSMENR &= ~m;
1058:src-gen/sr5e1/clock.h **** #endif
1059:src-gen/sr5e1/clock.h **** 
1060:src-gen/sr5e1/clock.h ****     return RCC->AHB1LENR;
1061:src-gen/sr5e1/clock.h **** }
1062:src-gen/sr5e1/clock.h **** 
1063:src-gen/sr5e1/clock.h **** /**
1064:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB1 peripheral clock [Low Word] is enabled
1065:src-gen/sr5e1/clock.h ****  *
1066:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1067:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1068:src-gen/sr5e1/clock.h ****  *
1069:src-gen/sr5e1/clock.h ****  * @api
1070:src-gen/sr5e1/clock.h ****  */
1071:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB1L(uint32_t m) {
1072:src-gen/sr5e1/clock.h **** 
1073:src-gen/sr5e1/clock.h ****     return (((RCC->AHB1LENR & m) == m) ? true : false);
1074:src-gen/sr5e1/clock.h **** }
1075:src-gen/sr5e1/clock.h **** 
1076:src-gen/sr5e1/clock.h **** /**
1077:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB1 peripherals [Low Word]
1078:src-gen/sr5e1/clock.h ****  *
1079:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1080:src-gen/sr5e1/clock.h ****  *
1081:src-gen/sr5e1/clock.h ****  * @api
1082:src-gen/sr5e1/clock.h ****  */
1083:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB1L(uint32_t m) {
1084:src-gen/sr5e1/clock.h **** 
1085:src-gen/sr5e1/clock.h ****     RCC->AHB1LRSTR |= m;
1086:src-gen/sr5e1/clock.h ****     RCC->AHB1LRSTR &= ~m;
1087:src-gen/sr5e1/clock.h ****     (void)RCC->AHB1LRSTR;
1088:src-gen/sr5e1/clock.h **** }
1089:src-gen/sr5e1/clock.h **** 
1090:src-gen/sr5e1/clock.h **** /**
1091:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB1 peripherals clock [High Word]
1092:src-gen/sr5e1/clock.h ****  *
1093:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1094:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1095:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1096:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1HENR after the update
1097:src-gen/sr5e1/clock.h ****  *
1098:src-gen/sr5e1/clock.h ****  * @api
1099:src-gen/sr5e1/clock.h ****  */
1100:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB1H(bool smode, uint32_t m) {
1101:src-gen/sr5e1/clock.h **** 
1102:src-gen/sr5e1/clock.h ****     RCC->AHB1HENR |= m;
1103:src-gen/sr5e1/clock.h ****     if (smode) {
1104:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1HSMENR |= m;
1105:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1106:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1HSMENR |= m;
1107:src-gen/sr5e1/clock.h **** #endif
1108:src-gen/sr5e1/clock.h ****     }
1109:src-gen/sr5e1/clock.h ****     else {
1110:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1HSMENR &= ~m;
1111:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1112:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1HSMENR &= ~m;
1113:src-gen/sr5e1/clock.h **** #endif
1114:src-gen/sr5e1/clock.h ****     }
1115:src-gen/sr5e1/clock.h **** 
1116:src-gen/sr5e1/clock.h ****     return RCC->AHB1HENR;
1117:src-gen/sr5e1/clock.h **** }
1118:src-gen/sr5e1/clock.h **** 
1119:src-gen/sr5e1/clock.h **** /**
1120:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB1 peripherals clock [High Word]
1121:src-gen/sr5e1/clock.h ****  *
1122:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1123:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1HENR after the update
1124:src-gen/sr5e1/clock.h ****  *
1125:src-gen/sr5e1/clock.h ****  * @api
1126:src-gen/sr5e1/clock.h ****  */
1127:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB1H(uint32_t m) {
1128:src-gen/sr5e1/clock.h **** 
1129:src-gen/sr5e1/clock.h ****     RCC->AHB1HENR &= ~m;
1130:src-gen/sr5e1/clock.h ****     RCC->C1_AHB1HSMENR &= ~m;
1131:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1132:src-gen/sr5e1/clock.h ****     RCC->C2_AHB1HSMENR &= ~m;
1133:src-gen/sr5e1/clock.h **** #endif
1134:src-gen/sr5e1/clock.h **** 
1135:src-gen/sr5e1/clock.h ****     return RCC->AHB1HENR;
1136:src-gen/sr5e1/clock.h **** }
1137:src-gen/sr5e1/clock.h **** 
1138:src-gen/sr5e1/clock.h **** /**
1139:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB1 peripheral clock [High Word] is enabled
1140:src-gen/sr5e1/clock.h ****  *
1141:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1142:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1143:src-gen/sr5e1/clock.h ****  *
1144:src-gen/sr5e1/clock.h ****  * @api
1145:src-gen/sr5e1/clock.h ****  */
1146:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB1H(uint32_t m) {
1147:src-gen/sr5e1/clock.h **** 
1148:src-gen/sr5e1/clock.h ****     return (((RCC->AHB1HENR & m) == m) ? true : false);
1149:src-gen/sr5e1/clock.h **** }
1150:src-gen/sr5e1/clock.h **** 
1151:src-gen/sr5e1/clock.h **** /**
1152:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB1 peripherals [High Word]
1153:src-gen/sr5e1/clock.h ****  *
1154:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1155:src-gen/sr5e1/clock.h ****  *
1156:src-gen/sr5e1/clock.h ****  * @api
1157:src-gen/sr5e1/clock.h ****  */
1158:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB1H(uint32_t m) {
1159:src-gen/sr5e1/clock.h **** 
1160:src-gen/sr5e1/clock.h ****     RCC->AHB1HRSTR |= m;
1161:src-gen/sr5e1/clock.h ****     RCC->AHB1HRSTR &= ~m;
1162:src-gen/sr5e1/clock.h ****     (void)RCC->AHB1HRSTR;
1163:src-gen/sr5e1/clock.h **** }
1164:src-gen/sr5e1/clock.h **** 
1165:src-gen/sr5e1/clock.h **** /**
1166:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB2 peripherals clock [Low Word]
1167:src-gen/sr5e1/clock.h ****  *
1168:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1169:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1170:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1171:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2LENR after the update
1172:src-gen/sr5e1/clock.h ****  *
1173:src-gen/sr5e1/clock.h ****  * @api
1174:src-gen/sr5e1/clock.h ****  */
1175:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB2L(bool smode, uint32_t m) {
1176:src-gen/sr5e1/clock.h **** 
1177:src-gen/sr5e1/clock.h ****     RCC->AHB2LENR |= m;
1178:src-gen/sr5e1/clock.h ****     if (smode) {
1179:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2LSMENR |= m;
1180:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1181:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2LSMENR |= m;
1182:src-gen/sr5e1/clock.h **** #endif
1183:src-gen/sr5e1/clock.h ****     }
1184:src-gen/sr5e1/clock.h ****     else {
1185:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2LSMENR &= ~m;
1186:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1187:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2LSMENR &= ~m;
1188:src-gen/sr5e1/clock.h **** #endif
1189:src-gen/sr5e1/clock.h ****     }
1190:src-gen/sr5e1/clock.h **** 
1191:src-gen/sr5e1/clock.h ****     return RCC->AHB2LENR;
1192:src-gen/sr5e1/clock.h **** }
1193:src-gen/sr5e1/clock.h **** 
1194:src-gen/sr5e1/clock.h **** /**
1195:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB2 peripherals clock [Low Word]
1196:src-gen/sr5e1/clock.h ****  *
1197:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1198:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2LENR after the update
1199:src-gen/sr5e1/clock.h ****  *
1200:src-gen/sr5e1/clock.h ****  * @api
1201:src-gen/sr5e1/clock.h ****  */
1202:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB2L(uint32_t m) {
1203:src-gen/sr5e1/clock.h **** 
1204:src-gen/sr5e1/clock.h ****     RCC->AHB2LENR &= ~m;
1205:src-gen/sr5e1/clock.h ****     RCC->C1_AHB2LSMENR &= ~m;
1206:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1207:src-gen/sr5e1/clock.h ****     RCC->C2_AHB2LSMENR &= ~m;
1208:src-gen/sr5e1/clock.h **** #endif
1209:src-gen/sr5e1/clock.h **** 
1210:src-gen/sr5e1/clock.h ****     return RCC->AHB2LENR;
1211:src-gen/sr5e1/clock.h **** }
1212:src-gen/sr5e1/clock.h **** 
1213:src-gen/sr5e1/clock.h **** /**
1214:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB2 peripheral clock [Low Word] is enabled
1215:src-gen/sr5e1/clock.h ****  *
1216:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1217:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1218:src-gen/sr5e1/clock.h ****  *
1219:src-gen/sr5e1/clock.h ****  * @api
1220:src-gen/sr5e1/clock.h ****  */
1221:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB2L(uint32_t m) {
1222:src-gen/sr5e1/clock.h **** 
1223:src-gen/sr5e1/clock.h ****     return (((RCC->AHB2LENR & m) == m) ? true : false);
1224:src-gen/sr5e1/clock.h **** }
1225:src-gen/sr5e1/clock.h **** 
1226:src-gen/sr5e1/clock.h **** /**
1227:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB2 peripherals [Low Word]
1228:src-gen/sr5e1/clock.h ****  *
1229:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1230:src-gen/sr5e1/clock.h ****  *
1231:src-gen/sr5e1/clock.h ****  * @api
1232:src-gen/sr5e1/clock.h ****  */
1233:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB2L(uint32_t m) {
1234:src-gen/sr5e1/clock.h **** 
1235:src-gen/sr5e1/clock.h ****     RCC->AHB2LRSTR |= m;
1236:src-gen/sr5e1/clock.h ****     RCC->AHB2LRSTR &= ~m;
1237:src-gen/sr5e1/clock.h ****     (void)RCC->AHB2LRSTR;
1238:src-gen/sr5e1/clock.h **** }
1239:src-gen/sr5e1/clock.h **** 
1240:src-gen/sr5e1/clock.h **** /**
1241:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB2 peripherals clock [High Word]
1242:src-gen/sr5e1/clock.h ****  *
1243:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1244:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1245:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1246:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2HENR after the update
1247:src-gen/sr5e1/clock.h ****  *
1248:src-gen/sr5e1/clock.h ****  * @api
1249:src-gen/sr5e1/clock.h ****  */
1250:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB2H(bool smode, uint32_t m) {
1251:src-gen/sr5e1/clock.h **** 
1252:src-gen/sr5e1/clock.h ****     RCC->AHB2HENR |= m;
 268              		.loc 2 1252 19
 269 0034 4FF08843 		mov	r3, #1140850688
 270 0038 DA6F     		ldr	r2, [r3, #124]
 271 003a 4FF08841 		mov	r1, #1140850688
 272 003e 049B     		ldr	r3, [sp, #16]
 273 0040 1343     		orrs	r3, r3, r2
 274 0042 CB67     		str	r3, [r1, #124]
1253:src-gen/sr5e1/clock.h ****     if (smode) {
 275              		.loc 2 1253 8
 276 0044 9DF81630 		ldrb	r3, [sp, #22]	@ zero_extendqisi2
 277 0048 002B     		cmp	r3, #0
 278 004a 14D0     		beq	.L28
1254:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2HSMENR |= m;
 279              		.loc 2 1254 28
 280 004c 4FF08843 		mov	r3, #1140850688
 281 0050 D3F89C20 		ldr	r2, [r3, #156]
 282 0054 4FF08841 		mov	r1, #1140850688
 283 0058 049B     		ldr	r3, [sp, #16]
 284 005a 1343     		orrs	r3, r3, r2
 285 005c C1F89C30 		str	r3, [r1, #156]
1255:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1256:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2HSMENR |= m;
 286              		.loc 2 1256 28
 287 0060 4FF08843 		mov	r3, #1140850688
 288 0064 D3F8BC20 		ldr	r2, [r3, #188]
 289 0068 4FF08841 		mov	r1, #1140850688
 290 006c 049B     		ldr	r3, [sp, #16]
 291 006e 1343     		orrs	r3, r3, r2
 292 0070 C1F8BC30 		str	r3, [r1, #188]
 293 0074 15E0     		b	.L29
 294              	.L28:
1257:src-gen/sr5e1/clock.h **** #endif
1258:src-gen/sr5e1/clock.h ****     }
1259:src-gen/sr5e1/clock.h ****     else {
1260:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2HSMENR &= ~m;
 295              		.loc 2 1260 28
 296 0076 4FF08843 		mov	r3, #1140850688
 297 007a D3F89C20 		ldr	r2, [r3, #156]
 298              		.loc 2 1260 31
 299 007e 049B     		ldr	r3, [sp, #16]
 300 0080 DB43     		mvns	r3, r3
 301              		.loc 2 1260 28
 302 0082 4FF08841 		mov	r1, #1140850688
 303 0086 1340     		ands	r3, r3, r2
 304 0088 C1F89C30 		str	r3, [r1, #156]
1261:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1262:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2HSMENR &= ~m;
 305              		.loc 2 1262 28
 306 008c 4FF08843 		mov	r3, #1140850688
 307 0090 D3F8BC20 		ldr	r2, [r3, #188]
 308              		.loc 2 1262 31
 309 0094 049B     		ldr	r3, [sp, #16]
 310 0096 DB43     		mvns	r3, r3
 311              		.loc 2 1262 28
 312 0098 4FF08841 		mov	r1, #1140850688
 313 009c 1340     		ands	r3, r3, r2
 314 009e C1F8BC30 		str	r3, [r1, #188]
 315              	.L29:
1263:src-gen/sr5e1/clock.h **** #endif
1264:src-gen/sr5e1/clock.h ****     }
1265:src-gen/sr5e1/clock.h **** 
1266:src-gen/sr5e1/clock.h ****     return RCC->AHB2HENR;
 316              		.loc 2 1266 15
 317 00a2 4FF08843 		mov	r3, #1140850688
 318 00a6 DB6F     		ldr	r3, [r3, #124]
 319              	.LBE29:
 320              	.LBE28:
1267:src-gen/sr5e1/clock.h **** }
1268:src-gen/sr5e1/clock.h **** 
1269:src-gen/sr5e1/clock.h **** /**
1270:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB2 peripherals clock [High Word]
1271:src-gen/sr5e1/clock.h ****  *
1272:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1273:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2HENR after the update
1274:src-gen/sr5e1/clock.h ****  *
1275:src-gen/sr5e1/clock.h ****  * @api
1276:src-gen/sr5e1/clock.h ****  */
1277:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB2H(uint32_t m) {
1278:src-gen/sr5e1/clock.h **** 
1279:src-gen/sr5e1/clock.h ****     RCC->AHB2HENR &= ~m;
1280:src-gen/sr5e1/clock.h ****     RCC->C1_AHB2HSMENR &= ~m;
1281:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1282:src-gen/sr5e1/clock.h ****     RCC->C2_AHB2HSMENR &= ~m;
1283:src-gen/sr5e1/clock.h **** #endif
1284:src-gen/sr5e1/clock.h **** 
1285:src-gen/sr5e1/clock.h ****     return RCC->AHB2HENR;
1286:src-gen/sr5e1/clock.h **** }
1287:src-gen/sr5e1/clock.h **** 
1288:src-gen/sr5e1/clock.h **** /**
1289:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB2 peripheral clock [High Word] is enabled
1290:src-gen/sr5e1/clock.h ****  *
1291:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1292:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1293:src-gen/sr5e1/clock.h ****  *
1294:src-gen/sr5e1/clock.h ****  * @api
1295:src-gen/sr5e1/clock.h ****  */
1296:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB2H(uint32_t m) {
1297:src-gen/sr5e1/clock.h **** 
1298:src-gen/sr5e1/clock.h ****     return (((RCC->AHB2HENR & m) == m) ? true : false);
1299:src-gen/sr5e1/clock.h **** }
1300:src-gen/sr5e1/clock.h **** 
1301:src-gen/sr5e1/clock.h **** /**
1302:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB2 peripherals [High Word]
1303:src-gen/sr5e1/clock.h ****  *
1304:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1305:src-gen/sr5e1/clock.h ****  *
1306:src-gen/sr5e1/clock.h ****  * @api
1307:src-gen/sr5e1/clock.h ****  */
1308:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB2H(uint32_t m) {
1309:src-gen/sr5e1/clock.h **** 
1310:src-gen/sr5e1/clock.h ****     RCC->AHB2HRSTR |= m;
1311:src-gen/sr5e1/clock.h ****     RCC->AHB2HRSTR &= ~m;
1312:src-gen/sr5e1/clock.h ****     (void)RCC->AHB2HRSTR;
1313:src-gen/sr5e1/clock.h **** }
1314:src-gen/sr5e1/clock.h **** 
1315:src-gen/sr5e1/clock.h **** /**
1316:src-gen/sr5e1/clock.h ****  * @brief   Enables APB1 peripherals clock [Low Word]
1317:src-gen/sr5e1/clock.h ****  *
1318:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1319:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1320:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1321:src-gen/sr5e1/clock.h ****  * @return              value of register APB1LENR after the update
1322:src-gen/sr5e1/clock.h ****  *
1323:src-gen/sr5e1/clock.h ****  * @api
1324:src-gen/sr5e1/clock.h ****  */
1325:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_APB1L(bool smode, uint32_t m) {
1326:src-gen/sr5e1/clock.h **** 
1327:src-gen/sr5e1/clock.h ****     RCC->APB1LENR |= m;
1328:src-gen/sr5e1/clock.h ****     if (smode) {
1329:src-gen/sr5e1/clock.h ****         RCC->C1_APB1LSMENR |= m;
1330:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1331:src-gen/sr5e1/clock.h ****         RCC->C2_APB1LSMENR |= m;
1332:src-gen/sr5e1/clock.h **** #endif
1333:src-gen/sr5e1/clock.h ****     }
1334:src-gen/sr5e1/clock.h ****     else {
1335:src-gen/sr5e1/clock.h ****         RCC->C1_APB1LSMENR &= ~m;
1336:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1337:src-gen/sr5e1/clock.h ****         RCC->C2_APB1LSMENR &= ~m;
1338:src-gen/sr5e1/clock.h **** #endif
1339:src-gen/sr5e1/clock.h ****     }
1340:src-gen/sr5e1/clock.h **** 
1341:src-gen/sr5e1/clock.h ****     return RCC->APB1LENR;
1342:src-gen/sr5e1/clock.h **** }
1343:src-gen/sr5e1/clock.h **** 
1344:src-gen/sr5e1/clock.h **** /**
1345:src-gen/sr5e1/clock.h ****  * @brief   Disables APB1 peripherals clock [Low Word]
1346:src-gen/sr5e1/clock.h ****  *
1347:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1348:src-gen/sr5e1/clock.h ****  * @return              value of register APB1LENR after the update
1349:src-gen/sr5e1/clock.h ****  *
1350:src-gen/sr5e1/clock.h ****  * @api
1351:src-gen/sr5e1/clock.h ****  */
1352:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_APB1L(uint32_t m) {
1353:src-gen/sr5e1/clock.h **** 
1354:src-gen/sr5e1/clock.h ****     RCC->APB1LENR &= ~m;
1355:src-gen/sr5e1/clock.h ****     RCC->C1_APB1LSMENR &= ~m;
1356:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1357:src-gen/sr5e1/clock.h ****     RCC->C2_APB1LSMENR &= ~m;
1358:src-gen/sr5e1/clock.h **** #endif
1359:src-gen/sr5e1/clock.h **** 
1360:src-gen/sr5e1/clock.h ****     return RCC->APB1LENR;
1361:src-gen/sr5e1/clock.h **** }
1362:src-gen/sr5e1/clock.h **** 
1363:src-gen/sr5e1/clock.h **** /**
1364:src-gen/sr5e1/clock.h ****  * @brief   Checks if APB1 peripheral clock [Low Word] is enabled
1365:src-gen/sr5e1/clock.h ****  *
1366:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1367:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1368:src-gen/sr5e1/clock.h ****  *
1369:src-gen/sr5e1/clock.h ****  * @api
1370:src-gen/sr5e1/clock.h ****  */
1371:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_APB1L(uint32_t m) {
1372:src-gen/sr5e1/clock.h **** 
1373:src-gen/sr5e1/clock.h ****     return (((RCC->APB1LENR & m) == m) ? true : false);
1374:src-gen/sr5e1/clock.h **** }
1375:src-gen/sr5e1/clock.h **** 
1376:src-gen/sr5e1/clock.h **** /**
1377:src-gen/sr5e1/clock.h ****  * @brief   Resets APB1 peripherals [Low Word]
1378:src-gen/sr5e1/clock.h ****  *
1379:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1380:src-gen/sr5e1/clock.h ****  *
1381:src-gen/sr5e1/clock.h ****  * @api
1382:src-gen/sr5e1/clock.h ****  */
1383:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_APB1L(uint32_t m) {
1384:src-gen/sr5e1/clock.h **** 
1385:src-gen/sr5e1/clock.h ****     RCC->APB1LRSTR |= m;
1386:src-gen/sr5e1/clock.h ****     RCC->APB1LRSTR &= ~m;
1387:src-gen/sr5e1/clock.h ****     (void)RCC->APB1LRSTR;
1388:src-gen/sr5e1/clock.h **** }
1389:src-gen/sr5e1/clock.h **** 
1390:src-gen/sr5e1/clock.h **** /**
1391:src-gen/sr5e1/clock.h ****  * @brief   Enables APB2 peripherals clock [Low Word]
1392:src-gen/sr5e1/clock.h ****  *
1393:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1394:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1395:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1396:src-gen/sr5e1/clock.h ****  * @return              value of register APB2LENR after the update
1397:src-gen/sr5e1/clock.h ****  *
1398:src-gen/sr5e1/clock.h ****  * @api
1399:src-gen/sr5e1/clock.h ****  */
1400:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_APB2L(bool smode, uint32_t m) {
1401:src-gen/sr5e1/clock.h **** 
1402:src-gen/sr5e1/clock.h ****     RCC->APB2LENR |= m;
1403:src-gen/sr5e1/clock.h ****     if (smode) {
1404:src-gen/sr5e1/clock.h ****         RCC->C1_APB2LSMENR |= m;
1405:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1406:src-gen/sr5e1/clock.h ****         RCC->C2_APB2LSMENR |= m;
1407:src-gen/sr5e1/clock.h **** #endif
1408:src-gen/sr5e1/clock.h ****     }
1409:src-gen/sr5e1/clock.h ****     else {
1410:src-gen/sr5e1/clock.h ****         RCC->C1_APB2LSMENR &= ~m;
1411:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1412:src-gen/sr5e1/clock.h ****         RCC->C2_APB2LSMENR &= ~m;
1413:src-gen/sr5e1/clock.h **** #endif
1414:src-gen/sr5e1/clock.h ****     }
1415:src-gen/sr5e1/clock.h **** 
1416:src-gen/sr5e1/clock.h ****     return RCC->APB2LENR;
1417:src-gen/sr5e1/clock.h **** }
1418:src-gen/sr5e1/clock.h **** 
1419:src-gen/sr5e1/clock.h **** /**
1420:src-gen/sr5e1/clock.h ****  * @brief   Disables APB2 peripherals clock [Low Word]
1421:src-gen/sr5e1/clock.h ****  *
1422:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1423:src-gen/sr5e1/clock.h ****  * @return              value of register APB2LENR after the update
1424:src-gen/sr5e1/clock.h ****  *
1425:src-gen/sr5e1/clock.h ****  * @api
1426:src-gen/sr5e1/clock.h ****  */
1427:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_APB2L(uint32_t m) {
1428:src-gen/sr5e1/clock.h **** 
1429:src-gen/sr5e1/clock.h ****     RCC->APB2LENR &= ~m;
1430:src-gen/sr5e1/clock.h ****     RCC->C1_APB2LSMENR &= ~m;
1431:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1432:src-gen/sr5e1/clock.h ****     RCC->C2_APB2LSMENR &= ~m;
1433:src-gen/sr5e1/clock.h **** #endif
1434:src-gen/sr5e1/clock.h **** 
1435:src-gen/sr5e1/clock.h ****     return RCC->APB2LENR;
1436:src-gen/sr5e1/clock.h **** }
1437:src-gen/sr5e1/clock.h **** 
1438:src-gen/sr5e1/clock.h **** /**
1439:src-gen/sr5e1/clock.h ****  * @brief   Checks if APB2 peripheral clock [Low Word] is enabled
1440:src-gen/sr5e1/clock.h ****  *
1441:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1442:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1443:src-gen/sr5e1/clock.h ****  *
1444:src-gen/sr5e1/clock.h ****  * @api
1445:src-gen/sr5e1/clock.h ****  */
1446:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_APB2L(uint32_t m) {
1447:src-gen/sr5e1/clock.h **** 
1448:src-gen/sr5e1/clock.h ****     return (((RCC->APB2LENR & m) == m) ? true : false);
1449:src-gen/sr5e1/clock.h **** }
1450:src-gen/sr5e1/clock.h **** 
1451:src-gen/sr5e1/clock.h **** /**
1452:src-gen/sr5e1/clock.h ****  * @brief   Resets APB2 peripherals [Low Word]
1453:src-gen/sr5e1/clock.h ****  *
1454:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1455:src-gen/sr5e1/clock.h ****  *
1456:src-gen/sr5e1/clock.h ****  * @api
1457:src-gen/sr5e1/clock.h ****  */
1458:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_APB2L(uint32_t m) {
1459:src-gen/sr5e1/clock.h **** 
1460:src-gen/sr5e1/clock.h ****     RCC->APB2LRSTR |= m;
1461:src-gen/sr5e1/clock.h ****     RCC->APB2LRSTR &= ~m;
1462:src-gen/sr5e1/clock.h ****     (void)RCC->APB2LRSTR;
1463:src-gen/sr5e1/clock.h **** }
1464:src-gen/sr5e1/clock.h **** 
1465:src-gen/sr5e1/clock.h **** /**
1466:src-gen/sr5e1/clock.h ****  * @brief   Enables APB2 peripherals clock [High Word]
1467:src-gen/sr5e1/clock.h ****  *
1468:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1469:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1470:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1471:src-gen/sr5e1/clock.h ****  * @return              value of register APB2HENR after the update
1472:src-gen/sr5e1/clock.h ****  *
1473:src-gen/sr5e1/clock.h ****  * @api
1474:src-gen/sr5e1/clock.h ****  */
1475:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_APB2H(bool smode, uint32_t m) {
1476:src-gen/sr5e1/clock.h **** 
1477:src-gen/sr5e1/clock.h ****     RCC->APB2HENR |= m;
1478:src-gen/sr5e1/clock.h ****     if (smode) {
1479:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
1480:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1481:src-gen/sr5e1/clock.h ****         RCC->C2_APB2HSMENR |= m;
1482:src-gen/sr5e1/clock.h **** #endif
1483:src-gen/sr5e1/clock.h ****     }
1484:src-gen/sr5e1/clock.h ****     else {
1485:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR &= ~m;
1486:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1487:src-gen/sr5e1/clock.h ****         RCC->C2_APB2HSMENR &= ~m;
1488:src-gen/sr5e1/clock.h **** #endif
1489:src-gen/sr5e1/clock.h ****     }
1490:src-gen/sr5e1/clock.h **** 
1491:src-gen/sr5e1/clock.h ****     return RCC->APB2HENR;
1492:src-gen/sr5e1/clock.h **** }
1493:src-gen/sr5e1/clock.h **** 
1494:src-gen/sr5e1/clock.h **** /**
1495:src-gen/sr5e1/clock.h ****  * @brief   Disables APB2 peripherals clock [High Word]
1496:src-gen/sr5e1/clock.h ****  *
1497:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1498:src-gen/sr5e1/clock.h ****  * @return              value of register APB2HENR after the update
1499:src-gen/sr5e1/clock.h ****  *
1500:src-gen/sr5e1/clock.h ****  * @api
1501:src-gen/sr5e1/clock.h ****  */
1502:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_APB2H(uint32_t m) {
1503:src-gen/sr5e1/clock.h **** 
1504:src-gen/sr5e1/clock.h ****     RCC->APB2HENR &= ~m;
1505:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
1506:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1507:src-gen/sr5e1/clock.h ****     RCC->C2_APB2HSMENR &= ~m;
1508:src-gen/sr5e1/clock.h **** #endif
1509:src-gen/sr5e1/clock.h **** 
1510:src-gen/sr5e1/clock.h ****     return RCC->APB2HENR;
1511:src-gen/sr5e1/clock.h **** }
1512:src-gen/sr5e1/clock.h **** 
1513:src-gen/sr5e1/clock.h **** /**
1514:src-gen/sr5e1/clock.h ****  * @brief   Checks if APB2 peripheral clock [High Word] is enabled
1515:src-gen/sr5e1/clock.h ****  *
1516:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1517:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1518:src-gen/sr5e1/clock.h ****  *
1519:src-gen/sr5e1/clock.h ****  * @api
1520:src-gen/sr5e1/clock.h ****  */
1521:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_APB2H(uint32_t m) {
1522:src-gen/sr5e1/clock.h **** 
1523:src-gen/sr5e1/clock.h ****     return (((RCC->APB2HENR & m) == m) ? true : false);
1524:src-gen/sr5e1/clock.h **** }
1525:src-gen/sr5e1/clock.h **** 
1526:src-gen/sr5e1/clock.h **** /**
1527:src-gen/sr5e1/clock.h ****  * @brief   Resets APB2 peripherals [High Word]
1528:src-gen/sr5e1/clock.h ****  *
1529:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1530:src-gen/sr5e1/clock.h ****  *
1531:src-gen/sr5e1/clock.h ****  * @api
1532:src-gen/sr5e1/clock.h ****  */
1533:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_APB2H(uint32_t m) {
1534:src-gen/sr5e1/clock.h **** 
1535:src-gen/sr5e1/clock.h ****     RCC->APB2HRSTR |= m;
1536:src-gen/sr5e1/clock.h ****     RCC->APB2HRSTR &= ~m;
1537:src-gen/sr5e1/clock.h ****     (void)RCC->APB2HRSTR;
1538:src-gen/sr5e1/clock.h **** }
1539:src-gen/sr5e1/clock.h **** 
1540:src-gen/sr5e1/clock.h **** /**
1541:src-gen/sr5e1/clock.h ****  * @brief   Enables CMU clock
1542:src-gen/sr5e1/clock.h ****  *
1543:src-gen/sr5e1/clock.h ****  * @param[in] m         CMU clock to be enabled
1544:src-gen/sr5e1/clock.h ****  * @return              value of register CMUR after the update
1545:src-gen/sr5e1/clock.h ****  *
1546:src-gen/sr5e1/clock.h ****  * @api
1547:src-gen/sr5e1/clock.h ****  */
1548:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_CMU(uint32_t m) {
1549:src-gen/sr5e1/clock.h **** 
1550:src-gen/sr5e1/clock.h ****     RCC->CMUR |= m;
1551:src-gen/sr5e1/clock.h **** 
1552:src-gen/sr5e1/clock.h ****     return RCC->CMUR;
1553:src-gen/sr5e1/clock.h **** }
1554:src-gen/sr5e1/clock.h **** 
1555:src-gen/sr5e1/clock.h **** /**
1556:src-gen/sr5e1/clock.h ****  * @brief   Disables CMU clock
1557:src-gen/sr5e1/clock.h ****  *
1558:src-gen/sr5e1/clock.h ****  * @param[in] m         CMU clock to be disabled
1559:src-gen/sr5e1/clock.h ****  * @return              value of register CMUR after the update
1560:src-gen/sr5e1/clock.h ****  *
1561:src-gen/sr5e1/clock.h ****  * @api
1562:src-gen/sr5e1/clock.h ****  */
1563:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_CMU(uint32_t m) {
1564:src-gen/sr5e1/clock.h **** 
1565:src-gen/sr5e1/clock.h ****     RCC->CMUR &= ~m;
1566:src-gen/sr5e1/clock.h **** 
1567:src-gen/sr5e1/clock.h ****     return RCC->CMUR;
1568:src-gen/sr5e1/clock.h **** }
1569:src-gen/sr5e1/clock.h **** 
1570:src-gen/sr5e1/clock.h **** /**
1571:src-gen/sr5e1/clock.h ****  * @brief   Checks if CMU clock is enabled
1572:src-gen/sr5e1/clock.h ****  *
1573:src-gen/sr5e1/clock.h ****  * @param[in] m         CMU clock to be checked
1574:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1575:src-gen/sr5e1/clock.h ****  *
1576:src-gen/sr5e1/clock.h ****  * @api
1577:src-gen/sr5e1/clock.h ****  */
1578:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_CMU(uint32_t m) {
1579:src-gen/sr5e1/clock.h **** 
1580:src-gen/sr5e1/clock.h ****     return (((RCC->CMUR & m) == m) ? true : false);
1581:src-gen/sr5e1/clock.h **** }
1582:src-gen/sr5e1/clock.h **** 
1583:src-gen/sr5e1/clock.h **** /**
1584:src-gen/sr5e1/clock.h ****  * @brief   Resets CMU
1585:src-gen/sr5e1/clock.h ****  *
1586:src-gen/sr5e1/clock.h ****  * @param[in] m         CMU to reset
1587:src-gen/sr5e1/clock.h ****  *
1588:src-gen/sr5e1/clock.h ****  * @api
1589:src-gen/sr5e1/clock.h ****  */
1590:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_CMU(uint32_t m) {
1591:src-gen/sr5e1/clock.h **** 
1592:src-gen/sr5e1/clock.h ****     RCC->CMUR |= m;
1593:src-gen/sr5e1/clock.h ****     (void)RCC->CMUR;
1594:src-gen/sr5e1/clock.h **** }
1595:src-gen/sr5e1/clock.h **** 
1596:src-gen/sr5e1/clock.h **** /**
1597:src-gen/sr5e1/clock.h ****  * @brief   Enables DMA1 clock
1598:src-gen/sr5e1/clock.h ****  *
1599:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1600:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1601:src-gen/sr5e1/clock.h ****  *
1602:src-gen/sr5e1/clock.h ****  * @api
1603:src-gen/sr5e1/clock.h ****  */
1604:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DMA1(bool smode) {
1605:src-gen/sr5e1/clock.h **** 
1606:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_DMA1);
1607:src-gen/sr5e1/clock.h **** }
1608:src-gen/sr5e1/clock.h **** 
1609:src-gen/sr5e1/clock.h **** /**
1610:src-gen/sr5e1/clock.h ****  * @brief   Disables DMA1 clock
1611:src-gen/sr5e1/clock.h ****  *
1612:src-gen/sr5e1/clock.h ****  * @api
1613:src-gen/sr5e1/clock.h ****  */
1614:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DMA1(void) {
1615:src-gen/sr5e1/clock.h **** 
1616:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_DMA1);
1617:src-gen/sr5e1/clock.h **** }
1618:src-gen/sr5e1/clock.h **** 
1619:src-gen/sr5e1/clock.h **** /**
1620:src-gen/sr5e1/clock.h ****  * @brief   Checks if DMA1 clock is enabled
1621:src-gen/sr5e1/clock.h ****  *
1622:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1623:src-gen/sr5e1/clock.h ****  *
1624:src-gen/sr5e1/clock.h ****  * @api
1625:src-gen/sr5e1/clock.h ****  */
1626:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DMA1(void) {
1627:src-gen/sr5e1/clock.h **** 
1628:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_DMA1);
1629:src-gen/sr5e1/clock.h **** }
1630:src-gen/sr5e1/clock.h **** 
1631:src-gen/sr5e1/clock.h **** /**
1632:src-gen/sr5e1/clock.h ****  * @brief   Resets DMA1
1633:src-gen/sr5e1/clock.h ****  *
1634:src-gen/sr5e1/clock.h ****  * @api
1635:src-gen/sr5e1/clock.h ****  */
1636:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DMA1(void) {
1637:src-gen/sr5e1/clock.h **** 
1638:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_DMA1);
1639:src-gen/sr5e1/clock.h **** }
1640:src-gen/sr5e1/clock.h **** 
1641:src-gen/sr5e1/clock.h **** /**
1642:src-gen/sr5e1/clock.h ****  * @brief   Enables DMA2 clock
1643:src-gen/sr5e1/clock.h ****  *
1644:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1645:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1646:src-gen/sr5e1/clock.h ****  *
1647:src-gen/sr5e1/clock.h ****  * @api
1648:src-gen/sr5e1/clock.h ****  */
1649:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DMA2(bool smode) {
1650:src-gen/sr5e1/clock.h **** 
1651:src-gen/sr5e1/clock.h ****     clock_enable_AHB1L(smode, RCC_AHB1LENR_DMA2);
1652:src-gen/sr5e1/clock.h **** }
1653:src-gen/sr5e1/clock.h **** 
1654:src-gen/sr5e1/clock.h **** /**
1655:src-gen/sr5e1/clock.h ****  * @brief   Disables DMA2 clock
1656:src-gen/sr5e1/clock.h ****  *
1657:src-gen/sr5e1/clock.h ****  * @api
1658:src-gen/sr5e1/clock.h ****  */
1659:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DMA2(void) {
1660:src-gen/sr5e1/clock.h **** 
1661:src-gen/sr5e1/clock.h ****     clock_disable_AHB1L(RCC_AHB1LENR_DMA2);
1662:src-gen/sr5e1/clock.h **** }
1663:src-gen/sr5e1/clock.h **** 
1664:src-gen/sr5e1/clock.h **** /**
1665:src-gen/sr5e1/clock.h ****  * @brief   Checks if DMA2 clock is enabled
1666:src-gen/sr5e1/clock.h ****  *
1667:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1668:src-gen/sr5e1/clock.h ****  *
1669:src-gen/sr5e1/clock.h ****  * @api
1670:src-gen/sr5e1/clock.h ****  */
1671:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DMA2(void) {
1672:src-gen/sr5e1/clock.h **** 
1673:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1L(RCC_AHB1LENR_DMA2);
1674:src-gen/sr5e1/clock.h **** }
1675:src-gen/sr5e1/clock.h **** 
1676:src-gen/sr5e1/clock.h **** /**
1677:src-gen/sr5e1/clock.h ****  * @brief   Resets DMA2
1678:src-gen/sr5e1/clock.h ****  *
1679:src-gen/sr5e1/clock.h ****  * @api
1680:src-gen/sr5e1/clock.h ****  */
1681:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DMA2(void) {
1682:src-gen/sr5e1/clock.h **** 
1683:src-gen/sr5e1/clock.h ****     clock_reset_AHB1L(RCC_AHB1LRSTR_DMA2);
1684:src-gen/sr5e1/clock.h **** }
1685:src-gen/sr5e1/clock.h **** 
1686:src-gen/sr5e1/clock.h **** /**
1687:src-gen/sr5e1/clock.h ****  * @brief   Enables DMAMUX1 clock
1688:src-gen/sr5e1/clock.h ****  *
1689:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1690:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1691:src-gen/sr5e1/clock.h ****  *
1692:src-gen/sr5e1/clock.h ****  * @api
1693:src-gen/sr5e1/clock.h ****  */
1694:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_DMAMUX1(bool smode) {
1695:src-gen/sr5e1/clock.h **** 
1696:src-gen/sr5e1/clock.h ****     clock_enable_AHB2L(smode, RCC_AHB2LENR_DMAMUX1);
1697:src-gen/sr5e1/clock.h **** }
1698:src-gen/sr5e1/clock.h **** 
1699:src-gen/sr5e1/clock.h **** /**
1700:src-gen/sr5e1/clock.h ****  * @brief   Disables DMAMUX1 clock
1701:src-gen/sr5e1/clock.h ****  *
1702:src-gen/sr5e1/clock.h ****  * @api
1703:src-gen/sr5e1/clock.h ****  */
1704:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_DMAMUX1(void) {
1705:src-gen/sr5e1/clock.h **** 
1706:src-gen/sr5e1/clock.h ****     clock_disable_AHB2L(RCC_AHB2LENR_DMAMUX1);
1707:src-gen/sr5e1/clock.h **** }
1708:src-gen/sr5e1/clock.h **** 
1709:src-gen/sr5e1/clock.h **** /**
1710:src-gen/sr5e1/clock.h ****  * @brief   Checks if DMAMUX1 clock is enabled
1711:src-gen/sr5e1/clock.h ****  *
1712:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1713:src-gen/sr5e1/clock.h ****  *
1714:src-gen/sr5e1/clock.h ****  * @api
1715:src-gen/sr5e1/clock.h ****  */
1716:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_DMAMUX1(void) {
1717:src-gen/sr5e1/clock.h **** 
1718:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2L(RCC_AHB2LENR_DMAMUX1);
1719:src-gen/sr5e1/clock.h **** }
1720:src-gen/sr5e1/clock.h **** 
1721:src-gen/sr5e1/clock.h **** /**
1722:src-gen/sr5e1/clock.h ****  * @brief   Resets DMAMUX1
1723:src-gen/sr5e1/clock.h ****  *
1724:src-gen/sr5e1/clock.h ****  * @api
1725:src-gen/sr5e1/clock.h ****  */
1726:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_DMAMUX1(void) {
1727:src-gen/sr5e1/clock.h **** 
1728:src-gen/sr5e1/clock.h ****     clock_reset_AHB2L(RCC_AHB2LRSTR_DMAMUX1);
1729:src-gen/sr5e1/clock.h **** }
1730:src-gen/sr5e1/clock.h **** 
1731:src-gen/sr5e1/clock.h **** /**
1732:src-gen/sr5e1/clock.h ****  * @brief   Enables CORDIC clock
1733:src-gen/sr5e1/clock.h ****  *
1734:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1735:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1736:src-gen/sr5e1/clock.h ****  *
1737:src-gen/sr5e1/clock.h ****  * @api
1738:src-gen/sr5e1/clock.h ****  */
1739:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_CORDIC(bool smode) {
1740:src-gen/sr5e1/clock.h **** 
1741:src-gen/sr5e1/clock.h ****     clock_enable_AHB1L(smode, RCC_AHB1LENR_CORDIC);
1742:src-gen/sr5e1/clock.h **** }
1743:src-gen/sr5e1/clock.h **** 
1744:src-gen/sr5e1/clock.h **** /**
1745:src-gen/sr5e1/clock.h ****  * @brief   Disables CORDIC clock
1746:src-gen/sr5e1/clock.h ****  *
1747:src-gen/sr5e1/clock.h ****  * @api
1748:src-gen/sr5e1/clock.h ****  */
1749:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_CORDIC(void) {
1750:src-gen/sr5e1/clock.h **** 
1751:src-gen/sr5e1/clock.h ****     clock_disable_AHB1L(RCC_AHB1LENR_CORDIC);
1752:src-gen/sr5e1/clock.h **** }
1753:src-gen/sr5e1/clock.h **** 
1754:src-gen/sr5e1/clock.h **** /**
1755:src-gen/sr5e1/clock.h ****  * @brief   Checks if CORDIC clock is enabled
1756:src-gen/sr5e1/clock.h ****  *
1757:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1758:src-gen/sr5e1/clock.h ****  *
1759:src-gen/sr5e1/clock.h ****  * @api
1760:src-gen/sr5e1/clock.h ****  */
1761:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_CORDIC(void) {
1762:src-gen/sr5e1/clock.h **** 
1763:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1L(RCC_AHB1LENR_CORDIC);
1764:src-gen/sr5e1/clock.h **** }
1765:src-gen/sr5e1/clock.h **** 
1766:src-gen/sr5e1/clock.h **** /**
1767:src-gen/sr5e1/clock.h ****  * @brief   Resets CORDIC
1768:src-gen/sr5e1/clock.h ****  *
1769:src-gen/sr5e1/clock.h ****  * @api
1770:src-gen/sr5e1/clock.h ****  */
1771:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_CORDIC(void) {
1772:src-gen/sr5e1/clock.h **** 
1773:src-gen/sr5e1/clock.h ****     clock_reset_AHB1L(RCC_AHB1LRSTR_CORDIC);
1774:src-gen/sr5e1/clock.h **** }
1775:src-gen/sr5e1/clock.h **** 
1776:src-gen/sr5e1/clock.h **** /**
1777:src-gen/sr5e1/clock.h ****  * @brief   Enables CRC clock
1778:src-gen/sr5e1/clock.h ****  *
1779:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1780:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1781:src-gen/sr5e1/clock.h ****  *
1782:src-gen/sr5e1/clock.h ****  * @api
1783:src-gen/sr5e1/clock.h ****  */
1784:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_CRC(bool smode) {
1785:src-gen/sr5e1/clock.h **** 
1786:src-gen/sr5e1/clock.h ****     clock_enable_AHB1L(smode, RCC_AHB1LENR_CRC);
1787:src-gen/sr5e1/clock.h **** }
1788:src-gen/sr5e1/clock.h **** 
1789:src-gen/sr5e1/clock.h **** /**
1790:src-gen/sr5e1/clock.h ****  * @brief   Disables CRC clock
1791:src-gen/sr5e1/clock.h ****  *
1792:src-gen/sr5e1/clock.h ****  * @api
1793:src-gen/sr5e1/clock.h ****  */
1794:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_CRC(void) {
1795:src-gen/sr5e1/clock.h **** 
1796:src-gen/sr5e1/clock.h ****     clock_disable_AHB1L(RCC_AHB1LENR_CRC);
1797:src-gen/sr5e1/clock.h **** }
1798:src-gen/sr5e1/clock.h **** 
1799:src-gen/sr5e1/clock.h **** /**
1800:src-gen/sr5e1/clock.h ****  * @brief   Checks if CRC clock is enabled
1801:src-gen/sr5e1/clock.h ****  *
1802:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1803:src-gen/sr5e1/clock.h ****  *
1804:src-gen/sr5e1/clock.h ****  * @api
1805:src-gen/sr5e1/clock.h ****  */
1806:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_CRC(void) {
1807:src-gen/sr5e1/clock.h **** 
1808:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1L(RCC_AHB1LENR_CRC);
1809:src-gen/sr5e1/clock.h **** }
1810:src-gen/sr5e1/clock.h **** 
1811:src-gen/sr5e1/clock.h **** /**
1812:src-gen/sr5e1/clock.h ****  * @brief   Resets CRC
1813:src-gen/sr5e1/clock.h ****  *
1814:src-gen/sr5e1/clock.h ****  * @api
1815:src-gen/sr5e1/clock.h ****  */
1816:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_CRC(void) {
1817:src-gen/sr5e1/clock.h **** 
1818:src-gen/sr5e1/clock.h ****     clock_reset_AHB1L(RCC_AHB1LRSTR_CRC);
1819:src-gen/sr5e1/clock.h **** }
1820:src-gen/sr5e1/clock.h **** 
1821:src-gen/sr5e1/clock.h **** /**
1822:src-gen/sr5e1/clock.h ****  * @brief   Enables HSEM clock
1823:src-gen/sr5e1/clock.h ****  *
1824:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1825:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1826:src-gen/sr5e1/clock.h ****  *
1827:src-gen/sr5e1/clock.h ****  * @api
1828:src-gen/sr5e1/clock.h ****  */
1829:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_HSEM(bool smode) {
1830:src-gen/sr5e1/clock.h **** 
1831:src-gen/sr5e1/clock.h ****     clock_enable_AHB1L(smode, RCC_AHB1LENR_HSEM);
1832:src-gen/sr5e1/clock.h **** }
1833:src-gen/sr5e1/clock.h **** 
1834:src-gen/sr5e1/clock.h **** /**
1835:src-gen/sr5e1/clock.h ****  * @brief   Disables HSEM clock
1836:src-gen/sr5e1/clock.h ****  *
1837:src-gen/sr5e1/clock.h ****  * @api
1838:src-gen/sr5e1/clock.h ****  */
1839:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_HSEM(void) {
1840:src-gen/sr5e1/clock.h **** 
1841:src-gen/sr5e1/clock.h ****     clock_disable_AHB1L(RCC_AHB1LENR_HSEM);
1842:src-gen/sr5e1/clock.h **** }
1843:src-gen/sr5e1/clock.h **** 
1844:src-gen/sr5e1/clock.h **** /**
1845:src-gen/sr5e1/clock.h ****  * @brief   Checks if HSEM clock is enabled
1846:src-gen/sr5e1/clock.h ****  *
1847:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1848:src-gen/sr5e1/clock.h ****  *
1849:src-gen/sr5e1/clock.h ****  * @api
1850:src-gen/sr5e1/clock.h ****  */
1851:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_HSEM(void) {
1852:src-gen/sr5e1/clock.h **** 
1853:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB1L(RCC_AHB1LENR_HSEM);
1854:src-gen/sr5e1/clock.h **** }
1855:src-gen/sr5e1/clock.h **** 
1856:src-gen/sr5e1/clock.h **** /**
1857:src-gen/sr5e1/clock.h ****  * @brief   Resets HSEM
1858:src-gen/sr5e1/clock.h ****  *
1859:src-gen/sr5e1/clock.h ****  * @api
1860:src-gen/sr5e1/clock.h ****  */
1861:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_HSEM(void) {
1862:src-gen/sr5e1/clock.h **** 
1863:src-gen/sr5e1/clock.h ****     clock_reset_AHB1L(RCC_AHB1LRSTR_HSEM);
1864:src-gen/sr5e1/clock.h **** }
1865:src-gen/sr5e1/clock.h **** 
1866:src-gen/sr5e1/clock.h **** /**
1867:src-gen/sr5e1/clock.h ****  * @brief   Enables ADC12 clock
1868:src-gen/sr5e1/clock.h ****  *
1869:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1870:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1871:src-gen/sr5e1/clock.h ****  *
1872:src-gen/sr5e1/clock.h ****  * @api
1873:src-gen/sr5e1/clock.h ****  */
1874:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_ADC12(bool smode) {
1875:src-gen/sr5e1/clock.h **** 
1876:src-gen/sr5e1/clock.h ****     clock_enable_AHB2H(smode, RCC_AHB2HENR_ADC1_ADC2);
1877:src-gen/sr5e1/clock.h **** }
 321              		.loc 2 1877 1
 322 00a8 00BF     		nop
 323              	.LBE27:
 324              	.LBE26:
 325              		.loc 1 141 12
 326 00aa 49E0     		b	.L31
 327              	.L26:
 142:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****             clock_enable_ADC12(true);
 143:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         }
 144:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else {
 145:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         if ((adc_enabled_clocks & 0x1CUL) == 0U) {
 328              		.loc 1 145 33
 329 00ac 414B     		ldr	r3, .L41+8
 330 00ae 1B68     		ldr	r3, [r3]
 331 00b0 03F01C03 		and	r3, r3, #28
 332              		.loc 1 145 12
 333 00b4 002B     		cmp	r3, #0
 334 00b6 43D1     		bne	.L31
 335 00b8 0123     		movs	r3, #1
 336 00ba 8DF80F30 		strb	r3, [sp, #15]
 337 00be 9DF80F30 		ldrb	r3, [sp, #15]
 338 00c2 8DF80E30 		strb	r3, [sp, #14]
 339 00c6 0123     		movs	r3, #1
 340 00c8 0293     		str	r3, [sp, #8]
 341              	.LBB30:
 342              	.LBB31:
 343              	.LBB32:
 344              	.LBB33:
1102:src-gen/sr5e1/clock.h ****     if (smode) {
 345              		.loc 2 1102 19
 346 00ca 4FF08843 		mov	r3, #1140850688
 347 00ce 5A6F     		ldr	r2, [r3, #116]
 348 00d0 4FF08841 		mov	r1, #1140850688
 349 00d4 029B     		ldr	r3, [sp, #8]
 350 00d6 1343     		orrs	r3, r3, r2
 351 00d8 4B67     		str	r3, [r1, #116]
1103:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1HSMENR |= m;
 352              		.loc 2 1103 8
 353 00da 9DF80E30 		ldrb	r3, [sp, #14]	@ zero_extendqisi2
 354 00de 002B     		cmp	r3, #0
 355 00e0 14D0     		beq	.L32
1104:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 356              		.loc 2 1104 28
 357 00e2 4FF08843 		mov	r3, #1140850688
 358 00e6 D3F89420 		ldr	r2, [r3, #148]
 359 00ea 4FF08841 		mov	r1, #1140850688
 360 00ee 029B     		ldr	r3, [sp, #8]
 361 00f0 1343     		orrs	r3, r3, r2
 362 00f2 C1F89430 		str	r3, [r1, #148]
1106:src-gen/sr5e1/clock.h **** #endif
 363              		.loc 2 1106 28
 364 00f6 4FF08843 		mov	r3, #1140850688
 365 00fa D3F8B420 		ldr	r2, [r3, #180]
 366 00fe 4FF08841 		mov	r1, #1140850688
 367 0102 029B     		ldr	r3, [sp, #8]
 368 0104 1343     		orrs	r3, r3, r2
 369 0106 C1F8B430 		str	r3, [r1, #180]
 370 010a 15E0     		b	.L33
 371              	.L32:
1110:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 372              		.loc 2 1110 28
 373 010c 4FF08843 		mov	r3, #1140850688
 374 0110 D3F89420 		ldr	r2, [r3, #148]
1110:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 375              		.loc 2 1110 31
 376 0114 029B     		ldr	r3, [sp, #8]
 377 0116 DB43     		mvns	r3, r3
1110:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 378              		.loc 2 1110 28
 379 0118 4FF08841 		mov	r1, #1140850688
 380 011c 1340     		ands	r3, r3, r2
 381 011e C1F89430 		str	r3, [r1, #148]
1112:src-gen/sr5e1/clock.h **** #endif
 382              		.loc 2 1112 28
 383 0122 4FF08843 		mov	r3, #1140850688
 384 0126 D3F8B420 		ldr	r2, [r3, #180]
1112:src-gen/sr5e1/clock.h **** #endif
 385              		.loc 2 1112 31
 386 012a 029B     		ldr	r3, [sp, #8]
 387 012c DB43     		mvns	r3, r3
1112:src-gen/sr5e1/clock.h **** #endif
 388              		.loc 2 1112 28
 389 012e 4FF08841 		mov	r1, #1140850688
 390 0132 1340     		ands	r3, r3, r2
 391 0134 C1F8B430 		str	r3, [r1, #180]
 392              	.L33:
1116:src-gen/sr5e1/clock.h **** }
 393              		.loc 2 1116 15
 394 0138 4FF08843 		mov	r3, #1140850688
 395 013c 5B6F     		ldr	r3, [r3, #116]
 396              	.LBE33:
 397              	.LBE32:
1878:src-gen/sr5e1/clock.h **** 
1879:src-gen/sr5e1/clock.h **** /**
1880:src-gen/sr5e1/clock.h ****  * @brief   Disables ADC12 clock
1881:src-gen/sr5e1/clock.h ****  *
1882:src-gen/sr5e1/clock.h ****  * @api
1883:src-gen/sr5e1/clock.h ****  */
1884:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_ADC12(void) {
1885:src-gen/sr5e1/clock.h **** 
1886:src-gen/sr5e1/clock.h ****     clock_disable_AHB2H(RCC_AHB2HENR_ADC1_ADC2);
1887:src-gen/sr5e1/clock.h **** }
1888:src-gen/sr5e1/clock.h **** 
1889:src-gen/sr5e1/clock.h **** /**
1890:src-gen/sr5e1/clock.h ****  * @brief   Checks if ADC12 clock is enabled
1891:src-gen/sr5e1/clock.h ****  *
1892:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1893:src-gen/sr5e1/clock.h ****  *
1894:src-gen/sr5e1/clock.h ****  * @api
1895:src-gen/sr5e1/clock.h ****  */
1896:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_ADC12(void) {
1897:src-gen/sr5e1/clock.h **** 
1898:src-gen/sr5e1/clock.h ****     return is_clock_enable_AHB2H(RCC_AHB2HENR_ADC1_ADC2);
1899:src-gen/sr5e1/clock.h **** }
1900:src-gen/sr5e1/clock.h **** 
1901:src-gen/sr5e1/clock.h **** /**
1902:src-gen/sr5e1/clock.h ****  * @brief   Resets ADC12
1903:src-gen/sr5e1/clock.h ****  *
1904:src-gen/sr5e1/clock.h ****  * @api
1905:src-gen/sr5e1/clock.h ****  */
1906:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_ADC12(void) {
1907:src-gen/sr5e1/clock.h **** 
1908:src-gen/sr5e1/clock.h ****     clock_reset_AHB2H(RCC_AHB2HRSTR_ADC1_ADC2);
1909:src-gen/sr5e1/clock.h **** }
1910:src-gen/sr5e1/clock.h **** 
1911:src-gen/sr5e1/clock.h **** /**
1912:src-gen/sr5e1/clock.h ****  * @brief   Enables ADC345 clock
1913:src-gen/sr5e1/clock.h ****  *
1914:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1915:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1916:src-gen/sr5e1/clock.h ****  *
1917:src-gen/sr5e1/clock.h ****  * @api
1918:src-gen/sr5e1/clock.h ****  */
1919:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_enable_ADC345(bool smode) {
1920:src-gen/sr5e1/clock.h **** 
1921:src-gen/sr5e1/clock.h ****     clock_enable_AHB1H(smode, RCC_AHB1HENR_ADC3_ADC4_ADC5);
1922:src-gen/sr5e1/clock.h **** }
 398              		.loc 2 1922 1
 399 013e 00BF     		nop
 400              	.L31:
 401              	.LBE31:
 402              	.LBE30:
 146:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****             clock_enable_ADC345(true);
 147:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         }
 148:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     }
 149:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 150:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     /* Update the mask of ADC enabled clocks.*/
 151:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     if (adp == &DRV_ADC1) {
 403              		.loc 1 151 8
 404 0140 019B     		ldr	r3, [sp, #4]
 405 0142 1A4A     		ldr	r2, .L41
 406 0144 9342     		cmp	r3, r2
 407 0146 06D1     		bne	.L35
 152:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_enabled_clocks |= (1UL << 0U);
 408              		.loc 1 152 28
 409 0148 1A4B     		ldr	r3, .L41+8
 410 014a 1B68     		ldr	r3, [r3]
 411 014c 43F00103 		orr	r3, r3, #1
 412 0150 184A     		ldr	r2, .L41+8
 413 0152 1360     		str	r3, [r2]
 153:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC2) {
 154:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_enabled_clocks |= (1UL << 1U);
 155:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC3) {
 156:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_enabled_clocks |= (1UL << 2U);
 157:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC4) {
 158:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_enabled_clocks |= (1UL << 3U);
 159:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else {
 160:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_enabled_clocks |= (1UL << 4U);
 161:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     }
 162:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** }
 414              		.loc 1 162 1
 415 0154 26E0     		b	.L40
 416              	.L35:
 153:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC2) {
 417              		.loc 1 153 15
 418 0156 019B     		ldr	r3, [sp, #4]
 419 0158 154A     		ldr	r2, .L41+4
 420 015a 9342     		cmp	r3, r2
 421 015c 06D1     		bne	.L37
 154:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC3) {
 422              		.loc 1 154 28
 423 015e 154B     		ldr	r3, .L41+8
 424 0160 1B68     		ldr	r3, [r3]
 425 0162 43F00203 		orr	r3, r3, #2
 426 0166 134A     		ldr	r2, .L41+8
 427 0168 1360     		str	r3, [r2]
 428              		.loc 1 162 1
 429 016a 1BE0     		b	.L40
 430              	.L37:
 155:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_enabled_clocks |= (1UL << 2U);
 431              		.loc 1 155 15
 432 016c 019B     		ldr	r3, [sp, #4]
 433 016e 124A     		ldr	r2, .L41+12
 434 0170 9342     		cmp	r3, r2
 435 0172 06D1     		bne	.L38
 156:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC4) {
 436              		.loc 1 156 28
 437 0174 0F4B     		ldr	r3, .L41+8
 438 0176 1B68     		ldr	r3, [r3]
 439 0178 43F00403 		orr	r3, r3, #4
 440 017c 0D4A     		ldr	r2, .L41+8
 441 017e 1360     		str	r3, [r2]
 442              		.loc 1 162 1
 443 0180 10E0     		b	.L40
 444              	.L38:
 157:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_enabled_clocks |= (1UL << 3U);
 445              		.loc 1 157 15
 446 0182 019B     		ldr	r3, [sp, #4]
 447 0184 0D4A     		ldr	r2, .L41+16
 448 0186 9342     		cmp	r3, r2
 449 0188 06D1     		bne	.L39
 158:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else {
 450              		.loc 1 158 28
 451 018a 0A4B     		ldr	r3, .L41+8
 452 018c 1B68     		ldr	r3, [r3]
 453 018e 43F00803 		orr	r3, r3, #8
 454 0192 084A     		ldr	r2, .L41+8
 455 0194 1360     		str	r3, [r2]
 456              		.loc 1 162 1
 457 0196 05E0     		b	.L40
 458              	.L39:
 160:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     }
 459              		.loc 1 160 28
 460 0198 064B     		ldr	r3, .L41+8
 461 019a 1B68     		ldr	r3, [r3]
 462 019c 43F01003 		orr	r3, r3, #16
 463 01a0 044A     		ldr	r2, .L41+8
 464 01a2 1360     		str	r3, [r2]
 465              	.L40:
 466              		.loc 1 162 1
 467 01a4 00BF     		nop
 468 01a6 06B0     		add	sp, sp, #24
 469              		.cfi_def_cfa_offset 0
 470              		@ sp needed
 471 01a8 7047     		bx	lr
 472              	.L42:
 473 01aa 00BF     		.align	2
 474              	.L41:
 475 01ac 00000000 		.word	DRV_ADC1
 476 01b0 00000000 		.word	DRV_ADC2
 477 01b4 00000000 		.word	adc_enabled_clocks
 478 01b8 00000000 		.word	DRV_ADC3
 479 01bc 00000000 		.word	DRV_ADC4
 480              		.cfi_endproc
 481              	.LFE459:
 483              		.section	.text.adc_dev_clock_disable,"ax",%progbits
 484              		.align	1
 485              		.p2align 4,,15
 486              		.global	adc_dev_clock_disable
 487              		.syntax unified
 488              		.thumb
 489              		.thumb_func
 491              	adc_dev_clock_disable:
 492              	.LFB460:
 163:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 164:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
 165:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   Disables ADC clock.
 166:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 167:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @param[in] adp       pointer to a @p adc_driver_t structure
 168:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 169:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @notapi
 170:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
 171:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** void adc_dev_clock_disable(adc_driver_t *adp) {
 493              		.loc 1 171 47
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 16
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497              		@ link register save eliminated.
 498 0000 84B0     		sub	sp, sp, #16
 499              		.cfi_def_cfa_offset 16
 500 0002 0190     		str	r0, [sp, #4]
 172:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 173:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     /* Update the mask of ADC enabled clocks.*/
 174:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     if (adp == &DRV_ADC1) {
 501              		.loc 1 174 8
 502 0004 019B     		ldr	r3, [sp, #4]
 503 0006 494A     		ldr	r2, .L56
 504 0008 9342     		cmp	r3, r2
 505 000a 06D1     		bne	.L44
 175:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_enabled_clocks &= ~(1UL << 0U);
 506              		.loc 1 175 28
 507 000c 484B     		ldr	r3, .L56+4
 508 000e 1B68     		ldr	r3, [r3]
 509 0010 23F00103 		bic	r3, r3, #1
 510 0014 464A     		ldr	r2, .L56+4
 511 0016 1360     		str	r3, [r2]
 512 0018 26E0     		b	.L45
 513              	.L44:
 176:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC2) {
 514              		.loc 1 176 15
 515 001a 019B     		ldr	r3, [sp, #4]
 516 001c 454A     		ldr	r2, .L56+8
 517 001e 9342     		cmp	r3, r2
 518 0020 06D1     		bne	.L46
 177:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_enabled_clocks &= ~(1UL << 1U);
 519              		.loc 1 177 28
 520 0022 434B     		ldr	r3, .L56+4
 521 0024 1B68     		ldr	r3, [r3]
 522 0026 23F00203 		bic	r3, r3, #2
 523 002a 414A     		ldr	r2, .L56+4
 524 002c 1360     		str	r3, [r2]
 525 002e 1BE0     		b	.L45
 526              	.L46:
 178:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC3) {
 527              		.loc 1 178 15
 528 0030 019B     		ldr	r3, [sp, #4]
 529 0032 414A     		ldr	r2, .L56+12
 530 0034 9342     		cmp	r3, r2
 531 0036 06D1     		bne	.L47
 179:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_enabled_clocks &= ~(1UL << 2U);
 532              		.loc 1 179 28
 533 0038 3D4B     		ldr	r3, .L56+4
 534 003a 1B68     		ldr	r3, [r3]
 535 003c 23F00403 		bic	r3, r3, #4
 536 0040 3B4A     		ldr	r2, .L56+4
 537 0042 1360     		str	r3, [r2]
 538 0044 10E0     		b	.L45
 539              	.L47:
 180:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC4) {
 540              		.loc 1 180 15
 541 0046 019B     		ldr	r3, [sp, #4]
 542 0048 3C4A     		ldr	r2, .L56+16
 543 004a 9342     		cmp	r3, r2
 544 004c 06D1     		bne	.L48
 181:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_enabled_clocks &= ~(1UL << 3U);
 545              		.loc 1 181 28
 546 004e 384B     		ldr	r3, .L56+4
 547 0050 1B68     		ldr	r3, [r3]
 548 0052 23F00803 		bic	r3, r3, #8
 549 0056 364A     		ldr	r2, .L56+4
 550 0058 1360     		str	r3, [r2]
 551 005a 05E0     		b	.L45
 552              	.L48:
 182:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else {
 183:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         adc_enabled_clocks &= ~(1UL << 4U);
 553              		.loc 1 183 28
 554 005c 344B     		ldr	r3, .L56+4
 555 005e 1B68     		ldr	r3, [r3]
 556 0060 23F01003 		bic	r3, r3, #16
 557 0064 324A     		ldr	r2, .L56+4
 558 0066 1360     		str	r3, [r2]
 559              	.L45:
 184:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     }
 185:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 186:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     /* Disable ADC clock only if all ADC instances related to the clock are
 187:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****        disabled.*/
 188:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     if (adp == &DRV_ADC1 || adp == &DRV_ADC2) {
 560              		.loc 1 188 8
 561 0068 019B     		ldr	r3, [sp, #4]
 562 006a 304A     		ldr	r2, .L56
 563 006c 9342     		cmp	r3, r2
 564 006e 03D0     		beq	.L49
 565              		.loc 1 188 26 discriminator 1
 566 0070 019B     		ldr	r3, [sp, #4]
 567 0072 304A     		ldr	r2, .L56+8
 568 0074 9342     		cmp	r3, r2
 569 0076 2BD1     		bne	.L50
 570              	.L49:
 189:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         if ((adc_enabled_clocks & 0x3UL) == 0U) {
 571              		.loc 1 189 33
 572 0078 2D4B     		ldr	r3, .L56+4
 573 007a 1B68     		ldr	r3, [r3]
 574 007c 03F00303 		and	r3, r3, #3
 575              		.loc 1 189 12
 576 0080 002B     		cmp	r3, #0
 577 0082 50D1     		bne	.L53
 578 0084 0123     		movs	r3, #1
 579 0086 0393     		str	r3, [sp, #12]
 580              	.LBB34:
 581              	.LBB35:
 582              	.LBB36:
 583              	.LBB37:
1279:src-gen/sr5e1/clock.h ****     RCC->C1_AHB2HSMENR &= ~m;
 584              		.loc 2 1279 19
 585 0088 4FF08843 		mov	r3, #1140850688
 586 008c DA6F     		ldr	r2, [r3, #124]
1279:src-gen/sr5e1/clock.h ****     RCC->C1_AHB2HSMENR &= ~m;
 587              		.loc 2 1279 22
 588 008e 039B     		ldr	r3, [sp, #12]
 589 0090 DB43     		mvns	r3, r3
1279:src-gen/sr5e1/clock.h ****     RCC->C1_AHB2HSMENR &= ~m;
 590              		.loc 2 1279 19
 591 0092 4FF08841 		mov	r1, #1140850688
 592 0096 1340     		ands	r3, r3, r2
 593 0098 CB67     		str	r3, [r1, #124]
1280:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 594              		.loc 2 1280 24
 595 009a 4FF08843 		mov	r3, #1140850688
 596 009e D3F89C20 		ldr	r2, [r3, #156]
1280:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 597              		.loc 2 1280 27
 598 00a2 039B     		ldr	r3, [sp, #12]
 599 00a4 DB43     		mvns	r3, r3
1280:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 600              		.loc 2 1280 24
 601 00a6 4FF08841 		mov	r1, #1140850688
 602 00aa 1340     		ands	r3, r3, r2
 603 00ac C1F89C30 		str	r3, [r1, #156]
1282:src-gen/sr5e1/clock.h **** #endif
 604              		.loc 2 1282 24
 605 00b0 4FF08843 		mov	r3, #1140850688
 606 00b4 D3F8BC20 		ldr	r2, [r3, #188]
1282:src-gen/sr5e1/clock.h **** #endif
 607              		.loc 2 1282 27
 608 00b8 039B     		ldr	r3, [sp, #12]
 609 00ba DB43     		mvns	r3, r3
1282:src-gen/sr5e1/clock.h **** #endif
 610              		.loc 2 1282 24
 611 00bc 4FF08841 		mov	r1, #1140850688
 612 00c0 1340     		ands	r3, r3, r2
 613 00c2 C1F8BC30 		str	r3, [r1, #188]
1285:src-gen/sr5e1/clock.h **** }
 614              		.loc 2 1285 15
 615 00c6 4FF08843 		mov	r3, #1140850688
 616 00ca DB6F     		ldr	r3, [r3, #124]
 617              	.LBE37:
 618              	.LBE36:
1887:src-gen/sr5e1/clock.h **** 
 619              		.loc 2 1887 1
 620 00cc 00BF     		nop
 621              	.LBE35:
 622              	.LBE34:
 623              		.loc 1 189 12
 624 00ce 2AE0     		b	.L53
 625              	.L50:
 190:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****             clock_disable_ADC12();
 191:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         }
 192:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else {
 193:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         if ((adc_enabled_clocks & 0x1CUL) == 0U) {
 626              		.loc 1 193 33
 627 00d0 174B     		ldr	r3, .L56+4
 628 00d2 1B68     		ldr	r3, [r3]
 629 00d4 03F01C03 		and	r3, r3, #28
 630              		.loc 1 193 12
 631 00d8 002B     		cmp	r3, #0
 632 00da 24D1     		bne	.L55
 633 00dc 0123     		movs	r3, #1
 634 00de 0293     		str	r3, [sp, #8]
 635              	.LBB38:
 636              	.LBB39:
 637              	.LBB40:
 638              	.LBB41:
1129:src-gen/sr5e1/clock.h ****     RCC->C1_AHB1HSMENR &= ~m;
 639              		.loc 2 1129 19
 640 00e0 4FF08843 		mov	r3, #1140850688
 641 00e4 5A6F     		ldr	r2, [r3, #116]
1129:src-gen/sr5e1/clock.h ****     RCC->C1_AHB1HSMENR &= ~m;
 642              		.loc 2 1129 22
 643 00e6 029B     		ldr	r3, [sp, #8]
 644 00e8 DB43     		mvns	r3, r3
1129:src-gen/sr5e1/clock.h ****     RCC->C1_AHB1HSMENR &= ~m;
 645              		.loc 2 1129 19
 646 00ea 4FF08841 		mov	r1, #1140850688
 647 00ee 1340     		ands	r3, r3, r2
 648 00f0 4B67     		str	r3, [r1, #116]
1130:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 649              		.loc 2 1130 24
 650 00f2 4FF08843 		mov	r3, #1140850688
 651 00f6 D3F89420 		ldr	r2, [r3, #148]
1130:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 652              		.loc 2 1130 27
 653 00fa 029B     		ldr	r3, [sp, #8]
 654 00fc DB43     		mvns	r3, r3
1130:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 655              		.loc 2 1130 24
 656 00fe 4FF08841 		mov	r1, #1140850688
 657 0102 1340     		ands	r3, r3, r2
 658 0104 C1F89430 		str	r3, [r1, #148]
1132:src-gen/sr5e1/clock.h **** #endif
 659              		.loc 2 1132 24
 660 0108 4FF08843 		mov	r3, #1140850688
 661 010c D3F8B420 		ldr	r2, [r3, #180]
1132:src-gen/sr5e1/clock.h **** #endif
 662              		.loc 2 1132 27
 663 0110 029B     		ldr	r3, [sp, #8]
 664 0112 DB43     		mvns	r3, r3
1132:src-gen/sr5e1/clock.h **** #endif
 665              		.loc 2 1132 24
 666 0114 4FF08841 		mov	r1, #1140850688
 667 0118 1340     		ands	r3, r3, r2
 668 011a C1F8B430 		str	r3, [r1, #180]
1135:src-gen/sr5e1/clock.h **** }
 669              		.loc 2 1135 15
 670 011e 4FF08843 		mov	r3, #1140850688
 671 0122 5B6F     		ldr	r3, [r3, #116]
 672              	.LBE41:
 673              	.LBE40:
1923:src-gen/sr5e1/clock.h **** 
1924:src-gen/sr5e1/clock.h **** /**
1925:src-gen/sr5e1/clock.h ****  * @brief   Disables ADC345 clock
1926:src-gen/sr5e1/clock.h ****  *
1927:src-gen/sr5e1/clock.h ****  * @api
1928:src-gen/sr5e1/clock.h ****  */
1929:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_disable_ADC345(void) {
1930:src-gen/sr5e1/clock.h **** 
1931:src-gen/sr5e1/clock.h ****     clock_disable_AHB1H(RCC_AHB1HENR_ADC3_ADC4_ADC5);
1932:src-gen/sr5e1/clock.h **** }
 674              		.loc 2 1932 1
 675 0124 00BF     		nop
 676              	.L53:
 677              	.L55:
 678              	.LBE39:
 679              	.LBE38:
 194:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****             clock_disable_ADC345();
 195:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         }
 196:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     }
 197:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** }
 680              		.loc 1 197 1
 681 0126 00BF     		nop
 682 0128 04B0     		add	sp, sp, #16
 683              		.cfi_def_cfa_offset 0
 684              		@ sp needed
 685 012a 7047     		bx	lr
 686              	.L57:
 687              		.align	2
 688              	.L56:
 689 012c 00000000 		.word	DRV_ADC1
 690 0130 00000000 		.word	adc_enabled_clocks
 691 0134 00000000 		.word	DRV_ADC2
 692 0138 00000000 		.word	DRV_ADC3
 693 013c 00000000 		.word	DRV_ADC4
 694              		.cfi_endproc
 695              	.LFE460:
 697              		.section	.text.adc_dev_get_dma_trigger,"ax",%progbits
 698              		.align	1
 699              		.p2align 4,,15
 700              		.global	adc_dev_get_dma_trigger
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 705              	adc_dev_get_dma_trigger:
 706              	.LFB461:
 198:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 199:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
 200:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   Returns ADC DMA trigger.
 201:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 202:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @param[in] adp       pointer to a @p adc_driver_t structure
 203:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @return              DMA trigger.
 204:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 205:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @notapi
 206:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
 207:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** uint32_t adc_dev_get_dma_trigger(adc_driver_t *adp) {
 707              		.loc 1 207 53
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 16
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              		@ link register save eliminated.
 712 0000 84B0     		sub	sp, sp, #16
 713              		.cfi_def_cfa_offset 16
 714 0002 0190     		str	r0, [sp, #4]
 208:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 209:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     uint32_t dma_trigger;
 210:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 211:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     if (adp == &DRV_ADC1) {
 715              		.loc 1 211 8
 716 0004 019B     		ldr	r3, [sp, #4]
 717 0006 104A     		ldr	r2, .L65
 718 0008 9342     		cmp	r3, r2
 719 000a 02D1     		bne	.L59
 212:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         dma_trigger = DMAMUX1_ADC1;
 720              		.loc 1 212 21
 721 000c 0523     		movs	r3, #5
 722 000e 0393     		str	r3, [sp, #12]
 723 0010 16E0     		b	.L60
 724              	.L59:
 213:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC2) {
 725              		.loc 1 213 15
 726 0012 019B     		ldr	r3, [sp, #4]
 727 0014 0D4A     		ldr	r2, .L65+4
 728 0016 9342     		cmp	r3, r2
 729 0018 02D1     		bne	.L61
 214:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         dma_trigger = DMAMUX1_ADC2;
 730              		.loc 1 214 21
 731 001a 2423     		movs	r3, #36
 732 001c 0393     		str	r3, [sp, #12]
 733 001e 0FE0     		b	.L60
 734              	.L61:
 215:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC3) {
 735              		.loc 1 215 15
 736 0020 019B     		ldr	r3, [sp, #4]
 737 0022 0B4A     		ldr	r2, .L65+8
 738 0024 9342     		cmp	r3, r2
 739 0026 02D1     		bne	.L62
 216:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         dma_trigger = DMAMUX1_ADC3;
 740              		.loc 1 216 21
 741 0028 2523     		movs	r3, #37
 742 002a 0393     		str	r3, [sp, #12]
 743 002c 08E0     		b	.L60
 744              	.L62:
 217:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC4) {
 745              		.loc 1 217 15
 746 002e 019B     		ldr	r3, [sp, #4]
 747 0030 084A     		ldr	r2, .L65+12
 748 0032 9342     		cmp	r3, r2
 749 0034 02D1     		bne	.L63
 218:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         dma_trigger = DMAMUX1_ADC4;
 750              		.loc 1 218 21
 751 0036 2623     		movs	r3, #38
 752 0038 0393     		str	r3, [sp, #12]
 753 003a 01E0     		b	.L60
 754              	.L63:
 219:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else {
 220:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         dma_trigger = DMAMUX1_ADC5;
 755              		.loc 1 220 21
 756 003c 2723     		movs	r3, #39
 757 003e 0393     		str	r3, [sp, #12]
 758              	.L60:
 221:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     }
 222:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 223:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     return dma_trigger;
 759              		.loc 1 223 12
 760 0040 039B     		ldr	r3, [sp, #12]
 224:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** }
 761              		.loc 1 224 1
 762 0042 1846     		mov	r0, r3
 763 0044 04B0     		add	sp, sp, #16
 764              		.cfi_def_cfa_offset 0
 765              		@ sp needed
 766 0046 7047     		bx	lr
 767              	.L66:
 768              		.align	2
 769              	.L65:
 770 0048 00000000 		.word	DRV_ADC1
 771 004c 00000000 		.word	DRV_ADC2
 772 0050 00000000 		.word	DRV_ADC3
 773 0054 00000000 		.word	DRV_ADC4
 774              		.cfi_endproc
 775              	.LFE461:
 777              		.section	.text.adc_dev_is_master,"ax",%progbits
 778              		.align	1
 779              		.p2align 4,,15
 780              		.global	adc_dev_is_master
 781              		.syntax unified
 782              		.thumb
 783              		.thumb_func
 785              	adc_dev_is_master:
 786              	.LFB462:
 225:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 226:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
 227:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   Checks if the ADC instance is a master.
 228:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 229:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @param[in] adp       pointer to a @p adc_driver_t structure
 230:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @return              master flag. Returns 'true' if the instance is a master,
 231:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *                      'false' otherwise.
 232:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 233:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @notapi
 234:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
 235:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** bool adc_dev_is_master(adc_driver_t *adp) {
 787              		.loc 1 235 43
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 8
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 791              		@ link register save eliminated.
 792 0000 82B0     		sub	sp, sp, #8
 793              		.cfi_def_cfa_offset 8
 794 0002 0190     		str	r0, [sp, #4]
 236:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 237:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     if (adp == &DRV_ADC1 || adp == &DRV_ADC3) {
 795              		.loc 1 237 8
 796 0004 019B     		ldr	r3, [sp, #4]
 797 0006 064A     		ldr	r2, .L71
 798 0008 9342     		cmp	r3, r2
 799 000a 03D0     		beq	.L68
 800              		.loc 1 237 26 discriminator 1
 801 000c 019B     		ldr	r3, [sp, #4]
 802 000e 054A     		ldr	r2, .L71+4
 803 0010 9342     		cmp	r3, r2
 804 0012 01D1     		bne	.L69
 805              	.L68:
 238:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         return true;
 806              		.loc 1 238 16
 807 0014 0123     		movs	r3, #1
 808 0016 00E0     		b	.L70
 809              	.L69:
 239:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else {
 240:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         return false;
 810              		.loc 1 240 16
 811 0018 0023     		movs	r3, #0
 812              	.L70:
 241:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     }
 242:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** }
 813              		.loc 1 242 1
 814 001a 1846     		mov	r0, r3
 815 001c 02B0     		add	sp, sp, #8
 816              		.cfi_def_cfa_offset 0
 817              		@ sp needed
 818 001e 7047     		bx	lr
 819              	.L72:
 820              		.align	2
 821              	.L71:
 822 0020 00000000 		.word	DRV_ADC1
 823 0024 00000000 		.word	DRV_ADC3
 824              		.cfi_endproc
 825              	.LFE462:
 827              		.section	.text.adc_dev_get_vector,"ax",%progbits
 828              		.align	1
 829              		.p2align 4,,15
 830              		.global	adc_dev_get_vector
 831              		.syntax unified
 832              		.thumb
 833              		.thumb_func
 835              	adc_dev_get_vector:
 836              	.LFB463:
 243:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 244:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
 245:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   Returns ADC interrupt vector.
 246:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 247:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @param[in] adp       pointer to a @p adc_driver_t structure
 248:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @return              ADC interrupt vector
 249:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 250:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @notapi
 251:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
 252:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** IRQn_Type adc_dev_get_vector(adc_driver_t *adp) {
 837              		.loc 1 252 49
 838              		.cfi_startproc
 839              		@ args = 0, pretend = 0, frame = 16
 840              		@ frame_needed = 0, uses_anonymous_args = 0
 841              		@ link register save eliminated.
 842 0000 84B0     		sub	sp, sp, #16
 843              		.cfi_def_cfa_offset 16
 844 0002 0190     		str	r0, [sp, #4]
 253:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 254:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     IRQn_Type vector;
 255:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 256:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     if (adp == &DRV_ADC1) {
 845              		.loc 1 256 8
 846 0004 019B     		ldr	r3, [sp, #4]
 847 0006 134A     		ldr	r2, .L80
 848 0008 9342     		cmp	r3, r2
 849 000a 03D1     		bne	.L74
 257:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         vector = IRQ_ADC1_VECTOR;
 850              		.loc 1 257 16
 851 000c 8923     		movs	r3, #137
 852 000e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 853 0012 1AE0     		b	.L75
 854              	.L74:
 258:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC2) {
 855              		.loc 1 258 15
 856 0014 019B     		ldr	r3, [sp, #4]
 857 0016 104A     		ldr	r2, .L80+4
 858 0018 9342     		cmp	r3, r2
 859 001a 03D1     		bne	.L76
 259:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         vector = IRQ_ADC2_VECTOR;
 860              		.loc 1 259 16
 861 001c 8A23     		movs	r3, #138
 862 001e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 863 0022 12E0     		b	.L75
 864              	.L76:
 260:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC3) {
 865              		.loc 1 260 15
 866 0024 019B     		ldr	r3, [sp, #4]
 867 0026 0D4A     		ldr	r2, .L80+8
 868 0028 9342     		cmp	r3, r2
 869 002a 03D1     		bne	.L77
 261:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         vector = IRQ_ADC3_VECTOR;
 870              		.loc 1 261 16
 871 002c 8B23     		movs	r3, #139
 872 002e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 873 0032 0AE0     		b	.L75
 874              	.L77:
 262:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else if (adp == &DRV_ADC4) {
 875              		.loc 1 262 15
 876 0034 019B     		ldr	r3, [sp, #4]
 877 0036 0A4A     		ldr	r2, .L80+12
 878 0038 9342     		cmp	r3, r2
 879 003a 03D1     		bne	.L78
 263:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         vector = IRQ_ADC4_VECTOR;
 880              		.loc 1 263 16
 881 003c 8C23     		movs	r3, #140
 882 003e ADF80E30 		strh	r3, [sp, #14]	@ movhi
 883 0042 02E0     		b	.L75
 884              	.L78:
 264:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     } else {
 265:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****         vector = IRQ_ADC5_VECTOR;
 885              		.loc 1 265 16
 886 0044 8D23     		movs	r3, #141
 887 0046 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 888              	.L75:
 266:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     }
 267:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 268:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     return vector;
 889              		.loc 1 268 12
 890 004a BDF90E30 		ldrsh	r3, [sp, #14]
 269:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** }
 891              		.loc 1 269 1
 892 004e 1846     		mov	r0, r3
 893 0050 04B0     		add	sp, sp, #16
 894              		.cfi_def_cfa_offset 0
 895              		@ sp needed
 896 0052 7047     		bx	lr
 897              	.L81:
 898              		.align	2
 899              	.L80:
 900 0054 00000000 		.word	DRV_ADC1
 901 0058 00000000 		.word	DRV_ADC2
 902 005c 00000000 		.word	DRV_ADC3
 903 0060 00000000 		.word	DRV_ADC4
 904              		.cfi_endproc
 905              	.LFE463:
 907              		.section	.text.Vector264,"ax",%progbits
 908              		.align	1
 909              		.p2align 4,,15
 910              		.global	Vector264
 911              		.syntax unified
 912              		.thumb
 913              		.thumb_func
 915              	Vector264:
 916              	.LFB464:
 270:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 271:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
 272:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   ADC1 interrupt handler.
 273:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 274:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @isr
 275:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
 276:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** IRQ_HANDLER(IRQ_ADC1_HANDLER) {
 917              		.loc 1 276 31
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 0
 920              		@ frame_needed = 0, uses_anonymous_args = 0
 921 0000 08B5     		push	{r3, lr}
 922              		.cfi_def_cfa_offset 8
 923              		.cfi_offset 3, -8
 924              		.cfi_offset 14, -4
 277:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 278:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     IRQ_PROLOGUE();
 279:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 280:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     __adc_serve_interrupt(&DRV_ADC1);
 925              		.loc 1 280 5
 926 0002 0248     		ldr	r0, .L83
 927 0004 FFF7FEFF 		bl	__adc_serve_interrupt
 281:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 282:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     IRQ_EPILOGUE();
 283:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** }
 928              		.loc 1 283 1
 929 0008 00BF     		nop
 930 000a 08BD     		pop	{r3, pc}
 931              	.L84:
 932              		.align	2
 933              	.L83:
 934 000c 00000000 		.word	DRV_ADC1
 935              		.cfi_endproc
 936              	.LFE464:
 938              		.section	.text.Vector268,"ax",%progbits
 939              		.align	1
 940              		.p2align 4,,15
 941              		.global	Vector268
 942              		.syntax unified
 943              		.thumb
 944              		.thumb_func
 946              	Vector268:
 947              	.LFB465:
 284:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 285:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
 286:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   ADC2 interrupt handler.
 287:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 288:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @isr
 289:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
 290:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** IRQ_HANDLER(IRQ_ADC2_HANDLER) {
 948              		.loc 1 290 31
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 0
 951              		@ frame_needed = 0, uses_anonymous_args = 0
 952 0000 08B5     		push	{r3, lr}
 953              		.cfi_def_cfa_offset 8
 954              		.cfi_offset 3, -8
 955              		.cfi_offset 14, -4
 291:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 292:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     IRQ_PROLOGUE();
 293:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 294:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     __adc_serve_interrupt(&DRV_ADC2);
 956              		.loc 1 294 5
 957 0002 0248     		ldr	r0, .L86
 958 0004 FFF7FEFF 		bl	__adc_serve_interrupt
 295:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 296:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     IRQ_EPILOGUE();
 297:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** }
 959              		.loc 1 297 1
 960 0008 00BF     		nop
 961 000a 08BD     		pop	{r3, pc}
 962              	.L87:
 963              		.align	2
 964              	.L86:
 965 000c 00000000 		.word	DRV_ADC2
 966              		.cfi_endproc
 967              	.LFE465:
 969              		.section	.text.Vector26C,"ax",%progbits
 970              		.align	1
 971              		.p2align 4,,15
 972              		.global	Vector26C
 973              		.syntax unified
 974              		.thumb
 975              		.thumb_func
 977              	Vector26C:
 978              	.LFB466:
 298:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 299:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
 300:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   ADC3 interrupt handler.
 301:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 302:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @isr
 303:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
 304:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** IRQ_HANDLER(IRQ_ADC3_HANDLER) {
 979              		.loc 1 304 31
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983 0000 08B5     		push	{r3, lr}
 984              		.cfi_def_cfa_offset 8
 985              		.cfi_offset 3, -8
 986              		.cfi_offset 14, -4
 305:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 306:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     IRQ_PROLOGUE();
 307:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 308:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     __adc_serve_interrupt(&DRV_ADC3);
 987              		.loc 1 308 5
 988 0002 0248     		ldr	r0, .L89
 989 0004 FFF7FEFF 		bl	__adc_serve_interrupt
 309:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 310:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     IRQ_EPILOGUE();
 311:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** }
 990              		.loc 1 311 1
 991 0008 00BF     		nop
 992 000a 08BD     		pop	{r3, pc}
 993              	.L90:
 994              		.align	2
 995              	.L89:
 996 000c 00000000 		.word	DRV_ADC3
 997              		.cfi_endproc
 998              	.LFE466:
 1000              		.section	.text.Vector270,"ax",%progbits
 1001              		.align	1
 1002              		.p2align 4,,15
 1003              		.global	Vector270
 1004              		.syntax unified
 1005              		.thumb
 1006              		.thumb_func
 1008              	Vector270:
 1009              	.LFB467:
 312:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 313:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
 314:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   ADC4 interrupt handler.
 315:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 316:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @isr
 317:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
 318:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** IRQ_HANDLER(IRQ_ADC4_HANDLER) {
 1010              		.loc 1 318 31
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 0
 1013              		@ frame_needed = 0, uses_anonymous_args = 0
 1014 0000 08B5     		push	{r3, lr}
 1015              		.cfi_def_cfa_offset 8
 1016              		.cfi_offset 3, -8
 1017              		.cfi_offset 14, -4
 319:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 320:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     IRQ_PROLOGUE();
 321:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 322:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     __adc_serve_interrupt(&DRV_ADC4);
 1018              		.loc 1 322 5
 1019 0002 0248     		ldr	r0, .L92
 1020 0004 FFF7FEFF 		bl	__adc_serve_interrupt
 323:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 324:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     IRQ_EPILOGUE();
 325:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** }
 1021              		.loc 1 325 1
 1022 0008 00BF     		nop
 1023 000a 08BD     		pop	{r3, pc}
 1024              	.L93:
 1025              		.align	2
 1026              	.L92:
 1027 000c 00000000 		.word	DRV_ADC4
 1028              		.cfi_endproc
 1029              	.LFE467:
 1031              		.section	.text.Vector274,"ax",%progbits
 1032              		.align	1
 1033              		.p2align 4,,15
 1034              		.global	Vector274
 1035              		.syntax unified
 1036              		.thumb
 1037              		.thumb_func
 1039              	Vector274:
 1040              	.LFB468:
 326:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 327:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** /**
 328:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @brief   ADC5 interrupt handler.
 329:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  *
 330:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  * @isr
 331:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****  */
 332:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** IRQ_HANDLER(IRQ_ADC5_HANDLER) {
 1041              		.loc 1 332 31
 1042              		.cfi_startproc
 1043              		@ args = 0, pretend = 0, frame = 0
 1044              		@ frame_needed = 0, uses_anonymous_args = 0
 1045 0000 08B5     		push	{r3, lr}
 1046              		.cfi_def_cfa_offset 8
 1047              		.cfi_offset 3, -8
 1048              		.cfi_offset 14, -4
 333:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 334:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     IRQ_PROLOGUE();
 335:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 336:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     __adc_serve_interrupt(&DRV_ADC5);
 1049              		.loc 1 336 5
 1050 0002 0248     		ldr	r0, .L95
 1051 0004 FFF7FEFF 		bl	__adc_serve_interrupt
 337:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** 
 338:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c ****     IRQ_EPILOGUE();
 339:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/src/sr5e1\saradc_dev.c **** }
 1052              		.loc 1 339 1
 1053 0008 00BF     		nop
 1054 000a 08BD     		pop	{r3, pc}
 1055              	.L96:
 1056              		.align	2
 1057              	.L95:
 1058 000c 00000000 		.word	DRV_ADC5
 1059              		.cfi_endproc
 1060              	.LFE468:
 1062              		.text
 1063              	.Letext0:
 1064              		.file 3 "c:\\stellarstudio-7.0\\sdks\\tools-1.4.0\\toolchain\\arm\\mingw64_nt\\10.3-2021.10\\arm-n
 1065              		.file 4 "c:\\stellarstudio-7.0\\sdks\\tools-1.4.0\\toolchain\\arm\\mingw64_nt\\10.3-2021.10\\arm-n
 1066              		.file 5 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/include/saradc.
 1067              		.file 6 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/include/saradc_
 1068              		.file 7 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/Analog/SARADC/include/sr5e1/s
 1069              		.file 8 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/sr5e1xx.h"
 1070              		.file 9 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_ADC.
 1071              		.file 10 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_DMA
 1072              		.file 11 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_DMA
 1073              		.file 12 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_RCC
 1074              		.file 13 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Drivers/System/DMA/include/dma.h"
DEFINED SYMBOLS
                            *ABS*:00000000 saradc_dev.c
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:19     .bss.adc_enabled_clocks:00000000 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:22     .bss.adc_enabled_clocks:00000000 adc_enabled_clocks
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:25     .text.adc_dev_get_reg_ptr:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:32     .text.adc_dev_get_reg_ptr:00000000 adc_dev_get_reg_ptr
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:98     .text.adc_dev_get_reg_ptr:00000048 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:111    .text.adc_common_dev_get_reg_ptr:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:118    .text.adc_common_dev_get_reg_ptr:00000000 adc_common_dev_get_reg_ptr
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:159    .text.adc_common_dev_get_reg_ptr:00000028 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:167    .text.adc_dev_get_clock:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:174    .text.adc_dev_get_clock:00000000 adc_dev_get_clock
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:215    .text.adc_dev_get_clock:00000028 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:222    .text.adc_dev_clock_enable:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:229    .text.adc_dev_clock_enable:00000000 adc_dev_clock_enable
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:475    .text.adc_dev_clock_enable:000001ac $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:484    .text.adc_dev_clock_disable:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:491    .text.adc_dev_clock_disable:00000000 adc_dev_clock_disable
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:689    .text.adc_dev_clock_disable:0000012c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:698    .text.adc_dev_get_dma_trigger:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:705    .text.adc_dev_get_dma_trigger:00000000 adc_dev_get_dma_trigger
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:770    .text.adc_dev_get_dma_trigger:00000048 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:778    .text.adc_dev_is_master:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:785    .text.adc_dev_is_master:00000000 adc_dev_is_master
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:822    .text.adc_dev_is_master:00000020 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:828    .text.adc_dev_get_vector:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:835    .text.adc_dev_get_vector:00000000 adc_dev_get_vector
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:900    .text.adc_dev_get_vector:00000054 $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:908    .text.Vector264:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:915    .text.Vector264:00000000 Vector264
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:934    .text.Vector264:0000000c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:939    .text.Vector268:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:946    .text.Vector268:00000000 Vector268
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:965    .text.Vector268:0000000c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:970    .text.Vector26C:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:977    .text.Vector26C:00000000 Vector26C
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:996    .text.Vector26C:0000000c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:1001   .text.Vector270:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:1008   .text.Vector270:00000000 Vector270
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:1027   .text.Vector270:0000000c $d
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:1032   .text.Vector274:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:1039   .text.Vector274:00000000 Vector274
C:\Users\EVERYO~1\AppData\Local\Temp\ccEQ4V0C.s:1058   .text.Vector274:0000000c $d
                           .group:00000000 wm4.0.1ea29c7543256e0887205fa7f8c557c8
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.typedefs.h.36.07fe3956b4e751037cfee70edcd0b397
                           .group:00000000 wm4.saradc.h.37.e573a4d81af2a4c8263ef4280dada3aa
                           .group:00000000 wm4.dmamux.h.25.337aea179f6dbcc87c52aae26d38f76e
                           .group:00000000 wm4.clock_cfg.h.24.0aed3cee9ecce947225a304181294191
                           .group:00000000 wm4.sr5e1xx.h.22.e5c808533cc52ed19fb0830cd7d98924
                           .group:00000000 wm4.cmsis_version.h.32.0f826810625204eca22a19868bdc7586
                           .group:00000000 wm4.core_cm7.h.66.8ab2de36917d6fcae18019067fda13e0
                           .group:00000000 wm4.cmsis_gcc.h.26.498d0ad17a45fc9ef20fdc01caf02259
                           .group:00000000 wm4.core_cm7.h.174.43edb295ecdaadad738f48ba6011ffad
                           .group:00000000 wm4.mpu_armv7.h.32.83326921a797fa9d6f70449916b4b839
                           .group:00000000 wm4.cachel1_armv7.h.32.abd77761a989e008b0c60891114a33c7
                           .group:00000000 wm4.SR5E1_ADC.h.14.21608e6aff125ba995dd767d6d8dc311
                           .group:00000000 wm4.SR5E1_CEM.h.14.01fe5742c8f1ae35b1f3af05932f702e
                           .group:00000000 wm4.SR5E1_CMU.h.14.2617b38b159abe38028862394531e06d
                           .group:00000000 wm4.SR5E1_COMP.h.14.4b6fdfe4f5f7fd9bedf3a99b98bdf4cd
                           .group:00000000 wm4.SR5E1_CORDIC.h.14.354fbf7c9eaf6963d38eaa25cf28ffe8
                           .group:00000000 wm4.SR5E1_CRC.h.14.c64d0f7767671ddb92e9ead0a1162100
                           .group:00000000 wm4.SR5E1_DAC.h.14.8c26a0ff04b0cfeb55306cc3f22187b8
                           .group:00000000 wm4.SR5E1_DBGMCU.h.14.427df893d53a8044654f017ba01c25ed
                           .group:00000000 wm4.SR5E1_DMA.h.14.a7f9a92f844b40a86965798c2e64240b
                           .group:00000000 wm4.SR5E1_DMAMUX.h.14.471b3b4dfd4d41515f1df49493698866
                           .group:00000000 wm4.SR5E1_EXTI.h.14.a325ea3fe89cd84894660551c33241ea
                           .group:00000000 wm4.SR5E1_FCCU.h.14.0ebf0f0f36e079d28613ad2c80e17e23
                           .group:00000000 wm4.SR5E1_FDCAN.h.14.ac57101fad5dbc798bfb93f34c899de7
                           .group:00000000 wm4.SR5E1_FLASH_REG_ITF.h.14.d23d1d44923f9b20b8c8fdb51d66aefd
                           .group:00000000 wm4.SR5E1_GPIO.h.14.1c84071e130d7c64b62470ab0e18a1f1
                           .group:00000000 wm4.SR5E1_HRTIM.h.24.03932387d2522e6bd5c772a4edaf2f5d
                           .group:00000000 wm4.SR5E1_HSEM.h.14.cbe70eee519f01b16452c3f8c99d8df1
                           .group:00000000 wm4.SR5E1_I2C.h.14.350ba3e0f4fd57828457efa80135c36c
                           .group:00000000 wm4.SR5E1_IMA.h.14.62b7088985ab2b7ce9b030a02daa1f7d
                           .group:00000000 wm4.SR5E1_IWDG.h.14.20b7c5f05cf7ae94464c360d7af3660d
                           .group:00000000 wm4.SR5E1_MEMU.h.14.04bad7ae4c52ce334a4fc900aad2ae5b
                           .group:00000000 wm4.SR5E1_NVM_CTRL.h.14.5f442617f0628d4f16258f211c614ef9
                           .group:00000000 wm4.SR5E1_PLLDIG.h.14.bd87a8e6917eee17dae2f312c8e5fa53
                           .group:00000000 wm4.SR5E1_PMC_DIG.h.14.54173b566c6656344766ec4ef46c9281
                           .group:00000000 wm4.SR5E1_RCC.h.14.56734803c71534de286e793a53649740
                           .group:00000000 wm4.SR5E1_RTC.h.14.47037cbc7d8175dbf2be1dc0bb955e3f
                           .group:00000000 wm4.SR5E1_SD_ADC.h.14.552b97d0b8f3c1fd4df6d8964b2f1a80
                           .group:00000000 wm4.SR5E1_SMPU.h.14.8ce5bb6d5d7c579cd725f492f46e9085
                           .group:00000000 wm4.SR5E1_SPI.h.14.42d52112e540f85ade4d9135f8b87d72
                           .group:00000000 wm4.SR5E1_SSCM.h.14.8e6a2ad0ce5fca422fc3d69939b6125b
                           .group:00000000 wm4.SR5E1_SYSCFG.h.14.02b969490118ce4069914b5e94f7ca65
                           .group:00000000 wm4.SR5E1_TDM.h.14.a40ed7928cad243a57fd233fccf01ad2
                           .group:00000000 wm4.SR5E1_TIM.h.14.f17572f4c16f3f152b8164ad25c34f5b
                           .group:00000000 wm4.SR5E1_UART.h.14.eec3ab82b02b3bdb3de500483675b83f
                           .group:00000000 wm4.SR5E1_WWDG.h.14.59b45efc70e442cc6ef03702aad4ad88
                           .group:00000000 wm4.irq_numbers.h.38.6294b95aed1bf7b3a2cda0eed8ce8f57
                           .group:00000000 wm4.regs.h.23.2ac145b4f57126d16daed5fbd86d99c6
                           .group:00000000 wm4.clock.h.37.80236c5607fdd9eb9275e5111a4191c3
                           .group:00000000 wm4.irq.h.37.78714f25754c8b09d1428599101f6cc7
                           .group:00000000 wm4.dma.h.40.f77dd217a06ceba13a3cfdd4102a73c1

UNDEFINED SYMBOLS
DRV_ADC1
DRV_ADC2
DRV_ADC3
DRV_ADC4
__adc_serve_interrupt
DRV_ADC5
