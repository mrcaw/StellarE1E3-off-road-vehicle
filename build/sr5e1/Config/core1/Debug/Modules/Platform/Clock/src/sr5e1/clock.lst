   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"clock.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	SystemCoreClock
  19              		.section	.data.SystemCoreClock,"aw"
  20              		.align	2
  23              	SystemCoreClock:
  24 0000 00A3E111 		.word	300000000
  25              		.section	.itcm,"ax",%progbits
  26              		.align	1
  27              		.p2align 4,,15
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	flash_ws_init:
  33              	.LFB436:
  34              		.file 1 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1/clock.c"
   1:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /****************************************************************************
   2:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  *
   3:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * Copyright (c) 2022 STMicroelectronics - All Rights Reserved
   4:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  *
   5:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * License terms: STMicroelectronics Proprietary in accordance with licensing
   6:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * terms SLA0098 at www.st.com.
   7:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  *
   8:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * THIS SOFTWARE IS DISTRIBUTED "AS IS," AND ALL WARRANTIES ARE DISCLAIMED,
   9:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * INCLUDING MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  10:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  *
  11:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  *****************************************************************************/
  12:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /**
  13:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * @file    clock.c
  14:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * @brief   SR5E1 clock subsystem source file.
  15:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  *
  16:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * @addtogroup PLATFORM
  17:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * @addtogroup CLOCK
  18:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * @ingroup PLATFORM
  19:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * @{
  20:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  */
  21:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  22:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** #include <clock.h>
  23:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  24:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /*===========================================================================*/
  25:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /* Module local definitions.                                                 */
  26:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /*===========================================================================*/
  27:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  28:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /*===========================================================================*/
  29:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /* Module exported variables.                                                */
  30:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /*===========================================================================*/
  31:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  32:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** uint32_t SystemCoreClock = CLOCK_SYSCLKDIV;
  33:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  34:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /*===========================================================================*/
  35:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /* Module local types.                                                       */
  36:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /*===========================================================================*/
  37:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  38:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /*===========================================================================*/
  39:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /* Module local variables.                                                   */
  40:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /*===========================================================================*/
  41:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  42:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /*===========================================================================*/
  43:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /* Module local functions.                                                   */
  44:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /*===========================================================================*/
  45:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  46:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /**
  47:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * @brief   Initializes flash wait states
  48:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * @note    Since flash wait states cannot be updated while reading from flash,
  49:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  *          the code for wait states updating is executed from ITCM.
  50:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  *
  51:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  * @notapi
  52:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****  */
  53:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** static void __attribute__((section(".itcm"))) flash_ws_init(void) {
  35              		.loc 1 53 67
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  54:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  55:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     NVM_CTRL1->PFCR1 = CLOCK_NVMAPC_FIELD(0U)                   | 
  40              		.loc 1 55 14
  41 0000 044B     		ldr	r3, .L2
  42              		.loc 1 55 22
  43 0002 4FF40062 		mov	r2, #2048
  44 0006 1A60     		str	r2, [r3]
  56:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                        CLOCK_NVMRWSC_FIELD(CLOCK_NVMRWSC_VALUE);
  57:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     NVM_CTRL2->PFCR1 = CLOCK_NVMAPC_FIELD(0U)                   | 
  45              		.loc 1 57 14
  46 0008 034B     		ldr	r3, .L2+4
  47              		.loc 1 57 22
  48 000a 4FF40062 		mov	r2, #2048
  49 000e 1A60     		str	r2, [r3]
  58:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                        CLOCK_NVMRWSC_FIELD(CLOCK_NVMRWSC_VALUE);
  59:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** }
  50              		.loc 1 59 1
  51 0010 00BF     		nop
  52 0012 7047     		bx	lr
  53              	.L3:
  54              		.align	2
  55              	.L2:
  56 0014 00180042 		.word	1107302400
  57 0018 001C0042 		.word	1107303424
  58              		.cfi_endproc
  59              	.LFE436:
  61              		.section	.text.clock_init,"ax",%progbits
  62              		.align	1
  63              		.p2align 4,,15
  64              		.global	clock_init
  65              		.syntax unified
  66              		.thumb
  67              		.thumb_func
  69              	clock_init:
  70              	.LFB437:
  60:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  61:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /*===========================================================================*/
  62:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /* Module exported functions.                                                */
  63:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** /*===========================================================================*/
  64:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  65:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** void clock_init(void) {
  71              		.loc 1 65 23
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 48
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75 0000 00B5     		push	{lr}
  76              		.cfi_def_cfa_offset 4
  77              		.cfi_offset 14, -4
  78 0002 8DB0     		sub	sp, sp, #52
  79              		.cfi_def_cfa_offset 56
  80 0004 4FF0FF33 		mov	r3, #-1
  81 0008 0193     		str	r3, [sp, #4]
  82              	.LBB20:
  83              	.LBB21:
  84              		.file 2 "src-gen/sr5e1/clock.h"
   1:src-gen/sr5e1/clock.h **** /****************************************************************************
   2:src-gen/sr5e1/clock.h ****  *
   3:src-gen/sr5e1/clock.h ****  * Copyright (c) 2022 STMicroelectronics - All Rights Reserved
   4:src-gen/sr5e1/clock.h ****  *
   5:src-gen/sr5e1/clock.h ****  * License terms: STMicroelectronics Proprietary in accordance with licensing
   6:src-gen/sr5e1/clock.h ****  * terms SLA0098 at www.st.com.
   7:src-gen/sr5e1/clock.h ****  *
   8:src-gen/sr5e1/clock.h ****  * THIS SOFTWARE IS DISTRIBUTED "AS IS," AND ALL WARRANTIES ARE DISCLAIMED,
   9:src-gen/sr5e1/clock.h ****  * INCLUDING MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  10:src-gen/sr5e1/clock.h ****  *
  11:src-gen/sr5e1/clock.h ****  *****************************************************************************/
  12:src-gen/sr5e1/clock.h **** /**
  13:src-gen/sr5e1/clock.h ****  * @file    clock.h
  14:src-gen/sr5e1/clock.h ****  * @brief   SR5E1 clock subsystem header file.
  15:src-gen/sr5e1/clock.h ****  *
  16:src-gen/sr5e1/clock.h ****  * @addtogroup PLATFORM
  17:src-gen/sr5e1/clock.h ****  * @addtogroup CLOCK
  18:src-gen/sr5e1/clock.h ****  * @ingroup PLATFORM
  19:src-gen/sr5e1/clock.h ****  * @{
  20:src-gen/sr5e1/clock.h ****  */
  21:src-gen/sr5e1/clock.h **** 
  22:src-gen/sr5e1/clock.h **** #ifndef _CLOCK_H_
  23:src-gen/sr5e1/clock.h **** #define _CLOCK_H_
  24:src-gen/sr5e1/clock.h **** 
  25:src-gen/sr5e1/clock.h **** #include <clock_cfg.h>
  26:src-gen/sr5e1/clock.h **** #include <platform.h>
  27:src-gen/sr5e1/clock.h **** #include <typedefs.h>
  28:src-gen/sr5e1/clock.h **** 
  29:src-gen/sr5e1/clock.h **** /*===========================================================================*/
  30:src-gen/sr5e1/clock.h **** /* Module constants.                                                         */
  31:src-gen/sr5e1/clock.h **** /*===========================================================================*/
  32:src-gen/sr5e1/clock.h **** 
  33:src-gen/sr5e1/clock.h **** /**
  34:src-gen/sr5e1/clock.h ****  * @name    RCC CFGR register
  35:src-gen/sr5e1/clock.h ****  * @{
  36:src-gen/sr5e1/clock.h ****  */
  37:src-gen/sr5e1/clock.h **** #define CLOCK_SW_MASK               (3UL << 0U)
  38:src-gen/sr5e1/clock.h **** #define CLOCK_SW_IRCOSC             (4UL << 0U) /* Internal 16 MHz   */
  39:src-gen/sr5e1/clock.h **** #define CLOCK_SW_XOSC               (5UL << 0U) /* External 4-40 MHz */
  40:src-gen/sr5e1/clock.h **** #define CLOCK_SW_PLL0PHI            (6UL << 0U)
  41:src-gen/sr5e1/clock.h **** #define CLOCK_SW_PLL1PHI            (7UL << 0U)
  42:src-gen/sr5e1/clock.h **** 
  43:src-gen/sr5e1/clock.h **** #define CLOCK_SYSPRE_MASK           (511UL << 8U)
  44:src-gen/sr5e1/clock.h **** #define CLOCK_SYSPRE_FIELD(n)       (((uint32_t)(n)) << 8U)
  45:src-gen/sr5e1/clock.h **** 
  46:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_MASK           (15UL << 20U)
  47:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_NOCLOCK        (0UL << 20U)
  48:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_LSI            (8UL << 20U)
  49:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_IRCOSC         (9UL << 20U)
  50:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_XOSC           (10UL << 20U)
  51:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_PLL0PHI        (11UL << 20U)
  52:src-gen/sr5e1/clock.h **** #define CLOCK_MCOSEL_PLL1PHI        (12UL << 20U)
  53:src-gen/sr5e1/clock.h **** 
  54:src-gen/sr5e1/clock.h **** #define CLOCK_MCOPRE_MASK           (63UL << 24U)
  55:src-gen/sr5e1/clock.h **** #define CLOCK_MCOPRE_FIELD(n)       (((uint32_t)(n)) << 24U)
  56:src-gen/sr5e1/clock.h **** /** @} */
  57:src-gen/sr5e1/clock.h **** 
  58:src-gen/sr5e1/clock.h **** /**
  59:src-gen/sr5e1/clock.h ****  * @name    RCC PLLCFGR register
  60:src-gen/sr5e1/clock.h ****  * @{
  61:src-gen/sr5e1/clock.h ****  */
  62:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_MASK          (3UL << 0U)
  63:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_NOCLOCK       (0UL << 0U)
  64:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_IRCOSC        (2UL << 0U)
  65:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0SRC_XOSC          (3UL << 0U)
  66:src-gen/sr5e1/clock.h **** 
  67:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_MASK          (3UL << 8U)
  68:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_NOCLOCK       (0UL << 8U)
  69:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_PLL0PHI1      (2UL << 8U)
  70:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1SRC_XOSC          (3UL << 8U)
  71:src-gen/sr5e1/clock.h **** /** @} */
  72:src-gen/sr5e1/clock.h **** 
  73:src-gen/sr5e1/clock.h **** /**
  74:src-gen/sr5e1/clock.h ****  * @name    RCC CCIPR1 register
  75:src-gen/sr5e1/clock.h ****  * @{
  76:src-gen/sr5e1/clock.h ****  */
  77:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_MASK          (7UL << 0U)
  78:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_NOCLOCK       (0UL << 0U)
  79:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_IRCOSC        (4UL << 0U)
  80:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_XOSC          (5UL << 0U)
  81:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_PLL0PHI       (6UL << 0U)
  82:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSEL_LSI           (7UL << 0U)
  83:src-gen/sr5e1/clock.h **** 
  84:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_MASK           (7UL << 4U)
  85:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_NOCLOCK        (0UL << 4U)
  86:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_IRCOSC         (4UL << 4U)
  87:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_XOSC           (5UL << 4U)
  88:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSEL_PLL0PHI        (6UL << 4U)
  89:src-gen/sr5e1/clock.h **** 
  90:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_MASK           (7UL << 8U)
  91:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_NOCLOCK        (0UL << 8U)
  92:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_IRCOSC         (4UL << 8U)
  93:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_XOSC           (5UL << 8U)
  94:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_PLL0PHI        (6UL << 8U)
  95:src-gen/sr5e1/clock.h **** #define CLOCK_SPISEL_I2S_CKIN       (7UL << 8U)
  96:src-gen/sr5e1/clock.h **** 
  97:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_MASK         (7UL << 12U)
  98:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_NOCLOCK      (0UL << 12U)
  99:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_XOSC         (4UL << 12U)
 100:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSEL_PLL0PHI      (5UL << 12U)
 101:src-gen/sr5e1/clock.h **** 
 102:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_MASK           (7UL << 16U)
 103:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_NOCLOCK        (0UL << 16U)
 104:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_XOSC           (4UL << 16U)
 105:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_PLL0PHI        (5UL << 16U)
 106:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSEL_PLL1PHI        (6UL << 16U)
 107:src-gen/sr5e1/clock.h **** 
 108:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_MASK         (7UL << 20U)
 109:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_NOCLOCK      (0UL << 20U)
 110:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_XOSC         (4UL << 20U)
 111:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_PLL0PHI      (5UL << 20U)
 112:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSEL_PLL1PHI      (6UL << 20U)
 113:src-gen/sr5e1/clock.h **** /** @} */
 114:src-gen/sr5e1/clock.h **** 
 115:src-gen/sr5e1/clock.h **** /**
 116:src-gen/sr5e1/clock.h ****  * @name    RCC CCIPR2 register
 117:src-gen/sr5e1/clock.h ****  * @{
 118:src-gen/sr5e1/clock.h ****  */
 119:src-gen/sr5e1/clock.h **** #define CLOCK_UARTPRE_MASK          (31U << 0U)
 120:src-gen/sr5e1/clock.h **** #define CLOCK_UARTPRE_FIELD(n)      (((uint32_t)(n)) << 0U)
 121:src-gen/sr5e1/clock.h **** 
 122:src-gen/sr5e1/clock.h **** #define CLOCK_I2CPRE_MASK           (31U << 5U)
 123:src-gen/sr5e1/clock.h **** #define CLOCK_I2CPRE_FIELD(n)       (((uint32_t)(n)) << 5U)
 124:src-gen/sr5e1/clock.h **** 
 125:src-gen/sr5e1/clock.h **** #define CLOCK_SPIPRE_MASK           (31U << 10U)
 126:src-gen/sr5e1/clock.h **** #define CLOCK_SPIPRE_FIELD(n)       (((uint32_t)(n)) << 10U)
 127:src-gen/sr5e1/clock.h **** 
 128:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANPRE_MASK         (31U << 15U)
 129:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANPRE_FIELD(n)     (((uint32_t)(n)) << 15U)
 130:src-gen/sr5e1/clock.h **** 
 131:src-gen/sr5e1/clock.h **** #define CLOCK_ADCPRE_MASK           (63U << 20U)
 132:src-gen/sr5e1/clock.h **** #define CLOCK_ADCPRE_FIELD(n)       (((uint32_t)(n)) << 20U)
 133:src-gen/sr5e1/clock.h **** 
 134:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCPRE_MASK         (63U << 26U)
 135:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCPRE_FIELD(n)     (((uint32_t)(n)) << 26U)
 136:src-gen/sr5e1/clock.h **** /** @} */
 137:src-gen/sr5e1/clock.h **** 
 138:src-gen/sr5e1/clock.h **** /**
 139:src-gen/sr5e1/clock.h ****  * @name    RCC LSCFGR register
 140:src-gen/sr5e1/clock.h ****  * @{
 141:src-gen/sr5e1/clock.h ****  */
 142:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_MASK           (3UL << 9U)
 143:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_NOCLOCK        (0UL << 9U)
 144:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_LSI            (2UL << 9U)  /* LSI after LSIPRE prescaler division */
 145:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSEL_XOSC           (3UL << 9U)  /* XOSC divided by 32 */
 146:src-gen/sr5e1/clock.h **** 
 147:src-gen/sr5e1/clock.h **** #define CLOCK_LSIPRE_MASK           (31UL << 0U)
 148:src-gen/sr5e1/clock.h **** #define CLOCK_LSIPRE_FIELD(n)       (((uint32_t)(n)) << 0U)
 149:src-gen/sr5e1/clock.h **** /** @} */
 150:src-gen/sr5e1/clock.h **** 
 151:src-gen/sr5e1/clock.h **** /**
 152:src-gen/sr5e1/clock.h ****  * @name    PLLDIG PLL0DV register
 153:src-gen/sr5e1/clock.h ****  * @{
 154:src-gen/sr5e1/clock.h ****  */
 155:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0MFD_MASK          (127UL << 0U)
 156:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0MFD_FIELD(n)      (((uint32_t)(n)) << 0U)
 157:src-gen/sr5e1/clock.h **** 
 158:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PREDIV_MASK       (7UL << 12U)
 159:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PREDIV_FIELD(n)   (((uint32_t)(n)) << 12U)
 160:src-gen/sr5e1/clock.h **** 
 161:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI_MASK       (63UL << 16U)
 162:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI_FIELD(n)   (((uint32_t)(n)) << 16U)
 163:src-gen/sr5e1/clock.h **** 
 164:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI1_MASK      (15UL << 27U)
 165:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0RFDPHI1_FIELD(n)  (((uint32_t)(n)) << 27U)
 166:src-gen/sr5e1/clock.h **** /** @} */
 167:src-gen/sr5e1/clock.h **** 
 168:src-gen/sr5e1/clock.h **** /**
 169:src-gen/sr5e1/clock.h ****  * @name    PLLDIG PLL1DV register
 170:src-gen/sr5e1/clock.h ****  * @{
 171:src-gen/sr5e1/clock.h ****  */
 172:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1MFD_MASK          (127UL << 0U)
 173:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1MFD_FIELD(n)      (((uint32_t)(n)) << 0U)
 174:src-gen/sr5e1/clock.h **** 
 175:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1RFDPHI_MASK       (63U << 16U)
 176:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1RFDPHI_FIELD(n)   (((uint32_t)(n)) << 16U)
 177:src-gen/sr5e1/clock.h **** /** @} */
 178:src-gen/sr5e1/clock.h **** 
 179:src-gen/sr5e1/clock.h **** /**
 180:src-gen/sr5e1/clock.h ****  * @name    NVMPC PFCR1 register
 181:src-gen/sr5e1/clock.h ****  * @{
 182:src-gen/sr5e1/clock.h ****  */
 183:src-gen/sr5e1/clock.h **** 
 184:src-gen/sr5e1/clock.h **** #define CLOCK_NVMCCBFEN_MASK        (1UL << 0U)
 185:src-gen/sr5e1/clock.h **** #define CLOCK_NVMCCBFEN_FIELD(n)    (((uint32_t)(n)) << 0U)
 186:src-gen/sr5e1/clock.h **** 
 187:src-gen/sr5e1/clock.h **** #define CLOCK_NVMDCBFEN_MASK        (1UL << 1U)
 188:src-gen/sr5e1/clock.h **** #define CLOCK_NVMDCBFEN_FIELD(n)    ((n) << 1U)
 189:src-gen/sr5e1/clock.h **** 
 190:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_MASK          (1FUL << 8U)
 191:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_FIELD(n)      (((uint32_t)(n)) << 8U)
 192:src-gen/sr5e1/clock.h **** 
 193:src-gen/sr5e1/clock.h **** #define CLOCK_NVMAPC_MASK           (7UL << 13U)
 194:src-gen/sr5e1/clock.h **** #define CLOCK_NVMAPC_FIELD(n)       (((uint32_t)(n)) << 13U)
 195:src-gen/sr5e1/clock.h **** /** @} */
 196:src-gen/sr5e1/clock.h **** 
 197:src-gen/sr5e1/clock.h **** /**
 198:src-gen/sr5e1/clock.h ****  * @name    Internal oscillators
 199:src-gen/sr5e1/clock.h ****  * @{
 200:src-gen/sr5e1/clock.h ****  */
 201:src-gen/sr5e1/clock.h **** #define CLOCK_IRCOSCCLK             16000000UL
 202:src-gen/sr5e1/clock.h **** #define CLOCK_LSICLK                1000000UL
 203:src-gen/sr5e1/clock.h **** /** @} */
 204:src-gen/sr5e1/clock.h **** 
 205:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 206:src-gen/sr5e1/clock.h **** /* Module pre-compile time settings.                                         */
 207:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 208:src-gen/sr5e1/clock.h **** 
 209:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 210:src-gen/sr5e1/clock.h **** /* Derived constants and error checks.                                       */
 211:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 212:src-gen/sr5e1/clock.h **** 
 213:src-gen/sr5e1/clock.h **** /* Configuration file checks.*/
 214:src-gen/sr5e1/clock.h **** #if !defined(SR5E1xxx_CLOCKCONF)
 215:src-gen/sr5e1/clock.h **** #error "SR5E1xxx_CLOCKCONF not defined in clock_cfg.h"
 216:src-gen/sr5e1/clock.h **** #endif
 217:src-gen/sr5e1/clock.h **** 
 218:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SMP_MODE) || defined(__DOXYGEN__)
 219:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SMP_MODE not defined in clock_cfg.h"
 220:src-gen/sr5e1/clock.h **** #endif
 221:src-gen/sr5e1/clock.h **** 
 222:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_XOSC_ENABLED) || defined(__DOXYGEN__)
 223:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSC_ENABLED not defined in clock_cfg.h"
 224:src-gen/sr5e1/clock.h **** #endif
 225:src-gen/sr5e1/clock.h **** 
 226:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_LSI_ENABLED) || defined(__DOXYGEN__)
 227:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_LSI_ENABLED not defined in clock_cfg.h"
 228:src-gen/sr5e1/clock.h **** #endif
 229:src-gen/sr5e1/clock.h **** 
 230:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_XOSCCLK)
 231:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSCCLK not defined in clock_cfg.h"
 232:src-gen/sr5e1/clock.h **** #endif
 233:src-gen/sr5e1/clock.h **** 
 234:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_XOSC_BYPASS)
 235:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSC_BYPASS not defined in clock_cfg.h"
 236:src-gen/sr5e1/clock.h **** #endif
 237:src-gen/sr5e1/clock.h **** 
 238:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0SRC) || defined(__DOXYGEN__)
 239:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0SRC not defined in clock_cfg.h"
 240:src-gen/sr5e1/clock.h **** #endif
 241:src-gen/sr5e1/clock.h **** 
 242:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0MFD_VALUE) || defined(__DOXYGEN__)
 243:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0MFD_VALUE not defined in clock_cfg.h"
 244:src-gen/sr5e1/clock.h **** #endif
 245:src-gen/sr5e1/clock.h **** 
 246:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0PREDIV_VALUE) || defined(__DOXYGEN__)
 247:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0PREDIV_VALUE not defined in clock_cfg.h"
 248:src-gen/sr5e1/clock.h **** #endif
 249:src-gen/sr5e1/clock.h **** 
 250:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0RFDPHI_VALUE) || defined(__DOXYGEN__)
 251:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0RFDPHI_VALUE not defined in clock_cfg.h"
 252:src-gen/sr5e1/clock.h **** #endif
 253:src-gen/sr5e1/clock.h **** 
 254:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL0RFDPHI1_VALUE) || defined(__DOXYGEN__)
 255:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL0RFDPHI1_VALUE not defined in clock_cfg.h"
 256:src-gen/sr5e1/clock.h **** #endif
 257:src-gen/sr5e1/clock.h **** 
 258:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL1SRC) || defined(__DOXYGEN__)
 259:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL1SRC not defined in clock_cfg.h"
 260:src-gen/sr5e1/clock.h **** #endif
 261:src-gen/sr5e1/clock.h **** 
 262:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL1MFD_VALUE) || defined(__DOXYGEN__)
 263:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL1MFD_VALUE not defined in clock_cfg.h"
 264:src-gen/sr5e1/clock.h **** #endif
 265:src-gen/sr5e1/clock.h **** 
 266:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_PLL1RFDPHI_VALUE) || defined(__DOXYGEN__)
 267:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_PLL1RFDPHI_VALUE not defined in clock_cfg.h"
 268:src-gen/sr5e1/clock.h **** #endif
 269:src-gen/sr5e1/clock.h **** 
 270:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SW) || defined(__DOXYGEN__)
 271:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW not defined in clock_cfg.h"
 272:src-gen/sr5e1/clock.h **** #endif
 273:src-gen/sr5e1/clock.h **** 
 274:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SYSPRE_VALUE) || defined(__DOXYGEN__)
 275:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SYSPRE_VALUE not defined in clock_cfg.h"
 276:src-gen/sr5e1/clock.h **** #endif
 277:src-gen/sr5e1/clock.h **** 
 278:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_UARTSEL) || defined(__DOXYGEN__)
 279:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTSEL not defined in clock_cfg.h"
 280:src-gen/sr5e1/clock.h **** #endif
 281:src-gen/sr5e1/clock.h **** 
 282:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_I2CSEL) || defined(__DOXYGEN__)
 283:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2CSEL not defined in clock_cfg.h"
 284:src-gen/sr5e1/clock.h **** #endif
 285:src-gen/sr5e1/clock.h **** 
 286:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SPISEL) || defined(__DOXYGEN__)
 287:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SPISEL not defined in clock_cfg.h"
 288:src-gen/sr5e1/clock.h **** #endif
 289:src-gen/sr5e1/clock.h **** 
 290:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_FDCANSEL) || defined(__DOXYGEN__)
 291:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_FDCANSEL not defined in clock_cfg.h"
 292:src-gen/sr5e1/clock.h **** #endif
 293:src-gen/sr5e1/clock.h **** 
 294:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_ADCSEL) || defined(__DOXYGEN__)
 295:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_ADCSEL not defined in clock_cfg.h"
 296:src-gen/sr5e1/clock.h **** #endif
 297:src-gen/sr5e1/clock.h **** 
 298:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SDADCSEL) || defined(__DOXYGEN__)
 299:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SDADCSEL not defined in clock_cfg.h"
 300:src-gen/sr5e1/clock.h **** #endif
 301:src-gen/sr5e1/clock.h **** 
 302:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_MCOSEL) || defined(__DOXYGEN__)
 303:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOSEL not defined in clock_cfg.h"
 304:src-gen/sr5e1/clock.h **** #endif
 305:src-gen/sr5e1/clock.h **** 
 306:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_RTCSEL) || defined(__DOXYGEN__)
 307:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_RTCSEL not defined in clock_cfg.h"
 308:src-gen/sr5e1/clock.h **** #endif
 309:src-gen/sr5e1/clock.h **** 
 310:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_UARTPRE_VALUE) || defined(__DOXYGEN__)
 311:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTPRE_VALUE not defined in clock_cfg.h"
 312:src-gen/sr5e1/clock.h **** #endif
 313:src-gen/sr5e1/clock.h **** 
 314:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_I2CPRE_VALUE) || defined(__DOXYGEN__)
 315:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2CPRE_VALUE not defined in clock_cfg.h"
 316:src-gen/sr5e1/clock.h **** #endif
 317:src-gen/sr5e1/clock.h **** 
 318:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SPIPRE_VALUE) || defined(__DOXYGEN__)
 319:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SPIPRE_VALUE not defined in clock_cfg.h"
 320:src-gen/sr5e1/clock.h **** #endif
 321:src-gen/sr5e1/clock.h **** 
 322:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_FDCANPRE_VALUE) || defined(__DOXYGEN__)
 323:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_FDCANPRE_VALUE not defined in clock_cfg.h"
 324:src-gen/sr5e1/clock.h **** #endif
 325:src-gen/sr5e1/clock.h **** 
 326:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_ADCPRE_VALUE) || defined(__DOXYGEN__)
 327:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_ADCPRE_VALUE not defined in clock_cfg.h"
 328:src-gen/sr5e1/clock.h **** #endif
 329:src-gen/sr5e1/clock.h **** 
 330:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_SDADCPRE_VALUE) || defined(__DOXYGEN__)
 331:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SDADCPRE_VALUE not defined in clock_cfg.h"
 332:src-gen/sr5e1/clock.h **** #endif
 333:src-gen/sr5e1/clock.h **** 
 334:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_MCOPRE_VALUE) || defined(__DOXYGEN__)
 335:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOPRE_VALUE not defined in clock_cfg.h"
 336:src-gen/sr5e1/clock.h **** #endif
 337:src-gen/sr5e1/clock.h **** 
 338:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_LSIPRE_VALUE) || defined(__DOXYGEN__)
 339:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_LSIPRE_VALUE not defined in clock_cfg.h"
 340:src-gen/sr5e1/clock.h **** #endif
 341:src-gen/sr5e1/clock.h **** 
 342:src-gen/sr5e1/clock.h **** /* If SPISEL = I2S_CKIN, the value of I2S clock on the CKIN pin must be
 343:src-gen/sr5e1/clock.h ****    specified in the clock configuration file.*/
 344:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SPISEL == CLOCK_SPISEL_I2S_CKIN)
 345:src-gen/sr5e1/clock.h **** #if !defined(CLOCK_CFG_I2S_CKIN) || defined(__DOXYGEN__)
 346:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2S_CKIN not defined in clock_cfg.h"
 347:src-gen/sr5e1/clock.h **** #endif
 348:src-gen/sr5e1/clock.h **** #endif
 349:src-gen/sr5e1/clock.h **** 
 350:src-gen/sr5e1/clock.h **** /* Clock Limits */
 351:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK_MAX            300000000UL
 352:src-gen/sr5e1/clock.h **** 
 353:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_MAX           40000000UL
 354:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_BYP_MAX       100000000UL
 355:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_MIN           4000000UL
 356:src-gen/sr5e1/clock.h **** #define CLOCK_XOSCCLK_BYP_MIN       4000000UL
 357:src-gen/sr5e1/clock.h **** 
 358:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN_MAX            56000000UL
 359:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN_MIN            8000000UL
 360:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD_MAX           20000000UL
 361:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD_MIN           8000000UL
 362:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0VCO_MAX           1400000000UL
 363:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0VCO_MIN           600000000UL
 364:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI_MAX           700000000UL
 365:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI_MIN           4762000UL
 366:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI1_MAX          175000000UL
 367:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI1_MIN          20000000UL
 368:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN_MAX            87500000UL
 369:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN_MIN            37500000UL
 370:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1VCO_MAX           1400000000UL
 371:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1VCO_MIN           600000000UL
 372:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1PHI_MAX           700000000UL
 373:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1PHI_MIN           4762000UL
 374:src-gen/sr5e1/clock.h **** 
 375:src-gen/sr5e1/clock.h **** #define CLOCK_UARTCLK_MAX           100000000UL
 376:src-gen/sr5e1/clock.h **** #define CLOCK_I2CCLK_MAX            100000000UL
 377:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK_MS_SPI1_4_MAX  50000000UL
 378:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK_MS_SPI2_3_MAX  37500000UL
 379:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK_SL_MAX         50000000UL
 380:src-gen/sr5e1/clock.h **** #define CLOCK_I2SCLK_MAX            100000000UL
 381:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANCLK_MAX          80000000UL
 382:src-gen/sr5e1/clock.h **** #define CLOCK_ADCCLK_MAX            40000000UL
 383:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCCLK_MAX          16000000UL
 384:src-gen/sr5e1/clock.h **** 
 385:src-gen/sr5e1/clock.h **** /*Checks on XOSC.*/
 386:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_XOSC_ENABLED
 387:src-gen/sr5e1/clock.h **** 
 388:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_XOSCCLK == 0U
 389:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_XOSCCLK is zero in clock_cfg.h"
 390:src-gen/sr5e1/clock.h **** #else /* CLOCK_CFG_XOSCCLK != 0 */
 391:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_XOSC_BYPASS
 392:src-gen/sr5e1/clock.h **** 
 393:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_XOSCCLK < CLOCK_XOSCCLK_BYP_MIN) ||                          \
 394:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_XOSCCLK > CLOCK_XOSCCLK_BYP_MAX)
 395:src-gen/sr5e1/clock.h **** #error "out of limits  CLOCK_XOSCCLK value"
 396:src-gen/sr5e1/clock.h **** #endif
 397:src-gen/sr5e1/clock.h **** 
 398:src-gen/sr5e1/clock.h **** #else /* !CLOCK_CFG_XOSC_BYPASS */
 399:src-gen/sr5e1/clock.h **** 
 400:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_XOSCCLK < CLOCK_XOSCCLK_MIN) ||                              \
 401:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_XOSCCLK > CLOCK_XOSCCLK_MAX)
 402:src-gen/sr5e1/clock.h **** #error "out of limits  CLOCK_XOSCCLK value"
 403:src-gen/sr5e1/clock.h **** #endif
 404:src-gen/sr5e1/clock.h **** 
 405:src-gen/sr5e1/clock.h **** #endif /* !CLOCK_CFG_XOSC_BYPASS */
 406:src-gen/sr5e1/clock.h **** #endif /* CLOCK_CFG_XOSCCLK != 0 */
 407:src-gen/sr5e1/clock.h **** 
 408:src-gen/sr5e1/clock.h **** #else /* !CLOCK_CFG_XOSC_ENABLED */
 409:src-gen/sr5e1/clock.h **** 
 410:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SW == CLOCK_SW_XOSC
 411:src-gen/sr5e1/clock.h **** #error "CLOCK_SW requires XOSC"
 412:src-gen/sr5e1/clock.h **** #endif
 413:src-gen/sr5e1/clock.h **** 
 414:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL0PHI) &&                                   \
 415:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)
 416:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW or CLOCK_CFG_PLL0SRC require XOSC"
 417:src-gen/sr5e1/clock.h **** #endif
 418:src-gen/sr5e1/clock.h **** 
 419:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI) &&                                   \
 420:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)
 421:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW or CLOCK_CFG_PLL1SRC require XOSC"
 422:src-gen/sr5e1/clock.h **** #endif
 423:src-gen/sr5e1/clock.h **** 
 424:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI) &&                                   \
 425:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_PLL0PHI1) &&                        \
 426:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)
 427:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SW or CLOCK_CFG_PLL1SRC require XOSC"
 428:src-gen/sr5e1/clock.h **** #endif
 429:src-gen/sr5e1/clock.h **** 
 430:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_XOSC) ||                              \
 431:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL0PHI) &&                          \
 432:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)) ||                          \
 433:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL1PHI) &&                          \
 434:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)) 
 435:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOSEL requires XOSC"
 436:src-gen/sr5e1/clock.h **** #endif
 437:src-gen/sr5e1/clock.h **** 
 438:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_XOSC) ||                            \
 439:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_PLL0PHI) &&                        \
 440:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 441:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTSEL requires XOSC"
 442:src-gen/sr5e1/clock.h **** #endif
 443:src-gen/sr5e1/clock.h **** 
 444:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_XOSC) ||                              \
 445:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_PLL0PHI) &&                          \
 446:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 447:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_I2CSEL requires XOSC"
 448:src-gen/sr5e1/clock.h **** #endif
 449:src-gen/sr5e1/clock.h **** 
 450:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SPISEL == CLOCK_SPISEL_XOSC) ||                              \
 451:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_SPISEL == CLOCK_SPISEL_PLL0PHI) &&                          \
 452:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 453:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SPISEL requires XOSC"
 454:src-gen/sr5e1/clock.h **** #endif
 455:src-gen/sr5e1/clock.h **** 
 456:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_XOSC) ||                          \
 457:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_PLL0PHI) &&                      \
 458:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC))
 459:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_FDCANSEL requires XOSC"
 460:src-gen/sr5e1/clock.h **** #endif
 461:src-gen/sr5e1/clock.h **** 
 462:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_XOSC) ||                              \
 463:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL0PHI) &&                          \
 464:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)) ||                          \
 465:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL1PHI) &&                          \
 466:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)) 
 467:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_ADCSEL requires XOSC"
 468:src-gen/sr5e1/clock.h **** #endif
 469:src-gen/sr5e1/clock.h **** 
 470:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_XOSC) ||                          \
 471:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL0PHI) &&                      \
 472:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC)) ||                          \
 473:src-gen/sr5e1/clock.h ****     ((CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL1PHI) &&                      \
 474:src-gen/sr5e1/clock.h ****      (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC)) 
 475:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_SDADCSEL requires XOSC"
 476:src-gen/sr5e1/clock.h **** #endif
 477:src-gen/sr5e1/clock.h **** 
 478:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_XOSC
 479:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_RTCSEL requires XOSC"
 480:src-gen/sr5e1/clock.h **** #endif
 481:src-gen/sr5e1/clock.h **** 
 482:src-gen/sr5e1/clock.h **** #endif /* CLOCK_CFG_XOSC_ENABLED */
 483:src-gen/sr5e1/clock.h **** 
 484:src-gen/sr5e1/clock.h **** /*
 485:src-gen/sr5e1/clock.h ****  * LSI related checks.
 486:src-gen/sr5e1/clock.h ****  */
 487:src-gen/sr5e1/clock.h **** #if !CLOCK_CFG_LSI_ENABLED
 488:src-gen/sr5e1/clock.h **** 
 489:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_LSI
 490:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_UARTSEL requires LSI"
 491:src-gen/sr5e1/clock.h **** #endif
 492:src-gen/sr5e1/clock.h **** 
 493:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_LSI
 494:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_MCOSEL requires LSI"
 495:src-gen/sr5e1/clock.h **** #endif
 496:src-gen/sr5e1/clock.h **** 
 497:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_LSI
 498:src-gen/sr5e1/clock.h **** #error "CLOCK_CFG_RTCSEL requires LSI"
 499:src-gen/sr5e1/clock.h **** #endif
 500:src-gen/sr5e1/clock.h **** 
 501:src-gen/sr5e1/clock.h **** #endif /* !CLOCK_CFG_LSI_ENABLED */
 502:src-gen/sr5e1/clock.h **** 
 503:src-gen/sr5e1/clock.h **** /* PLL0 enable check.*/
 504:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL0PHI) ||                                   \
 505:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_PLL0PHI1) ||                        \
 506:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL0PHI) ||                           \
 507:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_PLL0PHI) ||                         \
 508:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_PLL0PHI) ||                           \
 509:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_SPISEL == CLOCK_SPISEL_PLL0PHI) ||                           \
 510:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_PLL0PHI) ||                       \
 511:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL0PHI) ||                           \
 512:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL0PHI)
 513:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL0         TRUE
 514:src-gen/sr5e1/clock.h **** #else
 515:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL0         FALSE
 516:src-gen/sr5e1/clock.h **** #endif
 517:src-gen/sr5e1/clock.h **** 
 518:src-gen/sr5e1/clock.h **** /* PLL0 fields.*/
 519:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0MFD_VALUE >= 8U) && (CLOCK_CFG_PLL0MFD_VALUE <= 127U))
 520:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0MFD_VALUE value in clock_cfg.h"
 521:src-gen/sr5e1/clock.h **** #endif
 522:src-gen/sr5e1/clock.h **** 
 523:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0PREDIV_VALUE >= 0U) && (CLOCK_CFG_PLL0PREDIV_VALUE <= 7U))
 524:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0PREDIV_VALUE value in clock_cfg.h"
 525:src-gen/sr5e1/clock.h **** #endif
 526:src-gen/sr5e1/clock.h **** 
 527:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0RFDPHI_VALUE >= 1U) && (CLOCK_CFG_PLL0RFDPHI_VALUE <= 63U))
 528:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0RFDPHI_VALUE value in clock_cfg.h"
 529:src-gen/sr5e1/clock.h **** #endif
 530:src-gen/sr5e1/clock.h **** 
 531:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL0RFDPHI1_VALUE >= 4U) && (CLOCK_CFG_PLL0RFDPHI1_VALUE <= 15U))
 532:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0RFDPHI1_VALUE value in clock_cfg.h"
 533:src-gen/sr5e1/clock.h **** #endif
 534:src-gen/sr5e1/clock.h **** 
 535:src-gen/sr5e1/clock.h **** /* PLL0 input clock.*/
 536:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_XOSC) || defined(__DOXYGEN__)
 537:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN                CLOCK_CFG_XOSCCLK
 538:src-gen/sr5e1/clock.h **** 
 539:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_IRCOSC
 540:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN                CLOCK_IRCOSCCLK
 541:src-gen/sr5e1/clock.h **** 
 542:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL0SRC == CLOCK_PLL0SRC_NOCLOCK
 543:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0IN                0U
 544:src-gen/sr5e1/clock.h **** 
 545:src-gen/sr5e1/clock.h **** #else
 546:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL0SRC value in clock_cfg.h"
 547:src-gen/sr5e1/clock.h **** #endif
 548:src-gen/sr5e1/clock.h **** 
 549:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL0IN == 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE)
 550:src-gen/sr5e1/clock.h **** #error "no PLL input clock"
 551:src-gen/sr5e1/clock.h **** #endif
 552:src-gen/sr5e1/clock.h **** 
 553:src-gen/sr5e1/clock.h **** #if ((CLOCK_PLL0IN != 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE)) &&              \
 554:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0IN < CLOCK_PLL0IN_MIN) || (CLOCK_PLL0IN > CLOCK_PLL0IN_MAX))
 555:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0IN value"
 556:src-gen/sr5e1/clock.h **** #endif
 557:src-gen/sr5e1/clock.h **** 
 558:src-gen/sr5e1/clock.h **** /* PLL0 PFD clock.*/
 559:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_PLL0PREDIV_VALUE == 0U)
 560:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD               0U
 561:src-gen/sr5e1/clock.h **** #else
 562:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PFD                                                       \
 563:src-gen/sr5e1/clock.h ****   (CLOCK_PLL0IN / CLOCK_CFG_PLL0PREDIV_VALUE)
 564:src-gen/sr5e1/clock.h **** #endif
 565:src-gen/sr5e1/clock.h **** 
 566:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL0PFD != 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE) &&               \
 567:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0PFD < CLOCK_PLL0PFD_MIN) || (CLOCK_PLL0PFD > CLOCK_PLL0PFD_MAX))
 568:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0PFD value"
 569:src-gen/sr5e1/clock.h **** #endif
 570:src-gen/sr5e1/clock.h **** 
 571:src-gen/sr5e1/clock.h **** /* PLL0 VCO clock.*/
 572:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0VCO                                                       \
 573:src-gen/sr5e1/clock.h ****   (2U * CLOCK_CFG_PLL0MFD_VALUE * CLOCK_PLL0PFD)
 574:src-gen/sr5e1/clock.h **** 
 575:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL0VCO != 0U) && (CLOCK_ACTIVATE_PLL0 == TRUE) &&               \
 576:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0VCO < CLOCK_PLL0VCO_MIN) || (CLOCK_PLL0VCO > CLOCK_PLL0VCO_MAX))
 577:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0VCO value"
 578:src-gen/sr5e1/clock.h **** #endif
 579:src-gen/sr5e1/clock.h **** 
 580:src-gen/sr5e1/clock.h **** /* PLL0 output clocks.*/
 581:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI                                                       \
 582:src-gen/sr5e1/clock.h ****   ((CLOCK_PLL0VCO / CLOCK_CFG_PLL0RFDPHI_VALUE) / 2U)
 583:src-gen/sr5e1/clock.h **** 
 584:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL0 == TRUE) &&                                        \
 585:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0PHI < CLOCK_PLL0PHI_MIN) || (CLOCK_PLL0PHI > CLOCK_PLL0PHI_MAX))
 586:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0PHI value"
 587:src-gen/sr5e1/clock.h **** #endif
 588:src-gen/sr5e1/clock.h **** 
 589:src-gen/sr5e1/clock.h **** #define CLOCK_PLL0PHI1                                                      \
 590:src-gen/sr5e1/clock.h ****   ((CLOCK_PLL0VCO / CLOCK_CFG_PLL0RFDPHI1_VALUE) / 2U)
 591:src-gen/sr5e1/clock.h **** 
 592:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL0 == TRUE) &&                                        \
 593:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL0PHI1 < CLOCK_PLL0PHI1_MIN) || (CLOCK_PLL0PHI1 > CLOCK_PLL0PHI1_MAX))
 594:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL0PHI1 value"
 595:src-gen/sr5e1/clock.h **** #endif
 596:src-gen/sr5e1/clock.h **** 
 597:src-gen/sr5e1/clock.h **** /* PLL1 enable check.*/
 598:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI) ||                                   \
 599:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL1PHI) ||                           \
 600:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL1PHI) ||                           \
 601:src-gen/sr5e1/clock.h ****     (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL1PHI)
 602:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL1         TRUE
 603:src-gen/sr5e1/clock.h **** #else
 604:src-gen/sr5e1/clock.h **** #define CLOCK_ACTIVATE_PLL1         FALSE
 605:src-gen/sr5e1/clock.h **** #endif
 606:src-gen/sr5e1/clock.h **** 
 607:src-gen/sr5e1/clock.h **** /* PLL1 fields.*/
 608:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL1MFD_VALUE >= 16U) && (CLOCK_CFG_PLL1MFD_VALUE <= 34U))
 609:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL1MFD_VALUE value in clock_cfg.h"
 610:src-gen/sr5e1/clock.h **** #endif
 611:src-gen/sr5e1/clock.h **** 
 612:src-gen/sr5e1/clock.h **** #if !((CLOCK_CFG_PLL1RFDPHI_VALUE >= 1U) && (CLOCK_CFG_PLL1RFDPHI_VALUE <= 63U))
 613:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL1RFDPHI_VALUE value in clock_cfg.h"
 614:src-gen/sr5e1/clock.h **** #endif
 615:src-gen/sr5e1/clock.h **** 
 616:src-gen/sr5e1/clock.h **** /* PLL1 input clock.*/
 617:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_PLL0PHI1) || defined(__DOXYGEN__)
 618:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN                CLOCK_PLL0PHI1
 619:src-gen/sr5e1/clock.h **** 
 620:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_XOSC
 621:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN                CLOCK_CFG_XOSCCLK
 622:src-gen/sr5e1/clock.h **** 
 623:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_PLL1SRC == CLOCK_PLL1SRC_NOCLOCK
 624:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1IN                0U
 625:src-gen/sr5e1/clock.h **** 
 626:src-gen/sr5e1/clock.h **** #else
 627:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_PLL1SRC value in clock_cfg.h"
 628:src-gen/sr5e1/clock.h **** #endif
 629:src-gen/sr5e1/clock.h **** 
 630:src-gen/sr5e1/clock.h **** #if (CLOCK_PLL1IN == 0U && CLOCK_ACTIVATE_PLL1 == TRUE)
 631:src-gen/sr5e1/clock.h **** #error "no PLL input clock"
 632:src-gen/sr5e1/clock.h **** #endif
 633:src-gen/sr5e1/clock.h **** 
 634:src-gen/sr5e1/clock.h **** #if ((CLOCK_PLL1IN != 0U) && (CLOCK_ACTIVATE_PLL1 == TRUE)) &&              \
 635:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL1IN < CLOCK_PLL1IN_MIN) || (CLOCK_PLL1IN > CLOCK_PLL1IN_MAX))
 636:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL1IN value"
 637:src-gen/sr5e1/clock.h **** #endif
 638:src-gen/sr5e1/clock.h **** 
 639:src-gen/sr5e1/clock.h **** /* PLL1 VCO clock.*/
 640:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1VCO                                                       \
 641:src-gen/sr5e1/clock.h ****   (CLOCK_PLL1IN * CLOCK_CFG_PLL1MFD_VALUE)
 642:src-gen/sr5e1/clock.h **** 
 643:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL1 == TRUE) &&                                        \
 644:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL1VCO < CLOCK_PLL1VCO_MIN) || (CLOCK_PLL1VCO > CLOCK_PLL1VCO_MAX))
 645:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL1VCO value"
 646:src-gen/sr5e1/clock.h **** #endif
 647:src-gen/sr5e1/clock.h **** 
 648:src-gen/sr5e1/clock.h **** /* PLL1 output clock.*/
 649:src-gen/sr5e1/clock.h **** #define CLOCK_PLL1PHI                                                       \
 650:src-gen/sr5e1/clock.h ****   ((CLOCK_PLL1VCO / CLOCK_CFG_PLL1RFDPHI_VALUE) / 2U)
 651:src-gen/sr5e1/clock.h **** 
 652:src-gen/sr5e1/clock.h **** #if (CLOCK_ACTIVATE_PLL1 == TRUE) &&                                        \
 653:src-gen/sr5e1/clock.h ****     ((CLOCK_PLL1PHI < CLOCK_PLL1PHI_MIN) || (CLOCK_PLL1PHI > CLOCK_PLL1PHI_MAX))
 654:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_PLL1PHI value"
 655:src-gen/sr5e1/clock.h **** #endif
 656:src-gen/sr5e1/clock.h **** 
 657:src-gen/sr5e1/clock.h **** /* SYSCLK source.*/
 658:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SW == CLOCK_SW_IRCOSC) || defined(__DOXYGEN__)
 659:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_IRCOSCCLK
 660:src-gen/sr5e1/clock.h **** 
 661:src-gen/sr5e1/clock.h **** #elif (CLOCK_CFG_SW == CLOCK_SW_XOSC)
 662:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_CFG_XOSCCLK
 663:src-gen/sr5e1/clock.h **** 
 664:src-gen/sr5e1/clock.h **** #elif (CLOCK_CFG_SW == CLOCK_SW_PLL0PHI)
 665:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_PLL0PHI
 666:src-gen/sr5e1/clock.h **** 
 667:src-gen/sr5e1/clock.h **** #elif (CLOCK_CFG_SW == CLOCK_SW_PLL1PHI)
 668:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLK                CLOCK_PLL1PHI
 669:src-gen/sr5e1/clock.h **** 
 670:src-gen/sr5e1/clock.h **** #else
 671:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SW value in clock_cfg.h"
 672:src-gen/sr5e1/clock.h **** #endif
 673:src-gen/sr5e1/clock.h **** 
 674:src-gen/sr5e1/clock.h **** /* SYSCLK check.*/
 675:src-gen/sr5e1/clock.h **** #if CLOCK_SYSCLK > CLOCK_SYSCLK_MAX
 676:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_SYSCLK value"
 677:src-gen/sr5e1/clock.h **** #endif
 678:src-gen/sr5e1/clock.h **** 
 679:src-gen/sr5e1/clock.h **** /* SYSCLKDIV source.*/
 680:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_SYSPRE_VALUE >= 0U) && (CLOCK_CFG_SYSPRE_VALUE <= 511U))
 681:src-gen/sr5e1/clock.h **** #define CLOCK_SYSCLKDIV             (CLOCK_SYSCLK / (CLOCK_CFG_SYSPRE_VALUE + 1U))
 682:src-gen/sr5e1/clock.h **** #else
 683:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SYSPRE_VALUE value in clock_cfg.h"
 684:src-gen/sr5e1/clock.h **** #endif
 685:src-gen/sr5e1/clock.h **** 
 686:src-gen/sr5e1/clock.h **** /* APB1 frequency.*/
 687:src-gen/sr5e1/clock.h **** #define CLOCK_PCLK1                 (CLOCK_SYSCLKDIV / 4U)
 688:src-gen/sr5e1/clock.h **** 
 689:src-gen/sr5e1/clock.h **** /* APB2 frequency.*/
 690:src-gen/sr5e1/clock.h **** #define CLOCK_PCLK2                 (CLOCK_SYSCLKDIV / 2U)
 691:src-gen/sr5e1/clock.h **** 
 692:src-gen/sr5e1/clock.h **** /**
 693:src-gen/sr5e1/clock.h ****  * @brief   TIM clock.
 694:src-gen/sr5e1/clock.h ****  */
 695:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK1               (CLOCK_PCLK2 * 2U)
 696:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK2               (CLOCK_PCLK1 * 2U)
 697:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK3               (CLOCK_PCLK1 * 2U)
 698:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK4               (CLOCK_PCLK2 * 2U)
 699:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK5               (CLOCK_PCLK2 * 2U)
 700:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK6               (CLOCK_PCLK1 * 2U)
 701:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK7               (CLOCK_PCLK1 * 2U)
 702:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK8               (CLOCK_PCLK2 * 2U)
 703:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK15              (CLOCK_PCLK2 * 2U)
 704:src-gen/sr5e1/clock.h **** #define CLOCK_TIMCLK16              (CLOCK_PCLK2 * 2U)
 705:src-gen/sr5e1/clock.h **** #define CLOCK_TIMTSCLK              (CLOCK_PCLK1 * 2U)
 706:src-gen/sr5e1/clock.h **** 
 707:src-gen/sr5e1/clock.h **** /**
 708:src-gen/sr5e1/clock.h ****  * @brief   MCO divider clock frequency.
 709:src-gen/sr5e1/clock.h ****  */
 710:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_NOCLOCK) || defined(__DOXYGEN__)
 711:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             0U
 712:src-gen/sr5e1/clock.h **** 
 713:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_LSI
 714:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_LSICLK
 715:src-gen/sr5e1/clock.h **** 
 716:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_IRCOSC
 717:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_IRCOSCCLK
 718:src-gen/sr5e1/clock.h **** 
 719:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_XOSC
 720:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_CFG_XOSCCLK
 721:src-gen/sr5e1/clock.h **** 
 722:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL0PHI
 723:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_PLL0PHI
 724:src-gen/sr5e1/clock.h **** 
 725:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_MCOSEL == CLOCK_MCOSEL_PLL1PHI
 726:src-gen/sr5e1/clock.h **** #define CLOCK_MCODIVCLK             CLOCK_PLL1PHI
 727:src-gen/sr5e1/clock.h **** 
 728:src-gen/sr5e1/clock.h **** #else
 729:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_MCOSEL value in clock_cfg.h"
 730:src-gen/sr5e1/clock.h **** #endif
 731:src-gen/sr5e1/clock.h **** 
 732:src-gen/sr5e1/clock.h **** /**
 733:src-gen/sr5e1/clock.h ****  * @brief   MCO output pin clock frequency.
 734:src-gen/sr5e1/clock.h ****  */
 735:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_MCOPRE_VALUE == 0U)
 736:src-gen/sr5e1/clock.h **** #define CLOCK_MCOCLK                CLOCK_MCODIVCLK
 737:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_MCOPRE_VALUE > 0U) && (CLOCK_CFG_MCOPRE_VALUE <= 63U))
 738:src-gen/sr5e1/clock.h **** #define CLOCK_MCOCLK                (CLOCK_MCODIVCLK / (2U * CLOCK_CFG_MCOPRE_VALUE))
 739:src-gen/sr5e1/clock.h **** #else
 740:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_MCOPRE_VALUE value in clock_cfg.h"
 741:src-gen/sr5e1/clock.h **** #endif
 742:src-gen/sr5e1/clock.h **** 
 743:src-gen/sr5e1/clock.h **** /**
 744:src-gen/sr5e1/clock.h ****  * @brief   RTC clock.
 745:src-gen/sr5e1/clock.h ****  */
 746:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_LSIPRE_VALUE == 0U)
 747:src-gen/sr5e1/clock.h **** #define CLOCK_LSIDIVCLK             CLOCK_LSICLK
 748:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_LSIPRE_VALUE > 0U) && (CLOCK_CFG_LSIPRE_VALUE <= 31U))
 749:src-gen/sr5e1/clock.h **** #define CLOCK_LSIDIVCLK             (CLOCK_LSICLK / (2U * CLOCK_CFG_LSIPRE_VALUE))
 750:src-gen/sr5e1/clock.h **** #else
 751:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_LSIPRE_VALUE value in clock_cfg.h"
 752:src-gen/sr5e1/clock.h **** #endif
 753:src-gen/sr5e1/clock.h **** 
 754:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_NOCLOCK) || defined(__DOXYGEN__)
 755:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSELCLK             0U
 756:src-gen/sr5e1/clock.h **** 
 757:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_LSI
 758:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSELCLK             CLOCK_LSIDIVCLK
 759:src-gen/sr5e1/clock.h **** 
 760:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_RTCSEL == CLOCK_RTCSEL_XOSC
 761:src-gen/sr5e1/clock.h **** #define CLOCK_RTCSELCLK             CLOCK_CFG_XOSCCLK
 762:src-gen/sr5e1/clock.h **** 
 763:src-gen/sr5e1/clock.h **** #else
 764:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_RTCSEL value in clock_cfg.h"
 765:src-gen/sr5e1/clock.h **** #endif
 766:src-gen/sr5e1/clock.h **** 
 767:src-gen/sr5e1/clock.h **** /**
 768:src-gen/sr5e1/clock.h ****  * @brief   UART clock.
 769:src-gen/sr5e1/clock.h ****  */
 770:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_NOCLOCK) || defined(__DOXYGEN__)
 771:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            0U
 772:src-gen/sr5e1/clock.h **** 
 773:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_IRCOSC
 774:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_IRCOSCCLK
 775:src-gen/sr5e1/clock.h **** 
 776:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_XOSC
 777:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_CFG_XOSCCLK
 778:src-gen/sr5e1/clock.h **** 
 779:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_PLL0PHI
 780:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_PLL0PHI
 781:src-gen/sr5e1/clock.h **** 
 782:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_UARTSEL == CLOCK_UARTSEL_LSI
 783:src-gen/sr5e1/clock.h **** #define CLOCK_UARTSELCLK            CLOCK_LSICLK
 784:src-gen/sr5e1/clock.h **** 
 785:src-gen/sr5e1/clock.h **** #else
 786:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_UARTSEL value in clock_cfg.h"
 787:src-gen/sr5e1/clock.h **** #endif
 788:src-gen/sr5e1/clock.h **** 
 789:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_UARTPRE_VALUE >= 0U) && (CLOCK_CFG_UARTPRE_VALUE <= 31U))
 790:src-gen/sr5e1/clock.h **** #define CLOCK_UARTCLK               (CLOCK_UARTSELCLK / (CLOCK_CFG_UARTPRE_VALUE + 1U))
 791:src-gen/sr5e1/clock.h **** #else
 792:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_UARTPRE_VALUE value in clock_cfg.h"
 793:src-gen/sr5e1/clock.h **** #endif
 794:src-gen/sr5e1/clock.h **** 
 795:src-gen/sr5e1/clock.h **** #if CLOCK_UARTCLK > CLOCK_UARTCLK_MAX
 796:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_UARTCLK value"
 797:src-gen/sr5e1/clock.h **** #endif
 798:src-gen/sr5e1/clock.h **** 
 799:src-gen/sr5e1/clock.h **** #define CLOCK_UART1CLK              CLOCK_UARTCLK
 800:src-gen/sr5e1/clock.h **** #define CLOCK_UART2CLK              CLOCK_UARTCLK
 801:src-gen/sr5e1/clock.h **** #define CLOCK_UART3CLK              CLOCK_UARTCLK
 802:src-gen/sr5e1/clock.h **** 
 803:src-gen/sr5e1/clock.h **** /**
 804:src-gen/sr5e1/clock.h ****  * @brief   I2C clock.
 805:src-gen/sr5e1/clock.h ****  */
 806:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_NOCLOCK) || defined(__DOXYGEN__)
 807:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             0U
 808:src-gen/sr5e1/clock.h **** 
 809:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_IRCOSC
 810:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             CLOCK_IRCOSCCLK
 811:src-gen/sr5e1/clock.h **** 
 812:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_XOSC
 813:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             CLOCK_CFG_XOSCCLK
 814:src-gen/sr5e1/clock.h **** 
 815:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_I2CSEL == CLOCK_I2CSEL_PLL0PHI
 816:src-gen/sr5e1/clock.h **** #define CLOCK_I2CSELCLK             CLOCK_PLL0PHI
 817:src-gen/sr5e1/clock.h **** 
 818:src-gen/sr5e1/clock.h **** #else
 819:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_I2CSEL value in clock_cfg.h"
 820:src-gen/sr5e1/clock.h **** #endif
 821:src-gen/sr5e1/clock.h **** 
 822:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_I2CPRE_VALUE >= 0U) && (CLOCK_CFG_I2CPRE_VALUE <= 31U))
 823:src-gen/sr5e1/clock.h **** #define CLOCK_I2CCLK                (CLOCK_I2CSELCLK / (CLOCK_CFG_I2CPRE_VALUE + 1U))
 824:src-gen/sr5e1/clock.h **** #else
 825:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_I2CPRE_VALUE value in clock_cfg.h"
 826:src-gen/sr5e1/clock.h **** #endif
 827:src-gen/sr5e1/clock.h **** 
 828:src-gen/sr5e1/clock.h **** #if CLOCK_I2CCLK > CLOCK_I2CCLK_MAX
 829:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_I2CCLK value"
 830:src-gen/sr5e1/clock.h **** #endif
 831:src-gen/sr5e1/clock.h **** 
 832:src-gen/sr5e1/clock.h **** /**
 833:src-gen/sr5e1/clock.h ****  * @brief   SPI/I2S clock.
 834:src-gen/sr5e1/clock.h ****  */
 835:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SPISEL == CLOCK_SPISEL_NOCLOCK) || defined(__DOXYGEN__)
 836:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             0U
 837:src-gen/sr5e1/clock.h **** 
 838:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_IRCOSC
 839:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_IRCOSCCLK
 840:src-gen/sr5e1/clock.h **** 
 841:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_XOSC
 842:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_CFG_XOSCCLK
 843:src-gen/sr5e1/clock.h **** 
 844:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_PLL0PHI
 845:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_PLL0PHI
 846:src-gen/sr5e1/clock.h **** 
 847:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SPISEL == CLOCK_SPISEL_I2S_CKIN
 848:src-gen/sr5e1/clock.h **** #define CLOCK_SPISELCLK             CLOCK_CFG_I2S_CKIN
 849:src-gen/sr5e1/clock.h **** 
 850:src-gen/sr5e1/clock.h **** #else
 851:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SPISEL value in clock_cfg.h"
 852:src-gen/sr5e1/clock.h **** #endif
 853:src-gen/sr5e1/clock.h **** 
 854:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_SPIPRE_VALUE >= 0U) && (CLOCK_CFG_SPIPRE_VALUE <= 31U))
 855:src-gen/sr5e1/clock.h **** #define CLOCK_SPICLK                (CLOCK_SPISELCLK / (CLOCK_CFG_SPIPRE_VALUE + 1U))
 856:src-gen/sr5e1/clock.h **** #else
 857:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SPIPRE_VALUE value in clock_cfg.h"
 858:src-gen/sr5e1/clock.h **** #endif
 859:src-gen/sr5e1/clock.h **** 
 860:src-gen/sr5e1/clock.h **** #define CLOCK_SPI1CLK               CLOCK_PCLK2
 861:src-gen/sr5e1/clock.h **** #define CLOCK_SPI2CLK               CLOCK_PCLK1
 862:src-gen/sr5e1/clock.h **** #define CLOCK_SPI3CLK               CLOCK_PCLK1
 863:src-gen/sr5e1/clock.h **** #define CLOCK_SPI4CLK               CLOCK_PCLK2
 864:src-gen/sr5e1/clock.h **** #define CLOCK_I2S2CLK               CLOCK_SPICLK
 865:src-gen/sr5e1/clock.h **** #define CLOCK_I2S3CLK               CLOCK_SPICLK
 866:src-gen/sr5e1/clock.h **** 
 867:src-gen/sr5e1/clock.h **** /**
 868:src-gen/sr5e1/clock.h ****  * @brief   FDCAN clock.
 869:src-gen/sr5e1/clock.h ****  */
 870:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_NOCLOCK) || defined(__DOXYGEN__)
 871:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSELCLK           0U
 872:src-gen/sr5e1/clock.h **** 
 873:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_XOSC
 874:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSELCLK           CLOCK_CFG_XOSCCLK
 875:src-gen/sr5e1/clock.h **** 
 876:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_FDCANSEL == CLOCK_FDCANSEL_PLL0PHI
 877:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANSELCLK           CLOCK_PLL0PHI
 878:src-gen/sr5e1/clock.h **** 
 879:src-gen/sr5e1/clock.h **** #else
 880:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_FDCANSEL value in clock_cfg.h"
 881:src-gen/sr5e1/clock.h **** #endif
 882:src-gen/sr5e1/clock.h **** 
 883:src-gen/sr5e1/clock.h **** #if ((CLOCK_CFG_FDCANPRE_VALUE >= 0U) && (CLOCK_CFG_FDCANPRE_VALUE <= 31U))
 884:src-gen/sr5e1/clock.h **** #define CLOCK_FDCANCLK              (CLOCK_FDCANSELCLK / (CLOCK_CFG_FDCANPRE_VALUE + 1U))
 885:src-gen/sr5e1/clock.h **** #else
 886:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_FDCANPRE_VALUE value in clock_cfg.h"
 887:src-gen/sr5e1/clock.h **** #endif
 888:src-gen/sr5e1/clock.h **** 
 889:src-gen/sr5e1/clock.h **** #if CLOCK_FDCANCLK > CLOCK_FDCANCLK_MAX
 890:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_FDCANCLK value"
 891:src-gen/sr5e1/clock.h **** #endif
 892:src-gen/sr5e1/clock.h **** 
 893:src-gen/sr5e1/clock.h **** /**
 894:src-gen/sr5e1/clock.h ****  * @brief   ADC clock.
 895:src-gen/sr5e1/clock.h ****  */
 896:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_NOCLOCK) || defined(__DOXYGEN__)
 897:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             0U
 898:src-gen/sr5e1/clock.h **** 
 899:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_XOSC
 900:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             CLOCK_CFG_XOSCCLK
 901:src-gen/sr5e1/clock.h **** 
 902:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL0PHI
 903:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             CLOCK_PLL0PHI
 904:src-gen/sr5e1/clock.h **** 
 905:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_ADCSEL == CLOCK_ADCSEL_PLL1PHI
 906:src-gen/sr5e1/clock.h **** #define CLOCK_ADCSELCLK             CLOCK_PLL1PHI
 907:src-gen/sr5e1/clock.h **** 
 908:src-gen/sr5e1/clock.h **** #else
 909:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_ADCSEL value in clock_cfg.h"
 910:src-gen/sr5e1/clock.h **** #endif
 911:src-gen/sr5e1/clock.h **** /* The range of values of ADCPRE must be verified */
 912:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_ADCPRE_VALUE == 0U)
 913:src-gen/sr5e1/clock.h **** #define CLOCK_ADCCLK                CLOCK_ADCSELCLK
 914:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_ADCPRE_VALUE > 0U) && (CLOCK_CFG_ADCPRE_VALUE <= 63U))
 915:src-gen/sr5e1/clock.h **** #define CLOCK_ADCCLK                (CLOCK_ADCSELCLK / (2U * CLOCK_CFG_ADCPRE_VALUE))
 916:src-gen/sr5e1/clock.h **** #else
 917:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_ADCPRE_VALUE value in clock_cfg.h"
 918:src-gen/sr5e1/clock.h **** #endif
 919:src-gen/sr5e1/clock.h **** 
 920:src-gen/sr5e1/clock.h **** #if CLOCK_ADCCLK > CLOCK_ADCCLK_MAX
 921:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_ADCCLK value"
 922:src-gen/sr5e1/clock.h **** #endif
 923:src-gen/sr5e1/clock.h **** 
 924:src-gen/sr5e1/clock.h **** #define CLOCK_ADC12CLK              CLOCK_ADCCLK
 925:src-gen/sr5e1/clock.h **** #define CLOCK_ADC345CLK             CLOCK_ADCCLK
 926:src-gen/sr5e1/clock.h **** 
 927:src-gen/sr5e1/clock.h **** /**
 928:src-gen/sr5e1/clock.h ****  * @brief   SDADC clock.
 929:src-gen/sr5e1/clock.h ****  */
 930:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_NOCLOCK) || defined(__DOXYGEN__)
 931:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           0U
 932:src-gen/sr5e1/clock.h **** 
 933:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_XOSC
 934:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           CLOCK_CFG_XOSCCLK
 935:src-gen/sr5e1/clock.h **** 
 936:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL0PHI
 937:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           CLOCK_PLL0PHI
 938:src-gen/sr5e1/clock.h **** 
 939:src-gen/sr5e1/clock.h **** #elif CLOCK_CFG_SDADCSEL == CLOCK_SDADCSEL_PLL1PHI
 940:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCSELCLK           CLOCK_PLL1PHI
 941:src-gen/sr5e1/clock.h **** 
 942:src-gen/sr5e1/clock.h **** #else
 943:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SDADCSEL value in clock_cfg.h"
 944:src-gen/sr5e1/clock.h **** #endif
 945:src-gen/sr5e1/clock.h **** /* The range of values of SDADCPRE must be verified */
 946:src-gen/sr5e1/clock.h **** #if (CLOCK_CFG_SDADCPRE_VALUE == 0U)
 947:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCCLK              CLOCK_SDADCSELCLK
 948:src-gen/sr5e1/clock.h **** #elif ((CLOCK_CFG_SDADCPRE_VALUE > 0U) && (CLOCK_CFG_SDADCPRE_VALUE <= 63U))
 949:src-gen/sr5e1/clock.h **** #define CLOCK_SDADCCLK              (CLOCK_SDADCSELCLK / (2U * CLOCK_CFG_SDADCPRE_VALUE))
 950:src-gen/sr5e1/clock.h **** #else
 951:src-gen/sr5e1/clock.h **** #error "invalid CLOCK_CFG_SDADCPRE_VALUE value in clock_cfg.h"
 952:src-gen/sr5e1/clock.h **** #endif
 953:src-gen/sr5e1/clock.h **** 
 954:src-gen/sr5e1/clock.h **** #if CLOCK_SDADCCLK > CLOCK_SDADCCLK_MAX
 955:src-gen/sr5e1/clock.h **** #error "out of limits CLOCK_SDADCCLK value"
 956:src-gen/sr5e1/clock.h **** #endif
 957:src-gen/sr5e1/clock.h **** 
 958:src-gen/sr5e1/clock.h **** /* Flash wait state (APC = 0) settings.*/
 959:src-gen/sr5e1/clock.h **** #if (CLOCK_SYSCLKDIV <= 136000000UL) || defined(__DOXYGEN__)
 960:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         3U /* 0 < core frequency < 136MHz  */
 961:src-gen/sr5e1/clock.h **** 
 962:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 170000000UL)
 963:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         4U /* 136MHz < core_freq <= 170MHz */
 964:src-gen/sr5e1/clock.h **** 
 965:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 204000000UL)
 966:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         5U /* 170MHz < core_freq <= 204MHz */
 967:src-gen/sr5e1/clock.h **** 
 968:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 238000000UL)
 969:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         6U /* 204MHz < core_freq <= 238MHz */
 970:src-gen/sr5e1/clock.h **** 
 971:src-gen/sr5e1/clock.h **** #elif (CLOCK_SYSCLKDIV <= 273000000UL)
 972:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         7U /* 238MHz < core_freq <= 273MHz */
 973:src-gen/sr5e1/clock.h **** 
 974:src-gen/sr5e1/clock.h **** #else
 975:src-gen/sr5e1/clock.h **** #define CLOCK_NVMRWSC_VALUE         8U /* 273MHz < core_freq <= 307MHz */
 976:src-gen/sr5e1/clock.h **** 
 977:src-gen/sr5e1/clock.h **** #endif
 978:src-gen/sr5e1/clock.h **** 
 979:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 980:src-gen/sr5e1/clock.h **** /* Module data structures and types.                                         */
 981:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 982:src-gen/sr5e1/clock.h **** 
 983:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 984:src-gen/sr5e1/clock.h **** /* Module macros.                                                            */
 985:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 986:src-gen/sr5e1/clock.h **** 
 987:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 988:src-gen/sr5e1/clock.h **** /* External declarations.                                                    */
 989:src-gen/sr5e1/clock.h **** /*===========================================================================*/
 990:src-gen/sr5e1/clock.h **** 
 991:src-gen/sr5e1/clock.h **** /**
 992:src-gen/sr5e1/clock.h ****  * @brief   CMSIS system core clock variable.
 993:src-gen/sr5e1/clock.h ****  */
 994:src-gen/sr5e1/clock.h **** extern uint32_t SystemCoreClock;
 995:src-gen/sr5e1/clock.h **** 
 996:src-gen/sr5e1/clock.h **** #ifdef __cplusplus
 997:src-gen/sr5e1/clock.h **** extern "C" {
 998:src-gen/sr5e1/clock.h **** #endif
 999:src-gen/sr5e1/clock.h **** 
1000:src-gen/sr5e1/clock.h **** /**
1001:src-gen/sr5e1/clock.h ****  * @brief   Initializes clock
1002:src-gen/sr5e1/clock.h ****  *
1003:src-gen/sr5e1/clock.h ****  * @api
1004:src-gen/sr5e1/clock.h ****  */
1005:src-gen/sr5e1/clock.h **** void clock_init(void);
1006:src-gen/sr5e1/clock.h **** 
1007:src-gen/sr5e1/clock.h **** #ifdef __cplusplus
1008:src-gen/sr5e1/clock.h **** }
1009:src-gen/sr5e1/clock.h **** #endif
1010:src-gen/sr5e1/clock.h **** 
1011:src-gen/sr5e1/clock.h **** /*===========================================================================*/
1012:src-gen/sr5e1/clock.h **** /* Module inline functions.                                                  */
1013:src-gen/sr5e1/clock.h **** /*===========================================================================*/
1014:src-gen/sr5e1/clock.h **** 
1015:src-gen/sr5e1/clock.h **** /**
1016:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB1 peripherals clock [Low Word]
1017:src-gen/sr5e1/clock.h ****  *
1018:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1019:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1020:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1021:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1LENR after the update
1022:src-gen/sr5e1/clock.h ****  *
1023:src-gen/sr5e1/clock.h ****  * @api
1024:src-gen/sr5e1/clock.h ****  */
1025:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB1L(bool smode, uint32_t m) {
1026:src-gen/sr5e1/clock.h **** 
1027:src-gen/sr5e1/clock.h ****     RCC->AHB1LENR |= m;
1028:src-gen/sr5e1/clock.h ****     if (smode) {
1029:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1LSMENR |= m;
1030:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1031:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1LSMENR |= m;
1032:src-gen/sr5e1/clock.h **** #endif
1033:src-gen/sr5e1/clock.h ****     }
1034:src-gen/sr5e1/clock.h ****     else {
1035:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1LSMENR &= ~m;
1036:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1037:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1LSMENR &= ~m;
1038:src-gen/sr5e1/clock.h **** #endif
1039:src-gen/sr5e1/clock.h ****     }
1040:src-gen/sr5e1/clock.h **** 
1041:src-gen/sr5e1/clock.h ****     return RCC->AHB1LENR;
1042:src-gen/sr5e1/clock.h **** }
1043:src-gen/sr5e1/clock.h **** 
1044:src-gen/sr5e1/clock.h **** /**
1045:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB1 peripherals clock [Low Word]
1046:src-gen/sr5e1/clock.h ****  *
1047:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1048:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1LENR after the update
1049:src-gen/sr5e1/clock.h ****  *
1050:src-gen/sr5e1/clock.h ****  * @api
1051:src-gen/sr5e1/clock.h ****  */
1052:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB1L(uint32_t m) {
1053:src-gen/sr5e1/clock.h **** 
1054:src-gen/sr5e1/clock.h ****     RCC->AHB1LENR &= ~m;
1055:src-gen/sr5e1/clock.h ****     RCC->C1_AHB1LSMENR &= ~m;
1056:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1057:src-gen/sr5e1/clock.h ****     RCC->C2_AHB1LSMENR &= ~m;
1058:src-gen/sr5e1/clock.h **** #endif
1059:src-gen/sr5e1/clock.h **** 
1060:src-gen/sr5e1/clock.h ****     return RCC->AHB1LENR;
1061:src-gen/sr5e1/clock.h **** }
1062:src-gen/sr5e1/clock.h **** 
1063:src-gen/sr5e1/clock.h **** /**
1064:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB1 peripheral clock [Low Word] is enabled
1065:src-gen/sr5e1/clock.h ****  *
1066:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1067:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1068:src-gen/sr5e1/clock.h ****  *
1069:src-gen/sr5e1/clock.h ****  * @api
1070:src-gen/sr5e1/clock.h ****  */
1071:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB1L(uint32_t m) {
1072:src-gen/sr5e1/clock.h **** 
1073:src-gen/sr5e1/clock.h ****     return (((RCC->AHB1LENR & m) == m) ? true : false);
1074:src-gen/sr5e1/clock.h **** }
1075:src-gen/sr5e1/clock.h **** 
1076:src-gen/sr5e1/clock.h **** /**
1077:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB1 peripherals [Low Word]
1078:src-gen/sr5e1/clock.h ****  *
1079:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1080:src-gen/sr5e1/clock.h ****  *
1081:src-gen/sr5e1/clock.h ****  * @api
1082:src-gen/sr5e1/clock.h ****  */
1083:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB1L(uint32_t m) {
1084:src-gen/sr5e1/clock.h **** 
1085:src-gen/sr5e1/clock.h ****     RCC->AHB1LRSTR |= m;
  85              		.loc 2 1085 20
  86 000a 4FF08843 		mov	r3, #1140850688
  87 000e 1A6D     		ldr	r2, [r3, #80]
  88 0010 4FF08841 		mov	r1, #1140850688
  89 0014 019B     		ldr	r3, [sp, #4]
  90 0016 1343     		orrs	r3, r3, r2
  91 0018 0B65     		str	r3, [r1, #80]
1086:src-gen/sr5e1/clock.h ****     RCC->AHB1LRSTR &= ~m;
  92              		.loc 2 1086 20
  93 001a 4FF08843 		mov	r3, #1140850688
  94 001e 1A6D     		ldr	r2, [r3, #80]
  95              		.loc 2 1086 23
  96 0020 019B     		ldr	r3, [sp, #4]
  97 0022 DB43     		mvns	r3, r3
  98              		.loc 2 1086 20
  99 0024 4FF08841 		mov	r1, #1140850688
 100 0028 1340     		ands	r3, r3, r2
 101 002a 0B65     		str	r3, [r1, #80]
1087:src-gen/sr5e1/clock.h ****     (void)RCC->AHB1LRSTR;
 102              		.loc 2 1087 14
 103 002c 4FF08843 		mov	r3, #1140850688
 104              		.loc 2 1087 5
 105 0030 1B6D     		ldr	r3, [r3, #80]
1088:src-gen/sr5e1/clock.h **** }
 106              		.loc 2 1088 1
 107 0032 00BF     		nop
 108 0034 4FF0FF33 		mov	r3, #-1
 109 0038 0293     		str	r3, [sp, #8]
 110              	.LBE21:
 111              	.LBE20:
 112              	.LBB22:
 113              	.LBB23:
1089:src-gen/sr5e1/clock.h **** 
1090:src-gen/sr5e1/clock.h **** /**
1091:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB1 peripherals clock [High Word]
1092:src-gen/sr5e1/clock.h ****  *
1093:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1094:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1095:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1096:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1HENR after the update
1097:src-gen/sr5e1/clock.h ****  *
1098:src-gen/sr5e1/clock.h ****  * @api
1099:src-gen/sr5e1/clock.h ****  */
1100:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB1H(bool smode, uint32_t m) {
1101:src-gen/sr5e1/clock.h **** 
1102:src-gen/sr5e1/clock.h ****     RCC->AHB1HENR |= m;
1103:src-gen/sr5e1/clock.h ****     if (smode) {
1104:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1HSMENR |= m;
1105:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1106:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1HSMENR |= m;
1107:src-gen/sr5e1/clock.h **** #endif
1108:src-gen/sr5e1/clock.h ****     }
1109:src-gen/sr5e1/clock.h ****     else {
1110:src-gen/sr5e1/clock.h ****         RCC->C1_AHB1HSMENR &= ~m;
1111:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1112:src-gen/sr5e1/clock.h ****         RCC->C2_AHB1HSMENR &= ~m;
1113:src-gen/sr5e1/clock.h **** #endif
1114:src-gen/sr5e1/clock.h ****     }
1115:src-gen/sr5e1/clock.h **** 
1116:src-gen/sr5e1/clock.h ****     return RCC->AHB1HENR;
1117:src-gen/sr5e1/clock.h **** }
1118:src-gen/sr5e1/clock.h **** 
1119:src-gen/sr5e1/clock.h **** /**
1120:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB1 peripherals clock [High Word]
1121:src-gen/sr5e1/clock.h ****  *
1122:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1123:src-gen/sr5e1/clock.h ****  * @return              value of register AHB1HENR after the update
1124:src-gen/sr5e1/clock.h ****  *
1125:src-gen/sr5e1/clock.h ****  * @api
1126:src-gen/sr5e1/clock.h ****  */
1127:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB1H(uint32_t m) {
1128:src-gen/sr5e1/clock.h **** 
1129:src-gen/sr5e1/clock.h ****     RCC->AHB1HENR &= ~m;
1130:src-gen/sr5e1/clock.h ****     RCC->C1_AHB1HSMENR &= ~m;
1131:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1132:src-gen/sr5e1/clock.h ****     RCC->C2_AHB1HSMENR &= ~m;
1133:src-gen/sr5e1/clock.h **** #endif
1134:src-gen/sr5e1/clock.h **** 
1135:src-gen/sr5e1/clock.h ****     return RCC->AHB1HENR;
1136:src-gen/sr5e1/clock.h **** }
1137:src-gen/sr5e1/clock.h **** 
1138:src-gen/sr5e1/clock.h **** /**
1139:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB1 peripheral clock [High Word] is enabled
1140:src-gen/sr5e1/clock.h ****  *
1141:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1142:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1143:src-gen/sr5e1/clock.h ****  *
1144:src-gen/sr5e1/clock.h ****  * @api
1145:src-gen/sr5e1/clock.h ****  */
1146:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB1H(uint32_t m) {
1147:src-gen/sr5e1/clock.h **** 
1148:src-gen/sr5e1/clock.h ****     return (((RCC->AHB1HENR & m) == m) ? true : false);
1149:src-gen/sr5e1/clock.h **** }
1150:src-gen/sr5e1/clock.h **** 
1151:src-gen/sr5e1/clock.h **** /**
1152:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB1 peripherals [High Word]
1153:src-gen/sr5e1/clock.h ****  *
1154:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1155:src-gen/sr5e1/clock.h ****  *
1156:src-gen/sr5e1/clock.h ****  * @api
1157:src-gen/sr5e1/clock.h ****  */
1158:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB1H(uint32_t m) {
1159:src-gen/sr5e1/clock.h **** 
1160:src-gen/sr5e1/clock.h ****     RCC->AHB1HRSTR |= m;
 114              		.loc 2 1160 20
 115 003a 4FF08843 		mov	r3, #1140850688
 116 003e 5A6D     		ldr	r2, [r3, #84]
 117 0040 4FF08841 		mov	r1, #1140850688
 118 0044 029B     		ldr	r3, [sp, #8]
 119 0046 1343     		orrs	r3, r3, r2
 120 0048 4B65     		str	r3, [r1, #84]
1161:src-gen/sr5e1/clock.h ****     RCC->AHB1HRSTR &= ~m;
 121              		.loc 2 1161 20
 122 004a 4FF08843 		mov	r3, #1140850688
 123 004e 5A6D     		ldr	r2, [r3, #84]
 124              		.loc 2 1161 23
 125 0050 029B     		ldr	r3, [sp, #8]
 126 0052 DB43     		mvns	r3, r3
 127              		.loc 2 1161 20
 128 0054 4FF08841 		mov	r1, #1140850688
 129 0058 1340     		ands	r3, r3, r2
 130 005a 4B65     		str	r3, [r1, #84]
1162:src-gen/sr5e1/clock.h ****     (void)RCC->AHB1HRSTR;
 131              		.loc 2 1162 14
 132 005c 4FF08843 		mov	r3, #1140850688
 133              		.loc 2 1162 5
 134 0060 5B6D     		ldr	r3, [r3, #84]
1163:src-gen/sr5e1/clock.h **** }
 135              		.loc 2 1163 1
 136 0062 00BF     		nop
 137 0064 B84B     		ldr	r3, .L16
 138 0066 0393     		str	r3, [sp, #12]
 139              	.LBE23:
 140              	.LBE22:
 141              	.LBB24:
 142              	.LBB25:
1164:src-gen/sr5e1/clock.h **** 
1165:src-gen/sr5e1/clock.h **** /**
1166:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB2 peripherals clock [Low Word]
1167:src-gen/sr5e1/clock.h ****  *
1168:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1169:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1170:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1171:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2LENR after the update
1172:src-gen/sr5e1/clock.h ****  *
1173:src-gen/sr5e1/clock.h ****  * @api
1174:src-gen/sr5e1/clock.h ****  */
1175:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB2L(bool smode, uint32_t m) {
1176:src-gen/sr5e1/clock.h **** 
1177:src-gen/sr5e1/clock.h ****     RCC->AHB2LENR |= m;
1178:src-gen/sr5e1/clock.h ****     if (smode) {
1179:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2LSMENR |= m;
1180:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1181:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2LSMENR |= m;
1182:src-gen/sr5e1/clock.h **** #endif
1183:src-gen/sr5e1/clock.h ****     }
1184:src-gen/sr5e1/clock.h ****     else {
1185:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2LSMENR &= ~m;
1186:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1187:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2LSMENR &= ~m;
1188:src-gen/sr5e1/clock.h **** #endif
1189:src-gen/sr5e1/clock.h ****     }
1190:src-gen/sr5e1/clock.h **** 
1191:src-gen/sr5e1/clock.h ****     return RCC->AHB2LENR;
1192:src-gen/sr5e1/clock.h **** }
1193:src-gen/sr5e1/clock.h **** 
1194:src-gen/sr5e1/clock.h **** /**
1195:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB2 peripherals clock [Low Word]
1196:src-gen/sr5e1/clock.h ****  *
1197:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1198:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2LENR after the update
1199:src-gen/sr5e1/clock.h ****  *
1200:src-gen/sr5e1/clock.h ****  * @api
1201:src-gen/sr5e1/clock.h ****  */
1202:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB2L(uint32_t m) {
1203:src-gen/sr5e1/clock.h **** 
1204:src-gen/sr5e1/clock.h ****     RCC->AHB2LENR &= ~m;
1205:src-gen/sr5e1/clock.h ****     RCC->C1_AHB2LSMENR &= ~m;
1206:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1207:src-gen/sr5e1/clock.h ****     RCC->C2_AHB2LSMENR &= ~m;
1208:src-gen/sr5e1/clock.h **** #endif
1209:src-gen/sr5e1/clock.h **** 
1210:src-gen/sr5e1/clock.h ****     return RCC->AHB2LENR;
1211:src-gen/sr5e1/clock.h **** }
1212:src-gen/sr5e1/clock.h **** 
1213:src-gen/sr5e1/clock.h **** /**
1214:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB2 peripheral clock [Low Word] is enabled
1215:src-gen/sr5e1/clock.h ****  *
1216:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1217:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1218:src-gen/sr5e1/clock.h ****  *
1219:src-gen/sr5e1/clock.h ****  * @api
1220:src-gen/sr5e1/clock.h ****  */
1221:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB2L(uint32_t m) {
1222:src-gen/sr5e1/clock.h **** 
1223:src-gen/sr5e1/clock.h ****     return (((RCC->AHB2LENR & m) == m) ? true : false);
1224:src-gen/sr5e1/clock.h **** }
1225:src-gen/sr5e1/clock.h **** 
1226:src-gen/sr5e1/clock.h **** /**
1227:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB2 peripherals [Low Word]
1228:src-gen/sr5e1/clock.h ****  *
1229:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1230:src-gen/sr5e1/clock.h ****  *
1231:src-gen/sr5e1/clock.h ****  * @api
1232:src-gen/sr5e1/clock.h ****  */
1233:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB2L(uint32_t m) {
1234:src-gen/sr5e1/clock.h **** 
1235:src-gen/sr5e1/clock.h ****     RCC->AHB2LRSTR |= m;
 143              		.loc 2 1235 20
 144 0068 4FF08843 		mov	r3, #1140850688
 145 006c 9A6D     		ldr	r2, [r3, #88]
 146 006e 4FF08841 		mov	r1, #1140850688
 147 0072 039B     		ldr	r3, [sp, #12]
 148 0074 1343     		orrs	r3, r3, r2
 149 0076 8B65     		str	r3, [r1, #88]
1236:src-gen/sr5e1/clock.h ****     RCC->AHB2LRSTR &= ~m;
 150              		.loc 2 1236 20
 151 0078 4FF08843 		mov	r3, #1140850688
 152 007c 9A6D     		ldr	r2, [r3, #88]
 153              		.loc 2 1236 23
 154 007e 039B     		ldr	r3, [sp, #12]
 155 0080 DB43     		mvns	r3, r3
 156              		.loc 2 1236 20
 157 0082 4FF08841 		mov	r1, #1140850688
 158 0086 1340     		ands	r3, r3, r2
 159 0088 8B65     		str	r3, [r1, #88]
1237:src-gen/sr5e1/clock.h ****     (void)RCC->AHB2LRSTR;
 160              		.loc 2 1237 14
 161 008a 4FF08843 		mov	r3, #1140850688
 162              		.loc 2 1237 5
 163 008e 9B6D     		ldr	r3, [r3, #88]
1238:src-gen/sr5e1/clock.h **** }
 164              		.loc 2 1238 1
 165 0090 00BF     		nop
 166 0092 4FF0FF33 		mov	r3, #-1
 167 0096 0493     		str	r3, [sp, #16]
 168              	.LBE25:
 169              	.LBE24:
 170              	.LBB26:
 171              	.LBB27:
1239:src-gen/sr5e1/clock.h **** 
1240:src-gen/sr5e1/clock.h **** /**
1241:src-gen/sr5e1/clock.h ****  * @brief   Enables AHB2 peripherals clock [High Word]
1242:src-gen/sr5e1/clock.h ****  *
1243:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1244:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1245:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1246:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2HENR after the update
1247:src-gen/sr5e1/clock.h ****  *
1248:src-gen/sr5e1/clock.h ****  * @api
1249:src-gen/sr5e1/clock.h ****  */
1250:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_AHB2H(bool smode, uint32_t m) {
1251:src-gen/sr5e1/clock.h **** 
1252:src-gen/sr5e1/clock.h ****     RCC->AHB2HENR |= m;
1253:src-gen/sr5e1/clock.h ****     if (smode) {
1254:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2HSMENR |= m;
1255:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1256:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2HSMENR |= m;
1257:src-gen/sr5e1/clock.h **** #endif
1258:src-gen/sr5e1/clock.h ****     }
1259:src-gen/sr5e1/clock.h ****     else {
1260:src-gen/sr5e1/clock.h ****         RCC->C1_AHB2HSMENR &= ~m;
1261:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1262:src-gen/sr5e1/clock.h ****         RCC->C2_AHB2HSMENR &= ~m;
1263:src-gen/sr5e1/clock.h **** #endif
1264:src-gen/sr5e1/clock.h ****     }
1265:src-gen/sr5e1/clock.h **** 
1266:src-gen/sr5e1/clock.h ****     return RCC->AHB2HENR;
1267:src-gen/sr5e1/clock.h **** }
1268:src-gen/sr5e1/clock.h **** 
1269:src-gen/sr5e1/clock.h **** /**
1270:src-gen/sr5e1/clock.h ****  * @brief   Disables AHB2 peripherals clock [High Word]
1271:src-gen/sr5e1/clock.h ****  *
1272:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1273:src-gen/sr5e1/clock.h ****  * @return              value of register AHB2HENR after the update
1274:src-gen/sr5e1/clock.h ****  *
1275:src-gen/sr5e1/clock.h ****  * @api
1276:src-gen/sr5e1/clock.h ****  */
1277:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_AHB2H(uint32_t m) {
1278:src-gen/sr5e1/clock.h **** 
1279:src-gen/sr5e1/clock.h ****     RCC->AHB2HENR &= ~m;
1280:src-gen/sr5e1/clock.h ****     RCC->C1_AHB2HSMENR &= ~m;
1281:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1282:src-gen/sr5e1/clock.h ****     RCC->C2_AHB2HSMENR &= ~m;
1283:src-gen/sr5e1/clock.h **** #endif
1284:src-gen/sr5e1/clock.h **** 
1285:src-gen/sr5e1/clock.h ****     return RCC->AHB2HENR;
1286:src-gen/sr5e1/clock.h **** }
1287:src-gen/sr5e1/clock.h **** 
1288:src-gen/sr5e1/clock.h **** /**
1289:src-gen/sr5e1/clock.h ****  * @brief   Checks if AHB2 peripheral clock [High Word] is enabled
1290:src-gen/sr5e1/clock.h ****  *
1291:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1292:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1293:src-gen/sr5e1/clock.h ****  *
1294:src-gen/sr5e1/clock.h ****  * @api
1295:src-gen/sr5e1/clock.h ****  */
1296:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_AHB2H(uint32_t m) {
1297:src-gen/sr5e1/clock.h **** 
1298:src-gen/sr5e1/clock.h ****     return (((RCC->AHB2HENR & m) == m) ? true : false);
1299:src-gen/sr5e1/clock.h **** }
1300:src-gen/sr5e1/clock.h **** 
1301:src-gen/sr5e1/clock.h **** /**
1302:src-gen/sr5e1/clock.h ****  * @brief   Resets AHB2 peripherals [High Word]
1303:src-gen/sr5e1/clock.h ****  *
1304:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1305:src-gen/sr5e1/clock.h ****  *
1306:src-gen/sr5e1/clock.h ****  * @api
1307:src-gen/sr5e1/clock.h ****  */
1308:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_AHB2H(uint32_t m) {
1309:src-gen/sr5e1/clock.h **** 
1310:src-gen/sr5e1/clock.h ****     RCC->AHB2HRSTR |= m;
 172              		.loc 2 1310 20
 173 0098 4FF08843 		mov	r3, #1140850688
 174 009c DA6D     		ldr	r2, [r3, #92]
 175 009e 4FF08841 		mov	r1, #1140850688
 176 00a2 049B     		ldr	r3, [sp, #16]
 177 00a4 1343     		orrs	r3, r3, r2
 178 00a6 CB65     		str	r3, [r1, #92]
1311:src-gen/sr5e1/clock.h ****     RCC->AHB2HRSTR &= ~m;
 179              		.loc 2 1311 20
 180 00a8 4FF08843 		mov	r3, #1140850688
 181 00ac DA6D     		ldr	r2, [r3, #92]
 182              		.loc 2 1311 23
 183 00ae 049B     		ldr	r3, [sp, #16]
 184 00b0 DB43     		mvns	r3, r3
 185              		.loc 2 1311 20
 186 00b2 4FF08841 		mov	r1, #1140850688
 187 00b6 1340     		ands	r3, r3, r2
 188 00b8 CB65     		str	r3, [r1, #92]
1312:src-gen/sr5e1/clock.h ****     (void)RCC->AHB2HRSTR;
 189              		.loc 2 1312 14
 190 00ba 4FF08843 		mov	r3, #1140850688
 191              		.loc 2 1312 5
 192 00be DB6D     		ldr	r3, [r3, #92]
1313:src-gen/sr5e1/clock.h **** }
 193              		.loc 2 1313 1
 194 00c0 00BF     		nop
 195 00c2 4FF0FF33 		mov	r3, #-1
 196 00c6 0593     		str	r3, [sp, #20]
 197              	.LBE27:
 198              	.LBE26:
 199              	.LBB28:
 200              	.LBB29:
1314:src-gen/sr5e1/clock.h **** 
1315:src-gen/sr5e1/clock.h **** /**
1316:src-gen/sr5e1/clock.h ****  * @brief   Enables APB1 peripherals clock [Low Word]
1317:src-gen/sr5e1/clock.h ****  *
1318:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1319:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1320:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1321:src-gen/sr5e1/clock.h ****  * @return              value of register APB1LENR after the update
1322:src-gen/sr5e1/clock.h ****  *
1323:src-gen/sr5e1/clock.h ****  * @api
1324:src-gen/sr5e1/clock.h ****  */
1325:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_APB1L(bool smode, uint32_t m) {
1326:src-gen/sr5e1/clock.h **** 
1327:src-gen/sr5e1/clock.h ****     RCC->APB1LENR |= m;
1328:src-gen/sr5e1/clock.h ****     if (smode) {
1329:src-gen/sr5e1/clock.h ****         RCC->C1_APB1LSMENR |= m;
1330:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1331:src-gen/sr5e1/clock.h ****         RCC->C2_APB1LSMENR |= m;
1332:src-gen/sr5e1/clock.h **** #endif
1333:src-gen/sr5e1/clock.h ****     }
1334:src-gen/sr5e1/clock.h ****     else {
1335:src-gen/sr5e1/clock.h ****         RCC->C1_APB1LSMENR &= ~m;
1336:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1337:src-gen/sr5e1/clock.h ****         RCC->C2_APB1LSMENR &= ~m;
1338:src-gen/sr5e1/clock.h **** #endif
1339:src-gen/sr5e1/clock.h ****     }
1340:src-gen/sr5e1/clock.h **** 
1341:src-gen/sr5e1/clock.h ****     return RCC->APB1LENR;
1342:src-gen/sr5e1/clock.h **** }
1343:src-gen/sr5e1/clock.h **** 
1344:src-gen/sr5e1/clock.h **** /**
1345:src-gen/sr5e1/clock.h ****  * @brief   Disables APB1 peripherals clock [Low Word]
1346:src-gen/sr5e1/clock.h ****  *
1347:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1348:src-gen/sr5e1/clock.h ****  * @return              value of register APB1LENR after the update
1349:src-gen/sr5e1/clock.h ****  *
1350:src-gen/sr5e1/clock.h ****  * @api
1351:src-gen/sr5e1/clock.h ****  */
1352:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_APB1L(uint32_t m) {
1353:src-gen/sr5e1/clock.h **** 
1354:src-gen/sr5e1/clock.h ****     RCC->APB1LENR &= ~m;
1355:src-gen/sr5e1/clock.h ****     RCC->C1_APB1LSMENR &= ~m;
1356:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1357:src-gen/sr5e1/clock.h ****     RCC->C2_APB1LSMENR &= ~m;
1358:src-gen/sr5e1/clock.h **** #endif
1359:src-gen/sr5e1/clock.h **** 
1360:src-gen/sr5e1/clock.h ****     return RCC->APB1LENR;
1361:src-gen/sr5e1/clock.h **** }
1362:src-gen/sr5e1/clock.h **** 
1363:src-gen/sr5e1/clock.h **** /**
1364:src-gen/sr5e1/clock.h ****  * @brief   Checks if APB1 peripheral clock [Low Word] is enabled
1365:src-gen/sr5e1/clock.h ****  *
1366:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1367:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1368:src-gen/sr5e1/clock.h ****  *
1369:src-gen/sr5e1/clock.h ****  * @api
1370:src-gen/sr5e1/clock.h ****  */
1371:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_APB1L(uint32_t m) {
1372:src-gen/sr5e1/clock.h **** 
1373:src-gen/sr5e1/clock.h ****     return (((RCC->APB1LENR & m) == m) ? true : false);
1374:src-gen/sr5e1/clock.h **** }
1375:src-gen/sr5e1/clock.h **** 
1376:src-gen/sr5e1/clock.h **** /**
1377:src-gen/sr5e1/clock.h ****  * @brief   Resets APB1 peripherals [Low Word]
1378:src-gen/sr5e1/clock.h ****  *
1379:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1380:src-gen/sr5e1/clock.h ****  *
1381:src-gen/sr5e1/clock.h ****  * @api
1382:src-gen/sr5e1/clock.h ****  */
1383:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_APB1L(uint32_t m) {
1384:src-gen/sr5e1/clock.h **** 
1385:src-gen/sr5e1/clock.h ****     RCC->APB1LRSTR |= m;
 201              		.loc 2 1385 20
 202 00c8 4FF08843 		mov	r3, #1140850688
 203 00cc 1A6E     		ldr	r2, [r3, #96]
 204 00ce 4FF08841 		mov	r1, #1140850688
 205 00d2 059B     		ldr	r3, [sp, #20]
 206 00d4 1343     		orrs	r3, r3, r2
 207 00d6 0B66     		str	r3, [r1, #96]
1386:src-gen/sr5e1/clock.h ****     RCC->APB1LRSTR &= ~m;
 208              		.loc 2 1386 20
 209 00d8 4FF08843 		mov	r3, #1140850688
 210 00dc 1A6E     		ldr	r2, [r3, #96]
 211              		.loc 2 1386 23
 212 00de 059B     		ldr	r3, [sp, #20]
 213 00e0 DB43     		mvns	r3, r3
 214              		.loc 2 1386 20
 215 00e2 4FF08841 		mov	r1, #1140850688
 216 00e6 1340     		ands	r3, r3, r2
 217 00e8 0B66     		str	r3, [r1, #96]
1387:src-gen/sr5e1/clock.h ****     (void)RCC->APB1LRSTR;
 218              		.loc 2 1387 14
 219 00ea 4FF08843 		mov	r3, #1140850688
 220              		.loc 2 1387 5
 221 00ee 1B6E     		ldr	r3, [r3, #96]
1388:src-gen/sr5e1/clock.h **** }
 222              		.loc 2 1388 1
 223 00f0 00BF     		nop
 224 00f2 4FF0FF33 		mov	r3, #-1
 225 00f6 0693     		str	r3, [sp, #24]
 226              	.LBE29:
 227              	.LBE28:
 228              	.LBB30:
 229              	.LBB31:
1389:src-gen/sr5e1/clock.h **** 
1390:src-gen/sr5e1/clock.h **** /**
1391:src-gen/sr5e1/clock.h ****  * @brief   Enables APB2 peripherals clock [Low Word]
1392:src-gen/sr5e1/clock.h ****  *
1393:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1394:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1395:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1396:src-gen/sr5e1/clock.h ****  * @return              value of register APB2LENR after the update
1397:src-gen/sr5e1/clock.h ****  *
1398:src-gen/sr5e1/clock.h ****  * @api
1399:src-gen/sr5e1/clock.h ****  */
1400:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_APB2L(bool smode, uint32_t m) {
1401:src-gen/sr5e1/clock.h **** 
1402:src-gen/sr5e1/clock.h ****     RCC->APB2LENR |= m;
1403:src-gen/sr5e1/clock.h ****     if (smode) {
1404:src-gen/sr5e1/clock.h ****         RCC->C1_APB2LSMENR |= m;
1405:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1406:src-gen/sr5e1/clock.h ****         RCC->C2_APB2LSMENR |= m;
1407:src-gen/sr5e1/clock.h **** #endif
1408:src-gen/sr5e1/clock.h ****     }
1409:src-gen/sr5e1/clock.h ****     else {
1410:src-gen/sr5e1/clock.h ****         RCC->C1_APB2LSMENR &= ~m;
1411:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1412:src-gen/sr5e1/clock.h ****         RCC->C2_APB2LSMENR &= ~m;
1413:src-gen/sr5e1/clock.h **** #endif
1414:src-gen/sr5e1/clock.h ****     }
1415:src-gen/sr5e1/clock.h **** 
1416:src-gen/sr5e1/clock.h ****     return RCC->APB2LENR;
1417:src-gen/sr5e1/clock.h **** }
1418:src-gen/sr5e1/clock.h **** 
1419:src-gen/sr5e1/clock.h **** /**
1420:src-gen/sr5e1/clock.h ****  * @brief   Disables APB2 peripherals clock [Low Word]
1421:src-gen/sr5e1/clock.h ****  *
1422:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1423:src-gen/sr5e1/clock.h ****  * @return              value of register APB2LENR after the update
1424:src-gen/sr5e1/clock.h ****  *
1425:src-gen/sr5e1/clock.h ****  * @api
1426:src-gen/sr5e1/clock.h ****  */
1427:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_APB2L(uint32_t m) {
1428:src-gen/sr5e1/clock.h **** 
1429:src-gen/sr5e1/clock.h ****     RCC->APB2LENR &= ~m;
1430:src-gen/sr5e1/clock.h ****     RCC->C1_APB2LSMENR &= ~m;
1431:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1432:src-gen/sr5e1/clock.h ****     RCC->C2_APB2LSMENR &= ~m;
1433:src-gen/sr5e1/clock.h **** #endif
1434:src-gen/sr5e1/clock.h **** 
1435:src-gen/sr5e1/clock.h ****     return RCC->APB2LENR;
1436:src-gen/sr5e1/clock.h **** }
1437:src-gen/sr5e1/clock.h **** 
1438:src-gen/sr5e1/clock.h **** /**
1439:src-gen/sr5e1/clock.h ****  * @brief   Checks if APB2 peripheral clock [Low Word] is enabled
1440:src-gen/sr5e1/clock.h ****  *
1441:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1442:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1443:src-gen/sr5e1/clock.h ****  *
1444:src-gen/sr5e1/clock.h ****  * @api
1445:src-gen/sr5e1/clock.h ****  */
1446:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_APB2L(uint32_t m) {
1447:src-gen/sr5e1/clock.h **** 
1448:src-gen/sr5e1/clock.h ****     return (((RCC->APB2LENR & m) == m) ? true : false);
1449:src-gen/sr5e1/clock.h **** }
1450:src-gen/sr5e1/clock.h **** 
1451:src-gen/sr5e1/clock.h **** /**
1452:src-gen/sr5e1/clock.h ****  * @brief   Resets APB2 peripherals [Low Word]
1453:src-gen/sr5e1/clock.h ****  *
1454:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1455:src-gen/sr5e1/clock.h ****  *
1456:src-gen/sr5e1/clock.h ****  * @api
1457:src-gen/sr5e1/clock.h ****  */
1458:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_APB2L(uint32_t m) {
1459:src-gen/sr5e1/clock.h **** 
1460:src-gen/sr5e1/clock.h ****     RCC->APB2LRSTR |= m;
 230              		.loc 2 1460 20
 231 00f8 4FF08843 		mov	r3, #1140850688
 232 00fc 9A6E     		ldr	r2, [r3, #104]
 233 00fe 4FF08841 		mov	r1, #1140850688
 234 0102 069B     		ldr	r3, [sp, #24]
 235 0104 1343     		orrs	r3, r3, r2
 236 0106 8B66     		str	r3, [r1, #104]
1461:src-gen/sr5e1/clock.h ****     RCC->APB2LRSTR &= ~m;
 237              		.loc 2 1461 20
 238 0108 4FF08843 		mov	r3, #1140850688
 239 010c 9A6E     		ldr	r2, [r3, #104]
 240              		.loc 2 1461 23
 241 010e 069B     		ldr	r3, [sp, #24]
 242 0110 DB43     		mvns	r3, r3
 243              		.loc 2 1461 20
 244 0112 4FF08841 		mov	r1, #1140850688
 245 0116 1340     		ands	r3, r3, r2
 246 0118 8B66     		str	r3, [r1, #104]
1462:src-gen/sr5e1/clock.h ****     (void)RCC->APB2LRSTR;
 247              		.loc 2 1462 14
 248 011a 4FF08843 		mov	r3, #1140850688
 249              		.loc 2 1462 5
 250 011e 9B6E     		ldr	r3, [r3, #104]
1463:src-gen/sr5e1/clock.h **** }
 251              		.loc 2 1463 1
 252 0120 00BF     		nop
 253 0122 4FF0FF33 		mov	r3, #-1
 254 0126 0793     		str	r3, [sp, #28]
 255              	.LBE31:
 256              	.LBE30:
 257              	.LBB32:
 258              	.LBB33:
1464:src-gen/sr5e1/clock.h **** 
1465:src-gen/sr5e1/clock.h **** /**
1466:src-gen/sr5e1/clock.h ****  * @brief   Enables APB2 peripherals clock [High Word]
1467:src-gen/sr5e1/clock.h ****  *
1468:src-gen/sr5e1/clock.h ****  * @param[in] smode     sleep mode (if true, peripheral clock is enabled in
1469:src-gen/sr5e1/clock.h ****  *                      sleep mode)
1470:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be enabled
1471:src-gen/sr5e1/clock.h ****  * @return              value of register APB2HENR after the update
1472:src-gen/sr5e1/clock.h ****  *
1473:src-gen/sr5e1/clock.h ****  * @api
1474:src-gen/sr5e1/clock.h ****  */
1475:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_enable_APB2H(bool smode, uint32_t m) {
1476:src-gen/sr5e1/clock.h **** 
1477:src-gen/sr5e1/clock.h ****     RCC->APB2HENR |= m;
1478:src-gen/sr5e1/clock.h ****     if (smode) {
1479:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR |= m;
1480:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1481:src-gen/sr5e1/clock.h ****         RCC->C2_APB2HSMENR |= m;
1482:src-gen/sr5e1/clock.h **** #endif
1483:src-gen/sr5e1/clock.h ****     }
1484:src-gen/sr5e1/clock.h ****     else {
1485:src-gen/sr5e1/clock.h ****         RCC->C1_APB2HSMENR &= ~m;
1486:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1487:src-gen/sr5e1/clock.h ****         RCC->C2_APB2HSMENR &= ~m;
1488:src-gen/sr5e1/clock.h **** #endif
1489:src-gen/sr5e1/clock.h ****     }
1490:src-gen/sr5e1/clock.h **** 
1491:src-gen/sr5e1/clock.h ****     return RCC->APB2HENR;
1492:src-gen/sr5e1/clock.h **** }
1493:src-gen/sr5e1/clock.h **** 
1494:src-gen/sr5e1/clock.h **** /**
1495:src-gen/sr5e1/clock.h ****  * @brief   Disables APB2 peripherals clock [High Word]
1496:src-gen/sr5e1/clock.h ****  *
1497:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be disabled
1498:src-gen/sr5e1/clock.h ****  * @return              value of register APB2HENR after the update
1499:src-gen/sr5e1/clock.h ****  *
1500:src-gen/sr5e1/clock.h ****  * @api
1501:src-gen/sr5e1/clock.h ****  */
1502:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE uint32_t clock_disable_APB2H(uint32_t m) {
1503:src-gen/sr5e1/clock.h **** 
1504:src-gen/sr5e1/clock.h ****     RCC->APB2HENR &= ~m;
1505:src-gen/sr5e1/clock.h ****     RCC->C1_APB2HSMENR &= ~m;
1506:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
1507:src-gen/sr5e1/clock.h ****     RCC->C2_APB2HSMENR &= ~m;
1508:src-gen/sr5e1/clock.h **** #endif
1509:src-gen/sr5e1/clock.h **** 
1510:src-gen/sr5e1/clock.h ****     return RCC->APB2HENR;
1511:src-gen/sr5e1/clock.h **** }
1512:src-gen/sr5e1/clock.h **** 
1513:src-gen/sr5e1/clock.h **** /**
1514:src-gen/sr5e1/clock.h ****  * @brief   Checks if APB2 peripheral clock [High Word] is enabled
1515:src-gen/sr5e1/clock.h ****  *
1516:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral clock to be checked
1517:src-gen/sr5e1/clock.h ****  * @return              true if the clock is enabled, false otherwise
1518:src-gen/sr5e1/clock.h ****  *
1519:src-gen/sr5e1/clock.h ****  * @api
1520:src-gen/sr5e1/clock.h ****  */
1521:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE bool is_clock_enable_APB2H(uint32_t m) {
1522:src-gen/sr5e1/clock.h **** 
1523:src-gen/sr5e1/clock.h ****     return (((RCC->APB2HENR & m) == m) ? true : false);
1524:src-gen/sr5e1/clock.h **** }
1525:src-gen/sr5e1/clock.h **** 
1526:src-gen/sr5e1/clock.h **** /**
1527:src-gen/sr5e1/clock.h ****  * @brief   Resets APB2 peripherals [High Word]
1528:src-gen/sr5e1/clock.h ****  *
1529:src-gen/sr5e1/clock.h ****  * @param[in] m         peripheral to reset
1530:src-gen/sr5e1/clock.h ****  *
1531:src-gen/sr5e1/clock.h ****  * @api
1532:src-gen/sr5e1/clock.h ****  */
1533:src-gen/sr5e1/clock.h **** __STATIC_FORCEINLINE void clock_reset_APB2H(uint32_t m) {
1534:src-gen/sr5e1/clock.h **** 
1535:src-gen/sr5e1/clock.h ****     RCC->APB2HRSTR |= m;
 259              		.loc 2 1535 20
 260 0128 4FF08843 		mov	r3, #1140850688
 261 012c DA6E     		ldr	r2, [r3, #108]
 262 012e 4FF08841 		mov	r1, #1140850688
 263 0132 079B     		ldr	r3, [sp, #28]
 264 0134 1343     		orrs	r3, r3, r2
 265 0136 CB66     		str	r3, [r1, #108]
1536:src-gen/sr5e1/clock.h ****     RCC->APB2HRSTR &= ~m;
 266              		.loc 2 1536 20
 267 0138 4FF08843 		mov	r3, #1140850688
 268 013c DA6E     		ldr	r2, [r3, #108]
 269              		.loc 2 1536 23
 270 013e 079B     		ldr	r3, [sp, #28]
 271 0140 DB43     		mvns	r3, r3
 272              		.loc 2 1536 20
 273 0142 4FF08841 		mov	r1, #1140850688
 274 0146 1340     		ands	r3, r3, r2
 275 0148 CB66     		str	r3, [r1, #108]
1537:src-gen/sr5e1/clock.h ****     (void)RCC->APB2HRSTR;
 276              		.loc 2 1537 14
 277 014a 4FF08843 		mov	r3, #1140850688
 278              		.loc 2 1537 5
 279 014e DB6E     		ldr	r3, [r3, #108]
1538:src-gen/sr5e1/clock.h **** }
 280              		.loc 2 1538 1
 281 0150 00BF     		nop
 282 0152 0023     		movs	r3, #0
 283 0154 8DF82730 		strb	r3, [sp, #39]
 284 0158 4FF48063 		mov	r3, #1024
 285 015c 0893     		str	r3, [sp, #32]
 286              	.LBE33:
 287              	.LBE32:
 288              	.LBB34:
 289              	.LBB35:
1327:src-gen/sr5e1/clock.h ****     if (smode) {
 290              		.loc 2 1327 19
 291 015e 4FF08843 		mov	r3, #1140850688
 292 0162 D3F88020 		ldr	r2, [r3, #128]
 293 0166 4FF08841 		mov	r1, #1140850688
 294 016a 089B     		ldr	r3, [sp, #32]
 295 016c 1343     		orrs	r3, r3, r2
 296 016e C1F88030 		str	r3, [r1, #128]
1328:src-gen/sr5e1/clock.h ****         RCC->C1_APB1LSMENR |= m;
 297              		.loc 2 1328 8
 298 0172 9DF82730 		ldrb	r3, [sp, #39]	@ zero_extendqisi2
 299 0176 002B     		cmp	r3, #0
 300 0178 14D0     		beq	.L5
1329:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 301              		.loc 2 1329 28
 302 017a 4FF08843 		mov	r3, #1140850688
 303 017e D3F8A020 		ldr	r2, [r3, #160]
 304 0182 4FF08841 		mov	r1, #1140850688
 305 0186 089B     		ldr	r3, [sp, #32]
 306 0188 1343     		orrs	r3, r3, r2
 307 018a C1F8A030 		str	r3, [r1, #160]
1331:src-gen/sr5e1/clock.h **** #endif
 308              		.loc 2 1331 28
 309 018e 4FF08843 		mov	r3, #1140850688
 310 0192 D3F8C020 		ldr	r2, [r3, #192]
 311 0196 4FF08841 		mov	r1, #1140850688
 312 019a 089B     		ldr	r3, [sp, #32]
 313 019c 1343     		orrs	r3, r3, r2
 314 019e C1F8C030 		str	r3, [r1, #192]
 315 01a2 15E0     		b	.L6
 316              	.L5:
1335:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 317              		.loc 2 1335 28
 318 01a4 4FF08843 		mov	r3, #1140850688
 319 01a8 D3F8A020 		ldr	r2, [r3, #160]
1335:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 320              		.loc 2 1335 31
 321 01ac 089B     		ldr	r3, [sp, #32]
 322 01ae DB43     		mvns	r3, r3
1335:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 323              		.loc 2 1335 28
 324 01b0 4FF08841 		mov	r1, #1140850688
 325 01b4 1340     		ands	r3, r3, r2
 326 01b6 C1F8A030 		str	r3, [r1, #160]
1337:src-gen/sr5e1/clock.h **** #endif
 327              		.loc 2 1337 28
 328 01ba 4FF08843 		mov	r3, #1140850688
 329 01be D3F8C020 		ldr	r2, [r3, #192]
1337:src-gen/sr5e1/clock.h **** #endif
 330              		.loc 2 1337 31
 331 01c2 089B     		ldr	r3, [sp, #32]
 332 01c4 DB43     		mvns	r3, r3
1337:src-gen/sr5e1/clock.h **** #endif
 333              		.loc 2 1337 28
 334 01c6 4FF08841 		mov	r1, #1140850688
 335 01ca 1340     		ands	r3, r3, r2
 336 01cc C1F8C030 		str	r3, [r1, #192]
 337              	.L6:
1341:src-gen/sr5e1/clock.h **** }
 338              		.loc 2 1341 15
 339 01d0 4FF08843 		mov	r3, #1140850688
 340 01d4 D3F88030 		ldr	r3, [r3, #128]
 341 01d8 0023     		movs	r3, #0
 342 01da 8DF82F30 		strb	r3, [sp, #47]
 343 01de 0123     		movs	r3, #1
 344 01e0 0A93     		str	r3, [sp, #40]
 345              	.LBE35:
 346              	.LBE34:
 347              	.LBB36:
 348              	.LBB37:
1402:src-gen/sr5e1/clock.h ****     if (smode) {
 349              		.loc 2 1402 19
 350 01e2 4FF08843 		mov	r3, #1140850688
 351 01e6 D3F88820 		ldr	r2, [r3, #136]
 352 01ea 4FF08841 		mov	r1, #1140850688
 353 01ee 0A9B     		ldr	r3, [sp, #40]
 354 01f0 1343     		orrs	r3, r3, r2
 355 01f2 C1F88830 		str	r3, [r1, #136]
1403:src-gen/sr5e1/clock.h ****         RCC->C1_APB2LSMENR |= m;
 356              		.loc 2 1403 8
 357 01f6 9DF82F30 		ldrb	r3, [sp, #47]	@ zero_extendqisi2
 358 01fa 002B     		cmp	r3, #0
 359 01fc 14D0     		beq	.L8
1404:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 360              		.loc 2 1404 28
 361 01fe 4FF08843 		mov	r3, #1140850688
 362 0202 D3F8A820 		ldr	r2, [r3, #168]
 363 0206 4FF08841 		mov	r1, #1140850688
 364 020a 0A9B     		ldr	r3, [sp, #40]
 365 020c 1343     		orrs	r3, r3, r2
 366 020e C1F8A830 		str	r3, [r1, #168]
1406:src-gen/sr5e1/clock.h **** #endif
 367              		.loc 2 1406 28
 368 0212 4FF08843 		mov	r3, #1140850688
 369 0216 D3F8C820 		ldr	r2, [r3, #200]
 370 021a 4FF08841 		mov	r1, #1140850688
 371 021e 0A9B     		ldr	r3, [sp, #40]
 372 0220 1343     		orrs	r3, r3, r2
 373 0222 C1F8C830 		str	r3, [r1, #200]
 374 0226 15E0     		b	.L9
 375              	.L8:
1410:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 376              		.loc 2 1410 28
 377 0228 4FF08843 		mov	r3, #1140850688
 378 022c D3F8A820 		ldr	r2, [r3, #168]
1410:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 379              		.loc 2 1410 31
 380 0230 0A9B     		ldr	r3, [sp, #40]
 381 0232 DB43     		mvns	r3, r3
1410:src-gen/sr5e1/clock.h **** #if CLOCK_CFG_SMP_MODE == TRUE
 382              		.loc 2 1410 28
 383 0234 4FF08841 		mov	r1, #1140850688
 384 0238 1340     		ands	r3, r3, r2
 385 023a C1F8A830 		str	r3, [r1, #168]
1412:src-gen/sr5e1/clock.h **** #endif
 386              		.loc 2 1412 28
 387 023e 4FF08843 		mov	r3, #1140850688
 388 0242 D3F8C820 		ldr	r2, [r3, #200]
1412:src-gen/sr5e1/clock.h **** #endif
 389              		.loc 2 1412 31
 390 0246 0A9B     		ldr	r3, [sp, #40]
 391 0248 DB43     		mvns	r3, r3
1412:src-gen/sr5e1/clock.h **** #endif
 392              		.loc 2 1412 28
 393 024a 4FF08841 		mov	r1, #1140850688
 394 024e 1340     		ands	r3, r3, r2
 395 0250 C1F8C830 		str	r3, [r1, #200]
 396              	.L9:
1416:src-gen/sr5e1/clock.h **** }
 397              		.loc 2 1416 15
 398 0254 4FF08843 		mov	r3, #1140850688
 399 0258 D3F88830 		ldr	r3, [r3, #136]
 400              	.LBE37:
 401              	.LBE36:
  66:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  67:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     /* Resets everything, required for clean debugging sessions.*/
  68:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     clock_reset_AHB1L(0xFFFFFFFFU);
  69:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     clock_reset_AHB1H(0xFFFFFFFFU);
  70:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     clock_reset_AHB2L(0xFFFFFE00U); /* Not GPIOs.*/
  71:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     clock_reset_AHB2H(0xFFFFFFFFU);
  72:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     clock_reset_APB1L(0xFFFFFFFFU);
  73:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     clock_reset_APB2L(0xFFFFFFFFU);
  74:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     clock_reset_APB2H(0xFFFFFFFFU);
  75:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  76:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     /* Enables various clocks.*/
  77:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     (void)clock_enable_APB1L(false, RCC_APB1LENR_RTC);
  78:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     (void)clock_enable_APB2L(false, RCC_APB2LENR_SYSCFG);
  79:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  80:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     /* Wait IRCOSC is ready.*/
  81:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     while ((RCC->CR & RCC_CR_IRCOSCRDY) == 0U) {
 402              		.loc 1 81 11
 403 025c 00BF     		nop
 404              	.L11:
 405              		.loc 1 81 16 discriminator 1
 406 025e 4FF08843 		mov	r3, #1140850688
 407 0262 1B68     		ldr	r3, [r3]
 408              		.loc 1 81 21 discriminator 1
 409 0264 03F48063 		and	r3, r3, #1024
 410              		.loc 1 81 11 discriminator 1
 411 0268 002B     		cmp	r3, #0
 412 026a F8D0     		beq	.L11
  82:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     }
  83:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  84:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** #if CLOCK_CFG_XOSC_ENABLED
  85:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** #if CLOCK_CFG_XOSC_BYPASS
  86:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     /* XOSC activation with bypass.*/
  87:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     RCC->CR |= RCC_CR_XOSCON | RCC_CR_XOSCBYP;
  88:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** #else
  89:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     /* XOSC activation.*/
  90:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     RCC->CR |= RCC_CR_XOSCON;
 413              		.loc 1 90 13
 414 026c 4FF08843 		mov	r3, #1140850688
 415 0270 1B68     		ldr	r3, [r3]
 416 0272 4FF08842 		mov	r2, #1140850688
 417 0276 43F48033 		orr	r3, r3, #65536
 418 027a 1360     		str	r3, [r2]
  91:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** #endif
  92:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     /* Wait XOSC is ready.*/
  93:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     while ((RCC->CR & RCC_CR_XOSCRDY) == 0U) {
 419              		.loc 1 93 11
 420 027c 00BF     		nop
 421              	.L12:
 422              		.loc 1 93 16 discriminator 1
 423 027e 4FF08843 		mov	r3, #1140850688
 424 0282 1B68     		ldr	r3, [r3]
 425              		.loc 1 93 21 discriminator 1
 426 0284 03F40033 		and	r3, r3, #131072
 427              		.loc 1 93 11 discriminator 1
 428 0288 002B     		cmp	r3, #0
 429 028a F8D0     		beq	.L12
  94:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     }
  95:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** #endif
  96:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
  97:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** #if CLOCK_CFG_LSI_ENABLED
  98:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     /* LSI activation if not already active.*/
  99:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     RCC->CR |= RCC_CR_LSION;
 100:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     /* Wait LSI is ready.*/
 101:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     while ((RCC->CR & RCC_CR_LSIRDY) == 0U) {
 102:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     }
 103:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** #endif
 104:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
 105:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** #if CLOCK_ACTIVATE_PLL0
 106:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     /* PLL0 configuration and activation.*/
 107:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     RCC->PLLCFGR |= CLOCK_CFG_PLL0SRC;
 430              		.loc 1 107 18
 431 028c 4FF08843 		mov	r3, #1140850688
 432 0290 DB68     		ldr	r3, [r3, #12]
 433 0292 4FF08842 		mov	r2, #1140850688
 434 0296 43F00303 		orr	r3, r3, #3
 435 029a D360     		str	r3, [r2, #12]
 108:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     
 109:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     PLLDIG->PLL0DV = CLOCK_PLL0RFDPHI1_FIELD(CLOCK_CFG_PLL0RFDPHI1_VALUE) |
 436              		.loc 1 109 11
 437 029c 2B4B     		ldr	r3, .L16+4
 438              		.loc 1 109 20
 439 029e 2C4A     		ldr	r2, .L16+8
 440 02a0 9A60     		str	r2, [r3, #8]
 110:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                      CLOCK_PLL0RFDPHI_FIELD(CLOCK_CFG_PLL0RFDPHI_VALUE)   |
 111:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                      CLOCK_PLL0PREDIV_FIELD(CLOCK_CFG_PLL0PREDIV_VALUE)   |
 112:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                      CLOCK_PLL0MFD_FIELD(CLOCK_CFG_PLL0MFD_VALUE);
 113:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
 114:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     RCC->CR |= RCC_CR_PLL0ON;
 441              		.loc 1 114 13
 442 02a2 4FF08843 		mov	r3, #1140850688
 443 02a6 1B68     		ldr	r3, [r3]
 444 02a8 4FF08842 		mov	r2, #1140850688
 445 02ac 43F08073 		orr	r3, r3, #16777216
 446 02b0 1360     		str	r3, [r2]
 115:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     while ((RCC->CR & RCC_CR_PLL0LOCK) == 0U) {
 447              		.loc 1 115 11
 448 02b2 00BF     		nop
 449              	.L13:
 450              		.loc 1 115 16 discriminator 1
 451 02b4 4FF08843 		mov	r3, #1140850688
 452 02b8 1B68     		ldr	r3, [r3]
 453              		.loc 1 115 21 discriminator 1
 454 02ba 03F00073 		and	r3, r3, #33554432
 455              		.loc 1 115 11 discriminator 1
 456 02be 002B     		cmp	r3, #0
 457 02c0 F8D0     		beq	.L13
 116:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     }
 117:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** #endif
 118:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
 119:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** #if CLOCK_ACTIVATE_PLL1
 120:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     /* PLL1 configuration and activation.*/
 121:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     RCC->PLLCFGR |= CLOCK_CFG_PLL1SRC;
 458              		.loc 1 121 18
 459 02c2 4FF08843 		mov	r3, #1140850688
 460 02c6 DB68     		ldr	r3, [r3, #12]
 461 02c8 4FF08842 		mov	r2, #1140850688
 462 02cc 43F40073 		orr	r3, r3, #512
 463 02d0 D360     		str	r3, [r2, #12]
 122:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
 123:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     PLLDIG->PLL1DV = CLOCK_PLL1RFDPHI_FIELD(CLOCK_CFG_PLL1RFDPHI_VALUE)  | 
 464              		.loc 1 123 11
 465 02d2 1E4B     		ldr	r3, .L16+4
 466              		.loc 1 123 20
 467 02d4 1F4A     		ldr	r2, .L16+12
 468 02d6 9A62     		str	r2, [r3, #40]
 124:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                      CLOCK_PLL1MFD_FIELD(CLOCK_CFG_PLL1MFD_VALUE);
 125:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
 126:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     RCC->CR |= RCC_CR_PLL1ON;
 469              		.loc 1 126 13
 470 02d8 4FF08843 		mov	r3, #1140850688
 471 02dc 1B68     		ldr	r3, [r3]
 472 02de 4FF08842 		mov	r2, #1140850688
 473 02e2 43F08053 		orr	r3, r3, #268435456
 474 02e6 1360     		str	r3, [r2]
 127:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     while ((RCC->CR & RCC_CR_PLL1LOCK) == 0U) {
 475              		.loc 1 127 11
 476 02e8 00BF     		nop
 477              	.L14:
 478              		.loc 1 127 16 discriminator 1
 479 02ea 4FF08843 		mov	r3, #1140850688
 480 02ee 1B68     		ldr	r3, [r3]
 481              		.loc 1 127 21 discriminator 1
 482 02f0 03F00053 		and	r3, r3, #536870912
 483              		.loc 1 127 11 discriminator 1
 484 02f4 002B     		cmp	r3, #0
 485 02f6 F8D0     		beq	.L14
 128:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     }
 129:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** #endif
 130:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
 131:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     /* Clock tree settings.*/
 132:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     RCC->CFGR   = CLOCK_MCOPRE_FIELD(CLOCK_CFG_MCOPRE_VALUE) |
 486              		.loc 1 132 8
 487 02f8 4FF08843 		mov	r3, #1140850688
 488              		.loc 1 132 17
 489 02fc 0022     		movs	r2, #0
 490 02fe 9A60     		str	r2, [r3, #8]
 133:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                   CLOCK_CFG_MCOSEL                           |
 134:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                   CLOCK_SYSPRE_FIELD(CLOCK_CFG_SYSPRE_VALUE);
 135:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
 136:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     RCC->CCIPR1 = CLOCK_CFG_SDADCSEL | CLOCK_CFG_ADCSEL   |
 491              		.loc 1 136 8
 492 0300 4FF08843 		mov	r3, #1140850688
 493              		.loc 1 136 17
 494 0304 144A     		ldr	r2, .L16+16
 495 0306 5A62     		str	r2, [r3, #36]
 137:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                   CLOCK_CFG_FDCANSEL | CLOCK_CFG_SPISEL   |
 138:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                   CLOCK_CFG_I2CSEL   | CLOCK_CFG_UARTSEL;
 139:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
 140:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     RCC->CCIPR2 = CLOCK_SDADCPRE_FIELD(CLOCK_CFG_SDADCPRE_VALUE) | 
 496              		.loc 1 140 8
 497 0308 4FF08843 		mov	r3, #1140850688
 498              		.loc 1 140 17
 499 030c 4FF00062 		mov	r2, #134217728
 500 0310 9A62     		str	r2, [r3, #40]
 141:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                   CLOCK_ADCPRE_FIELD(CLOCK_CFG_ADCPRE_VALUE)     |
 142:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                   CLOCK_FDCANPRE_FIELD(CLOCK_CFG_FDCANPRE_VALUE) | 
 143:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                   CLOCK_SPIPRE_FIELD(CLOCK_CFG_SPIPRE_VALUE)     |
 144:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                   CLOCK_I2CPRE_FIELD(CLOCK_CFG_I2CPRE_VALUE)     | 
 145:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                   CLOCK_UARTPRE_FIELD(CLOCK_CFG_UARTPRE_VALUE);
 146:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
 147:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     RCC->LSCFGR = CLOCK_CFG_RTCSEL                           |
 501              		.loc 1 147 8
 502 0312 4FF08843 		mov	r3, #1140850688
 503              		.loc 1 147 17
 504 0316 0022     		movs	r2, #0
 505 0318 DA62     		str	r2, [r3, #44]
 148:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****                   CLOCK_LSIPRE_FIELD(CLOCK_CFG_LSIPRE_VALUE);
 149:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
 150:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     /* Set flash wait states.*/
 151:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     flash_ws_init();
 506              		.loc 1 151 5
 507 031a FFF7FEFF 		bl	flash_ws_init
 152:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** 
 153:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     /* Final clock source.*/
 154:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     RCC->CFGR |= CLOCK_CFG_SW;
 508              		.loc 1 154 15
 509 031e 4FF08843 		mov	r3, #1140850688
 510 0322 9B68     		ldr	r3, [r3, #8]
 511 0324 4FF08842 		mov	r2, #1140850688
 512 0328 43F00703 		orr	r3, r3, #7
 513 032c 9360     		str	r3, [r2, #8]
 155:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     while ((RCC->CFGR & RCC_CFGR_SWS) != (CLOCK_CFG_SW << 3U)) {
 514              		.loc 1 155 11
 515 032e 00BF     		nop
 516              	.L15:
 517              		.loc 1 155 16 discriminator 1
 518 0330 4FF08843 		mov	r3, #1140850688
 519 0334 9B68     		ldr	r3, [r3, #8]
 520              		.loc 1 155 23 discriminator 1
 521 0336 03F03803 		and	r3, r3, #56
 522              		.loc 1 155 11 discriminator 1
 523 033a 382B     		cmp	r3, #56
 524 033c F8D1     		bne	.L15
 156:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c ****     }
 157:C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/Clock/src/sr5e1\clock.c **** }
 525              		.loc 1 157 1
 526 033e 00BF     		nop
 527 0340 00BF     		nop
 528 0342 0DB0     		add	sp, sp, #52
 529              		.cfi_def_cfa_offset 4
 530              		@ sp needed
 531 0344 5DF804FB 		ldr	pc, [sp], #4
 532              	.L17:
 533              		.align	2
 534              	.L16:
 535 0348 00FEFFFF 		.word	-512
 536 034c 00D80140 		.word	1073862656
 537 0350 18200840 		.word	1074274328
 538 0354 14000200 		.word	131092
 539 0358 66465400 		.word	5523046
 540              		.cfi_endproc
 541              	.LFE437:
 543              		.text
 544              	.Letext0:
 545              		.file 3 "c:\\stellarstudio-7.0\\sdks\\tools-1.4.0\\toolchain\\arm\\mingw64_nt\\10.3-2021.10\\arm-n
 546              		.file 4 "c:\\stellarstudio-7.0\\sdks\\tools-1.4.0\\toolchain\\arm\\mingw64_nt\\10.3-2021.10\\arm-n
 547              		.file 5 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_NVM_
 548              		.file 6 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_PLLD
 549              		.file 7 "C:/StellarStudio-7.0/SDKS/StellarESDK-1.7.0/Modules/Platform/MCU/include/sr5e1/SR5E1_RCC.
DEFINED SYMBOLS
                            *ABS*:00000000 clock.c
C:\Users\EVERYO~1\AppData\Local\Temp\cclFWtrw.s:23     .data.SystemCoreClock:00000000 SystemCoreClock
C:\Users\EVERYO~1\AppData\Local\Temp\cclFWtrw.s:20     .data.SystemCoreClock:00000000 $d
C:\Users\EVERYO~1\AppData\Local\Temp\cclFWtrw.s:26     .itcm:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\cclFWtrw.s:32     .itcm:00000000 flash_ws_init
C:\Users\EVERYO~1\AppData\Local\Temp\cclFWtrw.s:56     .itcm:00000014 $d
C:\Users\EVERYO~1\AppData\Local\Temp\cclFWtrw.s:62     .text.clock_init:00000000 $t
C:\Users\EVERYO~1\AppData\Local\Temp\cclFWtrw.s:69     .text.clock_init:00000000 clock_init
C:\Users\EVERYO~1\AppData\Local\Temp\cclFWtrw.s:535    .text.clock_init:00000348 $d
                           .group:00000000 wm4.0.1ea29c7543256e0887205fa7f8c557c8
                           .group:00000000 wm4.clock_cfg.h.24.0aed3cee9ecce947225a304181294191
                           .group:00000000 wm4.sr5e1xx.h.22.e5c808533cc52ed19fb0830cd7d98924
                           .group:00000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.cmsis_version.h.32.0f826810625204eca22a19868bdc7586
                           .group:00000000 wm4.core_cm7.h.66.8ab2de36917d6fcae18019067fda13e0
                           .group:00000000 wm4.cmsis_gcc.h.26.498d0ad17a45fc9ef20fdc01caf02259
                           .group:00000000 wm4.core_cm7.h.174.43edb295ecdaadad738f48ba6011ffad
                           .group:00000000 wm4.mpu_armv7.h.32.83326921a797fa9d6f70449916b4b839
                           .group:00000000 wm4.cachel1_armv7.h.32.abd77761a989e008b0c60891114a33c7
                           .group:00000000 wm4.SR5E1_ADC.h.14.21608e6aff125ba995dd767d6d8dc311
                           .group:00000000 wm4.SR5E1_CEM.h.14.01fe5742c8f1ae35b1f3af05932f702e
                           .group:00000000 wm4.SR5E1_CMU.h.14.2617b38b159abe38028862394531e06d
                           .group:00000000 wm4.SR5E1_COMP.h.14.4b6fdfe4f5f7fd9bedf3a99b98bdf4cd
                           .group:00000000 wm4.SR5E1_CORDIC.h.14.354fbf7c9eaf6963d38eaa25cf28ffe8
                           .group:00000000 wm4.SR5E1_CRC.h.14.c64d0f7767671ddb92e9ead0a1162100
                           .group:00000000 wm4.SR5E1_DAC.h.14.8c26a0ff04b0cfeb55306cc3f22187b8
                           .group:00000000 wm4.SR5E1_DBGMCU.h.14.427df893d53a8044654f017ba01c25ed
                           .group:00000000 wm4.SR5E1_DMA.h.14.a7f9a92f844b40a86965798c2e64240b
                           .group:00000000 wm4.SR5E1_DMAMUX.h.14.471b3b4dfd4d41515f1df49493698866
                           .group:00000000 wm4.SR5E1_EXTI.h.14.a325ea3fe89cd84894660551c33241ea
                           .group:00000000 wm4.SR5E1_FCCU.h.14.0ebf0f0f36e079d28613ad2c80e17e23
                           .group:00000000 wm4.SR5E1_FDCAN.h.14.ac57101fad5dbc798bfb93f34c899de7
                           .group:00000000 wm4.SR5E1_FLASH_REG_ITF.h.14.d23d1d44923f9b20b8c8fdb51d66aefd
                           .group:00000000 wm4.SR5E1_GPIO.h.14.1c84071e130d7c64b62470ab0e18a1f1
                           .group:00000000 wm4.SR5E1_HRTIM.h.24.03932387d2522e6bd5c772a4edaf2f5d
                           .group:00000000 wm4.SR5E1_HSEM.h.14.cbe70eee519f01b16452c3f8c99d8df1
                           .group:00000000 wm4.SR5E1_I2C.h.14.350ba3e0f4fd57828457efa80135c36c
                           .group:00000000 wm4.SR5E1_IMA.h.14.62b7088985ab2b7ce9b030a02daa1f7d
                           .group:00000000 wm4.SR5E1_IWDG.h.14.20b7c5f05cf7ae94464c360d7af3660d
                           .group:00000000 wm4.SR5E1_MEMU.h.14.04bad7ae4c52ce334a4fc900aad2ae5b
                           .group:00000000 wm4.SR5E1_NVM_CTRL.h.14.5f442617f0628d4f16258f211c614ef9
                           .group:00000000 wm4.SR5E1_PLLDIG.h.14.bd87a8e6917eee17dae2f312c8e5fa53
                           .group:00000000 wm4.SR5E1_PMC_DIG.h.14.54173b566c6656344766ec4ef46c9281
                           .group:00000000 wm4.SR5E1_RCC.h.14.56734803c71534de286e793a53649740
                           .group:00000000 wm4.SR5E1_RTC.h.14.47037cbc7d8175dbf2be1dc0bb955e3f
                           .group:00000000 wm4.SR5E1_SD_ADC.h.14.552b97d0b8f3c1fd4df6d8964b2f1a80
                           .group:00000000 wm4.SR5E1_SMPU.h.14.8ce5bb6d5d7c579cd725f492f46e9085
                           .group:00000000 wm4.SR5E1_SPI.h.14.42d52112e540f85ade4d9135f8b87d72
                           .group:00000000 wm4.SR5E1_SSCM.h.14.8e6a2ad0ce5fca422fc3d69939b6125b
                           .group:00000000 wm4.SR5E1_SYSCFG.h.14.02b969490118ce4069914b5e94f7ca65
                           .group:00000000 wm4.SR5E1_TDM.h.14.a40ed7928cad243a57fd233fccf01ad2
                           .group:00000000 wm4.SR5E1_TIM.h.14.f17572f4c16f3f152b8164ad25c34f5b
                           .group:00000000 wm4.SR5E1_UART.h.14.eec3ab82b02b3bdb3de500483675b83f
                           .group:00000000 wm4.SR5E1_WWDG.h.14.59b45efc70e442cc6ef03702aad4ad88
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.typedefs.h.36.07fe3956b4e751037cfee70edcd0b397
                           .group:00000000 wm4.irq_numbers.h.38.6294b95aed1bf7b3a2cda0eed8ce8f57
                           .group:00000000 wm4.regs.h.23.2ac145b4f57126d16daed5fbd86d99c6
                           .group:00000000 wm4.clock.h.37.80236c5607fdd9eb9275e5111a4191c3

NO UNDEFINED SYMBOLS
